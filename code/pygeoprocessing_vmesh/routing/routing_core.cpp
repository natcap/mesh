/* Generated by Cython 0.22 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_22"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#define __Pyx_void_to_None(void_result) (void_result, Py_INCREF(Py_None), Py_None)
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(T& ref) : ptr(&ref) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__pygeoprocessing__routing__routing_core
#define __PYX_HAVE_API__pygeoprocessing__routing__routing_core
#include <deque>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <utility>
#include <set>
#include <map>
#include "math.h"
#include "time.h"
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "pygeoprocessing\\routing\\routing_core.pyx",
  "__init__.pxd",
  "stringsource",
  "type.pxd",
};
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;

#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||           \
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) && \
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && MSC_VER
    #include <Windows.h>
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using MSVC atomics"
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview) \
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview) \
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview) \
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview) \
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif


/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":726
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":727
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":728
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":729
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":733
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":734
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":735
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":736
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":740
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":741
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":750
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":751
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":752
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":754
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":755
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":756
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":758
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":759
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":761
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":762
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":763
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":765
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":766
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":767
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":769
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_15pygeoprocessing_7routing_12routing_core_calculate_transport;
struct __pyx_t_15pygeoprocessing_7routing_12routing_core_Row_Col_Weight_Tuple;
struct __pyx_opt_args_15pygeoprocessing_7routing_12routing_core_flat_edges;

/* "pygeoprocessing\routing\routing_core.pxd":5
 * cdef find_outlets(dem_uri, flow_direction_uri, deque[int] &outlet_deque)
 * cdef calculate_transport(
 *     outflow_direction_uri, outflow_weights_uri, deque[int] &sink_cell_deque,             # <<<<<<<<<<<<<<
 *     source_uri, absorption_rate_uri, loss_uri, flux_uri, absorption_mode,
 *     stream_uri=?)
 */
struct __pyx_opt_args_15pygeoprocessing_7routing_12routing_core_calculate_transport {
  int __pyx_n;
  PyObject *stream_uri;
};

/* "pygeoprocessing\routing\routing_core.pyx":586
 *     block_cache.flush_cache()
 * 
 * cdef struct Row_Col_Weight_Tuple:             # <<<<<<<<<<<<<<
 *     int row_index
 *     int col_index
 */
struct __pyx_t_15pygeoprocessing_7routing_12routing_core_Row_Col_Weight_Tuple {
  int row_index;
  int col_index;
  int weight;
};

/* "pygeoprocessing\routing\routing_core.pyx":1467
 * @cython.cdivision(True)
 * cdef flat_edges(
 *         dem_uri, flow_direction_uri, deque[int] &high_edges,             # <<<<<<<<<<<<<<
 *         deque[int] &low_edges, int drain_off_edge=0):
 *     """This function locates flat cells that border on higher and lower terrain
 */
struct __pyx_opt_args_15pygeoprocessing_7routing_12routing_core_flat_edges {
  int __pyx_n;
  int drain_off_edge;
};

/* "pygeoprocessing\routing\routing_core.pyx":39
 * cdef int N_BLOCK_COLS = 16
 * 
 * cdef class BlockCache:             # <<<<<<<<<<<<<<
 *     cdef numpy.int32_t[:,:] row_tag_cache
 *     cdef numpy.int32_t[:,:] col_tag_cache
 */
struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache {
  PyObject_HEAD
  struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_vtab;
  __Pyx_memviewslice row_tag_cache;
  __Pyx_memviewslice col_tag_cache;
  __Pyx_memviewslice cache_dirty;
  int n_block_rows;
  int n_block_cols;
  int block_col_size;
  int block_row_size;
  int n_rows;
  int n_cols;
};


/* "View.MemoryView":99
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":269
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":302
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":921
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "pygeoprocessing\routing\routing_core.pyx":39
 * cdef int N_BLOCK_COLS = 16
 * 
 * cdef class BlockCache:             # <<<<<<<<<<<<<<
 *     cdef numpy.int32_t[:,:] row_tag_cache
 *     cdef numpy.int32_t[:,:] col_tag_cache
 */

struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache {
  void (*update_cache)(struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *, int, int, int *, int *, int *, int *);
  void (*flush_cache)(struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *);
};
static struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_vtabptr_15pygeoprocessing_7routing_12routing_core_BlockCache;


/* "View.MemoryView":302
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":921
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound) \
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback);

static void __Pyx_RaiseBufferIndexError(int axis);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

#define __Pyx_BufPtrStrided4d(type, buf, i0, s0, i1, s1, i2, s2, i3, s3) (type)((char*)buf + i0 * s0 + i1 * s1 + i2 * s2 + i3 * s3)
#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
static CYTHON_INLINE long __Pyx_mod_long(long, long); /* proto */

static void __Pyx_RaiseBufferFallbackError(void);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t); /* proto */

#define UNARY_NEG_WOULD_OVERFLOW(x)            (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *get_memview(PyObject *__pyx_v_self); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_memoryview_transpose(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview__get__base(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_shape(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_strides(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_suboffsets(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_ndim(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_itemsize(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_nbytes(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_size(PyObject *__pyx_v_self); /*proto*/
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

static CYTHON_INLINE long __Pyx_div_long(long, long); /* proto */

static PyObject *__pyx_memoryviewslice__get__base(PyObject *__pyx_v_self); /*proto*/
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int8_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int32(npy_int32 value);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice *mvs,
                                        char order, int ndim);

static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int32_t(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_15pygeoprocessing_7routing_12routing_core_10BlockCache_update_cache(struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_self, int __pyx_v_global_row, int __pyx_v_global_col, int *__pyx_v_row_index, int *__pyx_v_col_index, int *__pyx_v_row_block_offset, int *__pyx_v_col_block_offset); /* proto*/
static void __pyx_f_15pygeoprocessing_7routing_12routing_core_10BlockCache_flush_cache(struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'libcpp.deque' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'cython.view' */

/* Module declarations from 'cython' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'pygeoprocessing.routing.routing_core' */
static PyTypeObject *__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static double __pyx_v_15pygeoprocessing_7routing_12routing_core_PI;
static double __pyx_v_15pygeoprocessing_7routing_12routing_core_INF;
static int __pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS;
static int __pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_find_outlets(PyObject *, PyObject *, std::deque<int>  &); /*proto*/
static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_calculate_transport(PyObject *, PyObject *, std::deque<int>  &, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, struct __pyx_opt_args_15pygeoprocessing_7routing_12routing_core_calculate_transport *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_flat_edges(PyObject *, PyObject *, std::deque<int>  &, std::deque<int>  &, struct __pyx_opt_args_15pygeoprocessing_7routing_12routing_core_flat_edges *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_label_flats(PyObject *, std::deque<int>  &, PyObject *); /*proto*/
static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_drain_flats(std::deque<int>  &, std::deque<int>  &, PyObject *, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_away_from_higher(std::deque<int>  &, PyObject *, PyObject *, PyObject *, std::map<int,int>  &); /*proto*/
static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_towards_lower(std::deque<int>  &, PyObject *, PyObject *, PyObject *, std::map<int,int>  &); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn_npy_int8 = { "npy_int8", NULL, sizeof(npy_int8), { 0 }, 0, IS_UNSIGNED(npy_int8) ? 'U' : 'I', IS_UNSIGNED(npy_int8), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn_npy_float32 = { "npy_float32", NULL, sizeof(npy_float32), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn_npy_byte = { "npy_byte", NULL, sizeof(npy_byte), { 0 }, 0, IS_UNSIGNED(npy_byte) ? 'U' : 'I', IS_UNSIGNED(npy_byte), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn_npy_float64 = { "npy_float64", NULL, sizeof(npy_float64), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn_npy_int32 = { "npy_int32", NULL, sizeof(npy_int32), { 0 }, 0, IS_UNSIGNED(npy_int32) ? 'U' : 'I', IS_UNSIGNED(npy_int32), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t = { "int8_t", NULL, sizeof(__pyx_t_5numpy_int8_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int8_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int8_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t = { "int32_t", NULL, sizeof(__pyx_t_5numpy_int32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int32_t), 0 };
#define __Pyx_MODULE_NAME "pygeoprocessing.routing.routing_core"
int __pyx_module_is_main_pygeoprocessing__routing__routing_core = 0;

/* Implementation of 'pygeoprocessing.routing.routing_core' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_OSError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static int __pyx_pf_15pygeoprocessing_7routing_12routing_core_10BlockCache___cinit__(struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_self, int __pyx_v_n_block_rows, int __pyx_v_n_block_cols, int __pyx_v_n_rows, int __pyx_v_n_cols, int __pyx_v_block_row_size, int __pyx_v_block_col_size, PyObject *__pyx_v_band_list, PyObject *__pyx_v_block_list, PyObject *__pyx_v_update_list, __Pyx_memviewslice __pyx_v_cache_dirty); /* proto */
static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_calculate_flow_weights(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_direction_uri, PyObject *__pyx_v_outflow_weights_uri, PyObject *__pyx_v_outflow_direction_uri); /* proto */
static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_2fill_pits(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_uri, PyObject *__pyx_v_dem_out_uri); /* proto */
static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_4flow_direction_inf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_uri, PyObject *__pyx_v_flow_direction_uri); /* proto */
static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_6distance_to_stream(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_direction_uri, PyObject *__pyx_v_stream_uri, PyObject *__pyx_v_distance_uri, PyObject *__pyx_v_factor_uri); /* proto */
static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_8percent_to_sink(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sink_pixels_uri, PyObject *__pyx_v_export_rate_uri, PyObject *__pyx_v_outflow_direction_uri, PyObject *__pyx_v_outflow_weights_uri, PyObject *__pyx_v_effect_uri); /* proto */
static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_10flow_direction_inf_masked_flow_dirs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flat_mask_uri, PyObject *__pyx_v_labels_uri, PyObject *__pyx_v_flow_direction_uri); /* proto */
static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_12resolve_flats(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_uri, PyObject *__pyx_v_flow_direction_uri, PyObject *__pyx_v_flat_mask_uri, PyObject *__pyx_v_labels_uri, PyObject *__pyx_v_drain_off_edge); /* proto */
static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_14route_flux(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_in_flow_direction, PyObject *__pyx_v_in_dem, PyObject *__pyx_v_in_source_uri, PyObject *__pyx_v_in_absorption_rate_uri, PyObject *__pyx_v_loss_uri, PyObject *__pyx_v_flux_uri, PyObject *__pyx_v_absorption_mode, PyObject *__pyx_v_aoi_uri, PyObject *__pyx_v_stream_uri); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_15pygeoprocessing_7routing_12routing_core_BlockCache(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_B[] = "B";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_b[] = "b";
static char __pyx_k_c[] = "c";
static char __pyx_k_d[] = "d";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_l[] = "l";
static char __pyx_k_q[] = "q";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k_id[] = "id";
static char __pyx_k_os[] = "os";
static char __pyx_k_pi[] = "pi";
static char __pyx_k_INF[] = "INF";
static char __pyx_k_a_c[] = "a_c";
static char __pyx_k_a_f[] = "a_f";
static char __pyx_k_d_1[] = "d_1";
static char __pyx_k_d_2[] = "d_2";
static char __pyx_k_e_0[] = "e_0";
static char __pyx_k_e_1[] = "e_1";
static char __pyx_k_e_2[] = "e_2";
static char __pyx_k_inf[] = "inf";
static char __pyx_k_obj[] = "obj";
static char __pyx_k_s_1[] = "s_1";
static char __pyx_k_s_2[] = "s_2";
static char __pyx_k_tif[] = ".tif";
static char __pyx_k_zip[] = "zip";
static char __pyx_k_Open[] = "Open";
static char __pyx_k_base[] = "base";
static char __pyx_k_byte[] = "byte";
static char __pyx_k_ceil[] = "ceil";
static char __pyx_k_gdal[] = "gdal";
static char __pyx_k_info[] = "info";
static char __pyx_k_int8[] = "int8";
static char __pyx_k_join[] = "join";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_mode[] = "mode";
static char __pyx_k_name[] = "name";
static char __pyx_k_ndim[] = "ndim";
static char __pyx_k_pack[] = "pack";
static char __pyx_k_path[] = "path";
static char __pyx_k_size[] = "size";
static char __pyx_k_step[] = "step";
static char __pyx_k_stop[] = "stop";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_warn[] = "warn";
static char __pyx_k_xoff[] = "xoff";
static char __pyx_k_yoff[] = "yoff";
static char __pyx_k_DEBUG[] = "DEBUG";
static char __pyx_k_GTiff[] = "GTiff";
static char __pyx_k_XSize[] = "XSize";
static char __pyx_k_YSize[] = "YSize";
static char __pyx_k_class[] = "__class__";
static char __pyx_k_dtype[] = "dtype";
static char __pyx_k_empty[] = "empty";
static char __pyx_k_error[] = "error";
static char __pyx_k_flags[] = "flags";
static char __pyx_k_found[] = "found";
static char __pyx_k_index[] = "index";
static char __pyx_k_int32[] = "int32";
static char __pyx_k_max_r[] = "max_r";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_osgeo[] = "osgeo";
static char __pyx_k_range[] = "range";
static char __pyx_k_shape[] = "shape";
static char __pyx_k_slope[] = "slope";
static char __pyx_k_start[] = "start";
static char __pyx_k_zeros[] = "zeros";
static char __pyx_k_LOGGER[] = "LOGGER";
static char __pyx_k_dem_ds[] = "dem_ds";
static char __pyx_k_ds_uri[] = "ds_uri";
static char __pyx_k_factor[] = "factor";
static char __pyx_k_format[] = "format";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_in_dem[] = "in_dem";
static char __pyx_k_lnevel[] = "lnevel";
static char __pyx_k_n_cols[] = "n_cols";
static char __pyx_k_n_rows[] = "n_rows";
static char __pyx_k_name_2[] = "__name__";
static char __pyx_k_remove[] = "remove";
static char __pyx_k_struct[] = "struct";
static char __pyx_k_suffix[] = "suffix";
static char __pyx_k_unpack[] = "unpack";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_Dataset[] = "Dataset";
static char __pyx_k_OSError[] = "OSError";
static char __pyx_k_aoi_uri[] = "aoi_uri";
static char __pyx_k_buf_obj[] = "buf_obj";
static char __pyx_k_dataset[] = "dataset";
static char __pyx_k_datefmt[] = "datefmt";
static char __pyx_k_dem_uri[] = "dem_uri";
static char __pyx_k_dirname[] = "dirname";
static char __pyx_k_e_0_col[] = "e_0_col";
static char __pyx_k_e_0_row[] = "e_0_row";
static char __pyx_k_e_1_col[] = "e_1_col";
static char __pyx_k_e_1_row[] = "e_1_row";
static char __pyx_k_e_2_col[] = "e_2_col";
static char __pyx_k_e_2_row[] = "e_2_row";
static char __pyx_k_float32[] = "float32";
static char __pyx_k_float64[] = "float64";
static char __pyx_k_fortran[] = "fortran";
static char __pyx_k_logging[] = "logging";
static char __pyx_k_memview[] = "memview";
static char __pyx_k_nearest[] = "nearest";
static char __pyx_k_reshape[] = "reshape";
static char __pyx_k_Ellipsis[] = "Ellipsis";
static char __pyx_k_GDT_Byte[] = "GDT_Byte";
static char __pyx_k_dem_band[] = "dem_band";
static char __pyx_k_end_time[] = "end_time";
static char __pyx_k_flux_uri[] = "flux_uri";
static char __pyx_k_itemsize[] = "itemsize";
static char __pyx_k_loss_uri[] = "loss_uri";
static char __pyx_k_GA_Update[] = "GA_Update";
static char __pyx_k_GDT_Int32[] = "GDT_Int32";
static char __pyx_k_TypeError[] = "TypeError";
static char __pyx_k_band_list[] = "band_list";
static char __pyx_k_cell_size[] = "cell_size";
static char __pyx_k_col_index[] = "col_index";
static char __pyx_k_dem_array[] = "dem_array";
static char __pyx_k_dem_block[] = "dem_block";
static char __pyx_k_e_1_label[] = "e_1_label";
static char __pyx_k_e_2_label[] = "e_2_label";
static char __pyx_k_enumerate[] = "enumerate";
static char __pyx_k_exception[] = "exception";
static char __pyx_k_factor_ds[] = "factor_ds";
static char __pyx_k_fill_pits[] = "fill_pits";
static char __pyx_k_flow_band[] = "flow_band";
static char __pyx_k_getLogger[] = "getLogger";
static char __pyx_k_last_time[] = "last_time";
static char __pyx_k_low_edges[] = "low_edges";
static char __pyx_k_max_index[] = "max_index";
static char __pyx_k_out_block[] = "out_block";
static char __pyx_k_pit_count[] = "pit_count";
static char __pyx_k_row_index[] = "row_index";
static char __pyx_k_slope_max[] = "slope_max";
static char __pyx_k_step_size[] = "step_size";
static char __pyx_k_stream_ds[] = "stream_ds";
static char __pyx_k_win_xsize[] = "win_xsize";
static char __pyx_k_win_ysize[] = "win_ysize";
static char __pyx_k_FlushCache[] = "FlushCache";
static char __pyx_k_IndexError[] = "IndexError";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_WriteArray[] = "WriteArray";
static char __pyx_k_block_list[] = "block_list";
static char __pyx_k_col_offset[] = "col_offset";
static char __pyx_k_dem_nodata[] = "dem_nodata";
static char __pyx_k_dem_out_ds[] = "dem_out_ds";
static char __pyx_k_effect_uri[] = "effect_uri";
static char __pyx_k_factor_uri[] = "factor_uri";
static char __pyx_k_fill_value[] = "fill_value";
static char __pyx_k_flat_index[] = "flat_index";
static char __pyx_k_flow_block[] = "flow_block";
static char __pyx_k_global_col[] = "global_col";
static char __pyx_k_global_row[] = "global_row";
static char __pyx_k_high_edges[] = "high_edges";
static char __pyx_k_label_band[] = "label_band";
static char __pyx_k_labels_uri[] = "labels_uri";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_route_flux[] = "route_flux";
static char __pyx_k_row_offset[] = "row_offset";
static char __pyx_k_source_uri[] = "source_uri";
static char __pyx_k_start_time[] = "start_time";
static char __pyx_k_stream_uri[] = "stream_uri";
static char __pyx_k_GA_ReadOnly[] = "GA_ReadOnly";
static char __pyx_k_GDT_Float32[] = "GDT_Float32";
static char __pyx_k_MemoryError[] = "MemoryError";
static char __pyx_k_RasterXSize[] = "RasterXSize";
static char __pyx_k_RasterYSize[] = "RasterYSize";
static char __pyx_k_ReadAsArray[] = "ReadAsArray";
static char __pyx_k_basicConfig[] = "basicConfig";
static char __pyx_k_block_cache[] = "block_cache";
static char __pyx_k_cache_dirty[] = "cache_dirty";
static char __pyx_k_col_offsets[] = "col_offsets";
static char __pyx_k_collections[] = "collections";
static char __pyx_k_dataset_uri[] = "dataset_uri";
static char __pyx_k_dem_out_uri[] = "dem_out_uri";
static char __pyx_k_distance_ds[] = "distance_ds";
static char __pyx_k_e_0_offsets[] = "e_0_offsets";
static char __pyx_k_e_1_offsets[] = "e_1_offsets";
static char __pyx_k_e_2_offsets[] = "e_2_offsets";
static char __pyx_k_effect_band[] = "effect_band";
static char __pyx_k_facet_index[] = "facet_index";
static char __pyx_k_factor_band[] = "factor_band";
static char __pyx_k_flow_nodata[] = "flow_nodata";
static char __pyx_k_label_block[] = "label_block";
static char __pyx_k_m_d_Y_H_M_S[] = "%m/%d/%Y %H:%M:%S ";
static char __pyx_k_n_neighbors[] = "n_neighbors";
static char __pyx_k_nodata_flow[] = "nodata_flow";
static char __pyx_k_row_offsets[] = "row_offsets";
static char __pyx_k_stream_band[] = "stream_band";
static char __pyx_k_update_list[] = "update_list";
static char __pyx_k_visit_stack[] = "visit_stack";
static char __pyx_k_GetBlockSize[] = "GetBlockSize";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_current_flow[] = "current_flow";
static char __pyx_k_current_time[] = "current_time";
static char __pyx_k_dem_out_band[] = "dem_out_band";
static char __pyx_k_distance_uri[] = "distance_uri";
static char __pyx_k_effect_block[] = "effect_block";
static char __pyx_k_factor_block[] = "factor_block";
static char __pyx_k_flat_mask_ds[] = "flat_mask_ds";
static char __pyx_k_intersection[] = "intersection";
static char __pyx_k_label_nodata[] = "label_nodata";
static char __pyx_k_n_block_cols[] = "n_block_cols";
static char __pyx_k_n_block_rows[] = "n_block_rows";
static char __pyx_k_neighbor_col[] = "neighbor_col";
static char __pyx_k_neighbor_row[] = "neighbor_row";
static char __pyx_k_nodata_value[] = "nodata_value";
static char __pyx_k_stream_block[] = "stream_block";
static char __pyx_k_swig_destroy[] = "__swig_destroy__";
static char __pyx_k_GetRasterBand[] = "GetRasterBand";
static char __pyx_k_cur_dem_value[] = "cur_dem_value";
static char __pyx_k_current_index[] = "current_index";
static char __pyx_k_current_label[] = "current_label";
static char __pyx_k_dem_out_array[] = "dem_out_array";
static char __pyx_k_distance_band[] = "distance_band";
static char __pyx_k_e_0_col_index[] = "e_0_col_index";
static char __pyx_k_e_0_row_index[] = "e_0_row_index";
static char __pyx_k_e_1_col_index[] = "e_1_col_index";
static char __pyx_k_e_1_row_index[] = "e_1_row_index";
static char __pyx_k_e_2_col_index[] = "e_2_col_index";
static char __pyx_k_e_2_row_index[] = "e_2_row_index";
static char __pyx_k_effect_nodata[] = "effect_nodata";
static char __pyx_k_factor_exists[] = "factor_exists";
static char __pyx_k_flat_mask_uri[] = "flat_mask_uri";
static char __pyx_k_in_source_uri[] = "in_source_uri";
static char __pyx_k_it_flows_here[] = "it_flows_here";
static char __pyx_k_label_dataset[] = "label_dataset";
static char __pyx_k_min_dem_value[] = "min_dem_value";
static char __pyx_k_process_queue[] = "process_queue";
static char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static char __pyx_k_resolve_flats[] = "resolve_flats";
static char __pyx_k_stream_nodata[] = "stream_nodata";
static char __pyx_k_GetDescription[] = "GetDescription";
static char __pyx_k_GetNoDataValue[] = "GetNoDataValue";
static char __pyx_k_block_col_size[] = "block_col_size";
static char __pyx_k_block_row_size[] = "block_row_size";
static char __pyx_k_cells_in_queue[] = "cells_in_queue";
static char __pyx_k_current_stream[] = "current_stream";
static char __pyx_k_distance_block[] = "distance_block";
static char __pyx_k_drain_off_edge[] = "drain_off_edge";
static char __pyx_k_effect_dataset[] = "effect_dataset";
static char __pyx_k_flat_mask_band[] = "flat_mask_band";
static char __pyx_k_flow_direction[] = "flow_direction";
static char __pyx_k_inflow_offsets[] = "inflow_offsets";
static char __pyx_k_labeling_flats[] = "labeling flats";
static char __pyx_k_neighbor_index[] = "neighbor_index";
static char __pyx_k_out_pixel_size[] = "out_pixel_size";
static char __pyx_k_outflow_weight[] = "outflow_weight";
static char __pyx_k_pushed_current[] = "pushed_current";
static char __pyx_k_absorption_mode[] = "absorption_mode";
static char __pyx_k_allocate_buffer[] = "allocate_buffer";
static char __pyx_k_distance_nodata[] = "distance_nodata";
static char __pyx_k_dtype_is_object[] = "dtype_is_object";
static char __pyx_k_export_rate_uri[] = "export_rate_uri";
static char __pyx_k_flat_mask_block[] = "flat_mask_block";
static char __pyx_k_percent_to_sink[] = "percent_to_sink";
static char __pyx_k_pygeoprocessing[] = "pygeoprocessing";
static char __pyx_k_sink_pixels_uri[] = "sink_pixels_uri";
static char __pyx_k_source_and_flux[] = "source_and_flux";
static char __pyx_k_cleanup_uri_list[] = "cleanup_uri_list";
static char __pyx_k_col_block_offset[] = "col_block_offset";
static char __pyx_k_current_distance[] = "current_distance";
static char __pyx_k_diagonal_offsets[] = "diagonal_offsets";
static char __pyx_k_downstream_index[] = "downstream_index";
static char __pyx_k_export_rate_band[] = "export_rate_band";
static char __pyx_k_global_block_col[] = "global_block_col";
static char __pyx_k_global_block_row[] = "global_block_row";
static char __pyx_k_raw_nodata_value[] = "raw_nodata_value";
static char __pyx_k_row_block_offset[] = "row_block_offset";
static char __pyx_k_sink_pixels_band[] = "sink_pixels_band";
static char __pyx_k_angle_to_neighbor[] = "angle_to_neighbor";
static char __pyx_k_export_rate_block[] = "export_rate_block";
static char __pyx_k_in_flow_direction[] = "in_flow_direction";
static char __pyx_k_neighbor_distance[] = "neighbor_distance";
static char __pyx_k_original_distance[] = "original_distance";
static char __pyx_k_outflow_direction[] = "outflow_direction";
static char __pyx_k_outlet_cell_deque[] = "outlet_cell_deque";
static char __pyx_k_processed_cell_ds[] = "processed_cell_ds";
static char __pyx_k_sink_pixels_block[] = "sink_pixels_block";
static char __pyx_k_update_downstream[] = "update_downstream";
static char __pyx_k_align_dataset_list[] = "align_dataset_list";
static char __pyx_k_distance_to_stream[] = "distance_to_stream";
static char __pyx_k_export_rate_nodata[] = "export_rate_nodata";
static char __pyx_k_flow_direction_inf[] = "flow_direction_inf";
static char __pyx_k_flow_direction_uri[] = "flow_direction_uri";
static char __pyx_k_neighbor_col_index[] = "neighbor_col_index";
static char __pyx_k_neighbor_dem_value[] = "neighbor_dem_value";
static char __pyx_k_neighbor_row_index[] = "neighbor_row_index";
static char __pyx_k_outflow_weights_ds[] = "outflow_weights_ds";
static char __pyx_k_processed_cell_tif[] = "processed_cell.tif";
static char __pyx_k_processed_cell_uri[] = "processed_cell_uri";
static char __pyx_k_sink_pixels_nodata[] = "sink_pixels_nodata";
static char __pyx_k_strided_and_direct[] = "<strided and direct>";
static char __pyx_k_temporary_filename[] = "temporary_filename";
static char __pyx_k_There_were_no_flats[] = "There were no flats";
static char __pyx_k_absorption_rate_uri[] = "absorption_rate_uri";
static char __pyx_k_downstream_distance[] = "downstream_distance";
static char __pyx_k_export_rate_dataset[] = "export_rate_dataset";
static char __pyx_k_flow_direction_band[] = "flow_direction_band";
static char __pyx_k_get_nodata_from_uri[] = "get_nodata_from_uri";
static char __pyx_k_n_global_block_cols[] = "n_global_block_cols";
static char __pyx_k_n_global_block_rows[] = "n_global_block_rows";
static char __pyx_k_neighbor_flat_index[] = "neighbor_flat_index";
static char __pyx_k_outflow_weights_uri[] = "outflow_weights_uri";
static char __pyx_k_processed_cell_band[] = "processed_cell_band";
static char __pyx_k_sink_pixels_dataset[] = "sink_pixels_dataset";
static char __pyx_k_cell_travel_distance[] = "cell_travel_distance";
static char __pyx_k_e_0_col_block_offset[] = "e_0_col_block_offset";
static char __pyx_k_e_0_row_block_offset[] = "e_0_row_block_offset";
static char __pyx_k_e_1_col_block_offset[] = "e_1_col_block_offset";
static char __pyx_k_e_1_row_block_offset[] = "e_1_row_block_offset";
static char __pyx_k_e_2_col_block_offset[] = "e_2_col_block_offset";
static char __pyx_k_e_2_row_block_offset[] = "e_2_row_block_offset";
static char __pyx_k_flow_direction_block[] = "flow_direction_block";
static char __pyx_k_get_row_col_from_uri[] = "get_row_col_from_uri";
static char __pyx_k_new_raster_from_base[] = "new_raster_from_base";
static char __pyx_k_outflow_direction_ds[] = "outflow_direction_ds";
static char __pyx_k_outflow_weights_band[] = "outflow_weights_band";
static char __pyx_k_processed_cell_block[] = "processed_cell_block";
static char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static char __pyx_k_downstream_calculated[] = "downstream_calculated";
static char __pyx_k_flow_direction_nodata[] = "flow_direction_nodata";
static char __pyx_k_outflow_direction_uri[] = "outflow_direction_uri";
static char __pyx_k_outflow_weights_block[] = "outflow_weights_block";
static char __pyx_k_processed_cell_nodata[] = "processed_cell_nodata";
static char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static char __pyx_k_calculate_flow_weights[] = "calculate_flow_weights";
static char __pyx_k_draining_towards_lower[] = "draining towards lower";
static char __pyx_k_find_sinks_1f_complete[] = "find_sinks %.1f%% complete";
static char __pyx_k_flat_edges_1f_complete[] = "flat_edges %.1f%% complete";
static char __pyx_k_flow_angle_to_neighbor[] = "flow_angle_to_neighbor";
static char __pyx_k_flow_direction_dataset[] = "flow_direction_dataset";
static char __pyx_k_get_cell_size_from_uri[] = "get_cell_size_from_uri";
static char __pyx_k_in_absorption_rate_uri[] = "in_absorption_rate_uri";
static char __pyx_k_outflow_direction_band[] = "outflow_direction_band";
static char __pyx_k_outflow_weights_nodata[] = "outflow_weights_nodata";
static char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static char __pyx_k_label_flats_1f_complete[] = "label_flats %.1f%% complete";
static char __pyx_k_neighbor_outflow_weight[] = "neighbor_outflow_weight";
static char __pyx_k_outflow_direction_block[] = "outflow_direction_block";
static char __pyx_k_outflow_weights_dataset[] = "outflow_weights_dataset";
static char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static char __pyx_k_flow_direction_max_slope[] = "flow_direction_max_slope";
static char __pyx_k_getbuffer_obj_view_flags[] = "getbuffer(obj, view, flags)";
static char __pyx_k_neighbor_direction_index[] = "neighbor_direction_index";
static char __pyx_k_new_raster_from_base_uri[] = "new_raster_from_base_uri";
static char __pyx_k_outflow_direction_nodata[] = "outflow_direction_nodata";
static char __pyx_k_Dimension_d_is_not_direct[] = "Dimension %d is not direct";
static char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static char __pyx_k_assert_datasets_projected[] = "assert_datasets_projected";
static char __pyx_k_draining_away_from_higher[] = "draining away from higher";
static char __pyx_k_neighbor_col_block_offset[] = "neighbor_col_block_offset";
static char __pyx_k_neighbor_row_block_offset[] = "neighbor_row_block_offset";
static char __pyx_k_outflow_direction_dataset[] = "outflow_direction_dataset";
static char __pyx_k_Index_out_of_bounds_axis_d[] = "Index out of bounds (axis %d)";
static char __pyx_k_Not_all_flats_have_outlets[] = "Not all flats have outlets";
static char __pyx_k_calculate_raster_stats_uri[] = "calculate_raster_stats_uri";
static char __pyx_k_neighbor_outflow_direction[] = "neighbor_outflow_direction";
static char __pyx_k_Step_may_not_be_zero_axis_d[] = "Step may not be zero (axis %d)";
static char __pyx_k_calculating_percent_to_sink[] = "calculating percent to sink";
static char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_There_were_undrainable_flats[] = "There were undrainable flats";
static char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static char __pyx_k_flow_direction_inf_1f_complete[] = "flow_direction_inf %.1f%% complete";
static char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static char __pyx_k_toward_lower_work_queue_size_d[] = "toward_lower work queue size: %d";
static char __pyx_k_Nodata_value_not_set_defaulting[] = "Nodata value not set, defaulting to -9999.9";
static char __pyx_k_a_band_was_passed_in_that_has_a[] = "a band was passed in that has a different dimension thanthe memory block was specified as";
static char __pyx_k_asctime_s_name_18s_levelname_8s[] = "%(asctime)s %(name)-18s %(levelname)-8s     %(message)s";
static char __pyx_k_find_outlet_percent_complete_2f[] = "find outlet percent complete = %.2f, outlet_deque size = %d";
static char __pyx_k_lengths_of_band_list_block_list[] = "lengths of band_list, block_list, update_list should be equal. instead they are %s";
static char __pyx_k_no_flow_direction_found_for_s_s[] = "no flow direction found for %s %s";
static char __pyx_k_pygeoprocessing_routing_routing[] = "pygeoprocessing.routing.routing_core";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_All_dimensions_preceding_dimensi[] = "All dimensions preceding dimension %d must be indexed and not sliced";
static char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static char __pyx_k_C_Users_rich_Documents_pygeoproc[] = "C:\\Users\\rich\\Documents\\pygeoprocessing-local\\pygeoprocessing\\routing\\routing_core.pyx";
static char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static char __pyx_k_Cannot_transpose_memoryview_with[] = "Cannot transpose memoryview with indirect dimensions";
static char __pyx_k_Done_calculating_percent_to_sink[] = "Done calculating percent to sink elapsed time %ss";
static char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static char __pyx_k_a_band_in_BlockCache_is_not_memo[] = "a band in BlockCache is not memory blocked, this might make the runtime slow for other algorithms. %s";
static char __pyx_k_away_from_higher_work_queue_size[] = "away_from_higher, work queue size: %d complete";
static char __pyx_k_calculate_flow_weights_1f_comple[] = "calculate_flow_weights %.1f%% complete";
static char __pyx_k_calculate_transport_cells_to_pro[] = "calculate transport cells_to_process.size() = %d";
static char __pyx_k_couldn_t_remove_s_because_it_s_s[] = "couldn't remove %s because it's still open";
static char __pyx_k_flow_direction_inf_masked_flow_d[] = "flow_direction_inf_masked_flow_dirs";
static char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static char __pyx_k_visit_stack_on_stream_distance_s[] = "visit_stack on stream distance size: %d ";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_C_Users_rich_Documents_pygeoproc;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_DEBUG;
static PyObject *__pyx_n_s_Dataset;
static PyObject *__pyx_kp_s_Done_calculating_percent_to_sink;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_FlushCache;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_GA_ReadOnly;
static PyObject *__pyx_n_s_GA_Update;
static PyObject *__pyx_n_s_GDT_Byte;
static PyObject *__pyx_n_s_GDT_Float32;
static PyObject *__pyx_n_s_GDT_Int32;
static PyObject *__pyx_n_s_GTiff;
static PyObject *__pyx_n_s_GetBlockSize;
static PyObject *__pyx_n_s_GetDescription;
static PyObject *__pyx_n_s_GetNoDataValue;
static PyObject *__pyx_n_s_GetRasterBand;
static PyObject *__pyx_n_s_INF;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_LOGGER;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_kp_s_Nodata_value_not_set_defaulting;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_kp_s_Not_all_flats_have_outlets;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_n_s_OSError;
static PyObject *__pyx_n_s_Open;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_RasterXSize;
static PyObject *__pyx_n_s_RasterYSize;
static PyObject *__pyx_n_s_ReadAsArray;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_There_were_no_flats;
static PyObject *__pyx_kp_s_There_were_undrainable_flats;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_WriteArray;
static PyObject *__pyx_n_s_XSize;
static PyObject *__pyx_n_s_YSize;
static PyObject *__pyx_kp_s_a_band_in_BlockCache_is_not_memo;
static PyObject *__pyx_kp_s_a_band_was_passed_in_that_has_a;
static PyObject *__pyx_n_s_a_c;
static PyObject *__pyx_n_s_a_f;
static PyObject *__pyx_n_s_absorption_mode;
static PyObject *__pyx_n_s_absorption_rate_uri;
static PyObject *__pyx_n_s_align_dataset_list;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_angle_to_neighbor;
static PyObject *__pyx_n_s_aoi_uri;
static PyObject *__pyx_kp_s_asctime_s_name_18s_levelname_8s;
static PyObject *__pyx_n_s_assert_datasets_projected;
static PyObject *__pyx_kp_s_away_from_higher_work_queue_size;
static PyObject *__pyx_n_s_band_list;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_basicConfig;
static PyObject *__pyx_n_s_block_cache;
static PyObject *__pyx_n_s_block_col_size;
static PyObject *__pyx_n_s_block_list;
static PyObject *__pyx_n_s_block_row_size;
static PyObject *__pyx_n_s_buf_obj;
static PyObject *__pyx_n_s_byte;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_cache_dirty;
static PyObject *__pyx_n_s_calculate_flow_weights;
static PyObject *__pyx_kp_s_calculate_flow_weights_1f_comple;
static PyObject *__pyx_n_s_calculate_raster_stats_uri;
static PyObject *__pyx_kp_s_calculate_transport_cells_to_pro;
static PyObject *__pyx_kp_s_calculating_percent_to_sink;
static PyObject *__pyx_n_s_ceil;
static PyObject *__pyx_n_s_cell_size;
static PyObject *__pyx_n_s_cell_travel_distance;
static PyObject *__pyx_n_s_cells_in_queue;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cleanup_uri_list;
static PyObject *__pyx_n_s_col_block_offset;
static PyObject *__pyx_n_s_col_index;
static PyObject *__pyx_n_s_col_offset;
static PyObject *__pyx_n_s_col_offsets;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_kp_s_couldn_t_remove_s_because_it_s_s;
static PyObject *__pyx_n_s_cur_dem_value;
static PyObject *__pyx_n_s_current_distance;
static PyObject *__pyx_n_s_current_flow;
static PyObject *__pyx_n_s_current_index;
static PyObject *__pyx_n_s_current_label;
static PyObject *__pyx_n_s_current_stream;
static PyObject *__pyx_n_s_current_time;
static PyObject *__pyx_n_s_d_1;
static PyObject *__pyx_n_s_d_2;
static PyObject *__pyx_n_s_dataset;
static PyObject *__pyx_n_s_dataset_uri;
static PyObject *__pyx_n_s_datefmt;
static PyObject *__pyx_n_s_dem_array;
static PyObject *__pyx_n_s_dem_band;
static PyObject *__pyx_n_s_dem_block;
static PyObject *__pyx_n_s_dem_ds;
static PyObject *__pyx_n_s_dem_nodata;
static PyObject *__pyx_n_s_dem_out_array;
static PyObject *__pyx_n_s_dem_out_band;
static PyObject *__pyx_n_s_dem_out_ds;
static PyObject *__pyx_n_s_dem_out_uri;
static PyObject *__pyx_n_s_dem_uri;
static PyObject *__pyx_n_s_diagonal_offsets;
static PyObject *__pyx_n_s_dirname;
static PyObject *__pyx_n_s_distance_band;
static PyObject *__pyx_n_s_distance_block;
static PyObject *__pyx_n_s_distance_ds;
static PyObject *__pyx_n_s_distance_nodata;
static PyObject *__pyx_n_s_distance_to_stream;
static PyObject *__pyx_n_s_distance_uri;
static PyObject *__pyx_n_s_downstream_calculated;
static PyObject *__pyx_n_s_downstream_distance;
static PyObject *__pyx_n_s_downstream_index;
static PyObject *__pyx_n_s_drain_off_edge;
static PyObject *__pyx_kp_s_draining_away_from_higher;
static PyObject *__pyx_kp_s_draining_towards_lower;
static PyObject *__pyx_n_s_ds_uri;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_e_0;
static PyObject *__pyx_n_s_e_0_col;
static PyObject *__pyx_n_s_e_0_col_block_offset;
static PyObject *__pyx_n_s_e_0_col_index;
static PyObject *__pyx_n_s_e_0_offsets;
static PyObject *__pyx_n_s_e_0_row;
static PyObject *__pyx_n_s_e_0_row_block_offset;
static PyObject *__pyx_n_s_e_0_row_index;
static PyObject *__pyx_n_s_e_1;
static PyObject *__pyx_n_s_e_1_col;
static PyObject *__pyx_n_s_e_1_col_block_offset;
static PyObject *__pyx_n_s_e_1_col_index;
static PyObject *__pyx_n_s_e_1_label;
static PyObject *__pyx_n_s_e_1_offsets;
static PyObject *__pyx_n_s_e_1_row;
static PyObject *__pyx_n_s_e_1_row_block_offset;
static PyObject *__pyx_n_s_e_1_row_index;
static PyObject *__pyx_n_s_e_2;
static PyObject *__pyx_n_s_e_2_col;
static PyObject *__pyx_n_s_e_2_col_block_offset;
static PyObject *__pyx_n_s_e_2_col_index;
static PyObject *__pyx_n_s_e_2_label;
static PyObject *__pyx_n_s_e_2_offsets;
static PyObject *__pyx_n_s_e_2_row;
static PyObject *__pyx_n_s_e_2_row_block_offset;
static PyObject *__pyx_n_s_e_2_row_index;
static PyObject *__pyx_n_s_effect_band;
static PyObject *__pyx_n_s_effect_block;
static PyObject *__pyx_n_s_effect_dataset;
static PyObject *__pyx_n_s_effect_nodata;
static PyObject *__pyx_n_s_effect_uri;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_end_time;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_exception;
static PyObject *__pyx_n_s_export_rate_band;
static PyObject *__pyx_n_s_export_rate_block;
static PyObject *__pyx_n_s_export_rate_dataset;
static PyObject *__pyx_n_s_export_rate_nodata;
static PyObject *__pyx_n_s_export_rate_uri;
static PyObject *__pyx_n_s_facet_index;
static PyObject *__pyx_n_s_factor;
static PyObject *__pyx_n_s_factor_band;
static PyObject *__pyx_n_s_factor_block;
static PyObject *__pyx_n_s_factor_ds;
static PyObject *__pyx_n_s_factor_exists;
static PyObject *__pyx_n_s_factor_uri;
static PyObject *__pyx_n_s_fill_pits;
static PyObject *__pyx_n_s_fill_value;
static PyObject *__pyx_kp_s_find_outlet_percent_complete_2f;
static PyObject *__pyx_kp_s_find_sinks_1f_complete;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_kp_s_flat_edges_1f_complete;
static PyObject *__pyx_n_s_flat_index;
static PyObject *__pyx_n_s_flat_mask_band;
static PyObject *__pyx_n_s_flat_mask_block;
static PyObject *__pyx_n_s_flat_mask_ds;
static PyObject *__pyx_n_s_flat_mask_uri;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_flow_angle_to_neighbor;
static PyObject *__pyx_n_s_flow_band;
static PyObject *__pyx_n_s_flow_block;
static PyObject *__pyx_n_s_flow_direction;
static PyObject *__pyx_n_s_flow_direction_band;
static PyObject *__pyx_n_s_flow_direction_block;
static PyObject *__pyx_n_s_flow_direction_dataset;
static PyObject *__pyx_n_s_flow_direction_inf;
static PyObject *__pyx_kp_s_flow_direction_inf_1f_complete;
static PyObject *__pyx_n_s_flow_direction_inf_masked_flow_d;
static PyObject *__pyx_n_s_flow_direction_max_slope;
static PyObject *__pyx_n_s_flow_direction_nodata;
static PyObject *__pyx_n_s_flow_direction_uri;
static PyObject *__pyx_n_s_flow_nodata;
static PyObject *__pyx_n_s_flux_uri;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_found;
static PyObject *__pyx_n_s_gdal;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_get_cell_size_from_uri;
static PyObject *__pyx_n_s_get_nodata_from_uri;
static PyObject *__pyx_n_s_get_row_col_from_uri;
static PyObject *__pyx_n_s_global_block_col;
static PyObject *__pyx_n_s_global_block_row;
static PyObject *__pyx_n_s_global_col;
static PyObject *__pyx_n_s_global_row;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_high_edges;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_absorption_rate_uri;
static PyObject *__pyx_n_s_in_dem;
static PyObject *__pyx_n_s_in_flow_direction;
static PyObject *__pyx_n_s_in_source_uri;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_inf;
static PyObject *__pyx_n_s_inflow_offsets;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_int8;
static PyObject *__pyx_n_s_intersection;
static PyObject *__pyx_n_s_it_flows_here;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_label_band;
static PyObject *__pyx_n_s_label_block;
static PyObject *__pyx_n_s_label_dataset;
static PyObject *__pyx_kp_s_label_flats_1f_complete;
static PyObject *__pyx_n_s_label_nodata;
static PyObject *__pyx_kp_s_labeling_flats;
static PyObject *__pyx_n_s_labels_uri;
static PyObject *__pyx_n_s_last_time;
static PyObject *__pyx_kp_s_lengths_of_band_list_block_list;
static PyObject *__pyx_n_s_lnevel;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_loss_uri;
static PyObject *__pyx_n_s_low_edges;
static PyObject *__pyx_kp_s_m_d_Y_H_M_S;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_index;
static PyObject *__pyx_n_s_max_r;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_min_dem_value;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_n_block_cols;
static PyObject *__pyx_n_s_n_block_rows;
static PyObject *__pyx_n_s_n_cols;
static PyObject *__pyx_n_s_n_global_block_cols;
static PyObject *__pyx_n_s_n_global_block_rows;
static PyObject *__pyx_n_s_n_neighbors;
static PyObject *__pyx_n_s_n_rows;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_nearest;
static PyObject *__pyx_n_s_neighbor_col;
static PyObject *__pyx_n_s_neighbor_col_block_offset;
static PyObject *__pyx_n_s_neighbor_col_index;
static PyObject *__pyx_n_s_neighbor_dem_value;
static PyObject *__pyx_n_s_neighbor_direction_index;
static PyObject *__pyx_n_s_neighbor_distance;
static PyObject *__pyx_n_s_neighbor_flat_index;
static PyObject *__pyx_n_s_neighbor_index;
static PyObject *__pyx_n_s_neighbor_outflow_direction;
static PyObject *__pyx_n_s_neighbor_outflow_weight;
static PyObject *__pyx_n_s_neighbor_row;
static PyObject *__pyx_n_s_neighbor_row_block_offset;
static PyObject *__pyx_n_s_neighbor_row_index;
static PyObject *__pyx_n_s_new_raster_from_base;
static PyObject *__pyx_n_s_new_raster_from_base_uri;
static PyObject *__pyx_kp_s_no_flow_direction_found_for_s_s;
static PyObject *__pyx_n_s_nodata_flow;
static PyObject *__pyx_n_s_nodata_value;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_original_distance;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_osgeo;
static PyObject *__pyx_n_s_out_block;
static PyObject *__pyx_n_s_out_pixel_size;
static PyObject *__pyx_n_s_outflow_direction;
static PyObject *__pyx_n_s_outflow_direction_band;
static PyObject *__pyx_n_s_outflow_direction_block;
static PyObject *__pyx_n_s_outflow_direction_dataset;
static PyObject *__pyx_n_s_outflow_direction_ds;
static PyObject *__pyx_n_s_outflow_direction_nodata;
static PyObject *__pyx_n_s_outflow_direction_uri;
static PyObject *__pyx_n_s_outflow_weight;
static PyObject *__pyx_n_s_outflow_weights_band;
static PyObject *__pyx_n_s_outflow_weights_block;
static PyObject *__pyx_n_s_outflow_weights_dataset;
static PyObject *__pyx_n_s_outflow_weights_ds;
static PyObject *__pyx_n_s_outflow_weights_nodata;
static PyObject *__pyx_n_s_outflow_weights_uri;
static PyObject *__pyx_n_s_outlet_cell_deque;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_percent_to_sink;
static PyObject *__pyx_n_s_pi;
static PyObject *__pyx_n_s_pit_count;
static PyObject *__pyx_n_s_process_queue;
static PyObject *__pyx_n_s_processed_cell_band;
static PyObject *__pyx_n_s_processed_cell_block;
static PyObject *__pyx_n_s_processed_cell_ds;
static PyObject *__pyx_n_s_processed_cell_nodata;
static PyObject *__pyx_kp_s_processed_cell_tif;
static PyObject *__pyx_n_s_processed_cell_uri;
static PyObject *__pyx_n_s_pushed_current;
static PyObject *__pyx_n_s_pygeoprocessing;
static PyObject *__pyx_kp_s_pygeoprocessing_routing_routing;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_raw_nodata_value;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_resolve_flats;
static PyObject *__pyx_n_s_route_flux;
static PyObject *__pyx_n_s_row_block_offset;
static PyObject *__pyx_n_s_row_index;
static PyObject *__pyx_n_s_row_offset;
static PyObject *__pyx_n_s_row_offsets;
static PyObject *__pyx_n_s_s_1;
static PyObject *__pyx_n_s_s_2;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_sink_pixels_band;
static PyObject *__pyx_n_s_sink_pixels_block;
static PyObject *__pyx_n_s_sink_pixels_dataset;
static PyObject *__pyx_n_s_sink_pixels_nodata;
static PyObject *__pyx_n_s_sink_pixels_uri;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_slope;
static PyObject *__pyx_n_s_slope_max;
static PyObject *__pyx_n_s_source_and_flux;
static PyObject *__pyx_n_s_source_uri;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_start_time;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_step_size;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_stream_band;
static PyObject *__pyx_n_s_stream_block;
static PyObject *__pyx_n_s_stream_ds;
static PyObject *__pyx_n_s_stream_nodata;
static PyObject *__pyx_n_s_stream_uri;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_suffix;
static PyObject *__pyx_n_s_swig_destroy;
static PyObject *__pyx_n_s_temporary_filename;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_tif;
static PyObject *__pyx_kp_s_toward_lower_work_queue_size_d;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update_downstream;
static PyObject *__pyx_n_s_update_list;
static PyObject *__pyx_n_s_visit_stack;
static PyObject *__pyx_kp_s_visit_stack_on_stream_distance_s;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_win_xsize;
static PyObject *__pyx_n_s_win_ysize;
static PyObject *__pyx_n_s_xoff;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_yoff;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_float_4_0;
static PyObject *__pyx_float_8_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_slice_;
static PyObject *__pyx_slice__2;
static PyObject *__pyx_slice__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__11;
static PyObject *__pyx_slice__16;
static PyObject *__pyx_slice__22;
static PyObject *__pyx_slice__74;
static PyObject *__pyx_slice__75;
static PyObject *__pyx_slice__76;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;

/* "pygeoprocessing\routing\routing_core.pyx":53
 *     update_list = []
 * 
 *     def __cinit__(             # <<<<<<<<<<<<<<
 *             self, int n_block_rows, int n_block_cols, int n_rows, int n_cols,
 *             int block_row_size, int block_col_size, band_list, block_list,
 */

/* Python wrapper */
static int __pyx_pw_15pygeoprocessing_7routing_12routing_core_10BlockCache_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15pygeoprocessing_7routing_12routing_core_10BlockCache_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_n_block_rows;
  int __pyx_v_n_block_cols;
  int __pyx_v_n_rows;
  int __pyx_v_n_cols;
  int __pyx_v_block_row_size;
  int __pyx_v_block_col_size;
  PyObject *__pyx_v_band_list = 0;
  PyObject *__pyx_v_block_list = 0;
  PyObject *__pyx_v_update_list = 0;
  __Pyx_memviewslice __pyx_v_cache_dirty = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n_block_rows,&__pyx_n_s_n_block_cols,&__pyx_n_s_n_rows,&__pyx_n_s_n_cols,&__pyx_n_s_block_row_size,&__pyx_n_s_block_col_size,&__pyx_n_s_band_list,&__pyx_n_s_block_list,&__pyx_n_s_update_list,&__pyx_n_s_cache_dirty,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_block_rows)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_block_cols)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_rows)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_cols)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block_row_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block_col_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_band_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_update_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cache_dirty)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 9); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_n_block_rows = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_n_block_rows == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_n_block_cols = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n_block_cols == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_n_rows = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n_rows == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_n_cols = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n_cols == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_block_row_size = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_block_row_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_block_col_size = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_block_col_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_band_list = values[6];
    __pyx_v_block_list = values[7];
    __pyx_v_update_list = values[8];
    __pyx_v_cache_dirty = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int8_t(values[9]); if (unlikely(!__pyx_v_cache_dirty.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.BlockCache.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pygeoprocessing_7routing_12routing_core_10BlockCache___cinit__(((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_self), __pyx_v_n_block_rows, __pyx_v_n_block_cols, __pyx_v_n_rows, __pyx_v_n_cols, __pyx_v_block_row_size, __pyx_v_block_col_size, __pyx_v_band_list, __pyx_v_block_list, __pyx_v_update_list, __pyx_v_cache_dirty);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15pygeoprocessing_7routing_12routing_core_10BlockCache___cinit__(struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_self, int __pyx_v_n_block_rows, int __pyx_v_n_block_cols, int __pyx_v_n_rows, int __pyx_v_n_cols, int __pyx_v_block_row_size, int __pyx_v_block_col_size, PyObject *__pyx_v_band_list, PyObject *__pyx_v_block_list, PyObject *__pyx_v_update_list, __Pyx_memviewslice __pyx_v_cache_dirty) {
  PyObject *__pyx_v_list_lengths = NULL;
  PyObject *__pyx_v_raster_dimensions_list = NULL;
  PyObject *__pyx_v_raster_n_rows = NULL;
  PyObject *__pyx_v_raster_n_cols = NULL;
  PyObject *__pyx_v_band = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_b = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygeoprocessing\routing\routing_core.pyx":57
 *             int block_row_size, int block_col_size, band_list, block_list,
 *             update_list, numpy.int8_t[:,:] cache_dirty):
 *         self.n_block_rows = n_block_rows             # <<<<<<<<<<<<<<
 *         self.n_block_cols = n_block_cols
 *         self.block_col_size = block_col_size
 */
  __pyx_v_self->n_block_rows = __pyx_v_n_block_rows;

  /* "pygeoprocessing\routing\routing_core.pyx":58
 *             update_list, numpy.int8_t[:,:] cache_dirty):
 *         self.n_block_rows = n_block_rows
 *         self.n_block_cols = n_block_cols             # <<<<<<<<<<<<<<
 *         self.block_col_size = block_col_size
 *         self.block_row_size = block_row_size
 */
  __pyx_v_self->n_block_cols = __pyx_v_n_block_cols;

  /* "pygeoprocessing\routing\routing_core.pyx":59
 *         self.n_block_rows = n_block_rows
 *         self.n_block_cols = n_block_cols
 *         self.block_col_size = block_col_size             # <<<<<<<<<<<<<<
 *         self.block_row_size = block_row_size
 *         self.n_rows = n_rows
 */
  __pyx_v_self->block_col_size = __pyx_v_block_col_size;

  /* "pygeoprocessing\routing\routing_core.pyx":60
 *         self.n_block_cols = n_block_cols
 *         self.block_col_size = block_col_size
 *         self.block_row_size = block_row_size             # <<<<<<<<<<<<<<
 *         self.n_rows = n_rows
 *         self.n_cols = n_cols
 */
  __pyx_v_self->block_row_size = __pyx_v_block_row_size;

  /* "pygeoprocessing\routing\routing_core.pyx":61
 *         self.block_col_size = block_col_size
 *         self.block_row_size = block_row_size
 *         self.n_rows = n_rows             # <<<<<<<<<<<<<<
 *         self.n_cols = n_cols
 *         self.row_tag_cache = numpy.zeros((n_block_rows, n_block_cols), dtype=numpy.int32)
 */
  __pyx_v_self->n_rows = __pyx_v_n_rows;

  /* "pygeoprocessing\routing\routing_core.pyx":62
 *         self.block_row_size = block_row_size
 *         self.n_rows = n_rows
 *         self.n_cols = n_cols             # <<<<<<<<<<<<<<
 *         self.row_tag_cache = numpy.zeros((n_block_rows, n_block_cols), dtype=numpy.int32)
 *         self.col_tag_cache = numpy.zeros((n_block_rows, n_block_cols), dtype=numpy.int32)
 */
  __pyx_v_self->n_cols = __pyx_v_n_cols;

  /* "pygeoprocessing\routing\routing_core.pyx":63
 *         self.n_rows = n_rows
 *         self.n_cols = n_cols
 *         self.row_tag_cache = numpy.zeros((n_block_rows, n_block_cols), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *         self.col_tag_cache = numpy.zeros((n_block_rows, n_block_cols), dtype=numpy.int32)
 *         self.cache_dirty = cache_dirty
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n_block_rows); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n_block_cols); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int32_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->row_tag_cache, 0);
  __pyx_v_self->row_tag_cache = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "pygeoprocessing\routing\routing_core.pyx":64
 *         self.n_cols = n_cols
 *         self.row_tag_cache = numpy.zeros((n_block_rows, n_block_cols), dtype=numpy.int32)
 *         self.col_tag_cache = numpy.zeros((n_block_rows, n_block_cols), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *         self.cache_dirty = cache_dirty
 *         self.row_tag_cache[:] = -1
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_n_block_rows); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n_block_cols); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_5 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int32_t(__pyx_t_1);
  if (unlikely(!__pyx_t_6.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->col_tag_cache, 0);
  __pyx_v_self->col_tag_cache = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "pygeoprocessing\routing\routing_core.pyx":65
 *         self.row_tag_cache = numpy.zeros((n_block_rows, n_block_cols), dtype=numpy.int32)
 *         self.col_tag_cache = numpy.zeros((n_block_rows, n_block_cols), dtype=numpy.int32)
 *         self.cache_dirty = cache_dirty             # <<<<<<<<<<<<<<
 *         self.row_tag_cache[:] = -1
 *         self.col_tag_cache[:] = -1
 */
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->cache_dirty, 0);
  __PYX_INC_MEMVIEW(&__pyx_v_cache_dirty, 0);
  __pyx_v_self->cache_dirty = __pyx_v_cache_dirty;

  /* "pygeoprocessing\routing\routing_core.pyx":66
 *         self.col_tag_cache = numpy.zeros((n_block_rows, n_block_cols), dtype=numpy.int32)
 *         self.cache_dirty = cache_dirty
 *         self.row_tag_cache[:] = -1             # <<<<<<<<<<<<<<
 *         self.col_tag_cache[:] = -1
 *         self.band_list[:] = band_list
 */
  if (unlikely(!__pyx_v_self->row_tag_cache.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");{__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_6 = __pyx_v_self->row_tag_cache;
  __PYX_INC_MEMVIEW(&__pyx_t_6, 1);
  __pyx_t_7.data = __pyx_t_6.data;
  __pyx_t_7.memview = __pyx_t_6.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_7, 0);
  __pyx_t_7.shape[0] = __pyx_t_6.shape[0];
__pyx_t_7.strides[0] = __pyx_t_6.strides[0];
    __pyx_t_7.suboffsets[0] = -1;

__pyx_t_7.shape[1] = __pyx_t_6.shape[1];
__pyx_t_7.strides[1] = __pyx_t_6.strides[1];
    __pyx_t_7.suboffsets[1] = -1;

__PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  {
      __pyx_t_5numpy_int32_t __pyx_temp_scalar = -1;
      {
          Py_ssize_t __pyx_temp_extent_0 = __pyx_t_7.shape[0];
          Py_ssize_t __pyx_temp_stride_0 = __pyx_t_7.strides[0];
          char *__pyx_temp_pointer_0;
          Py_ssize_t __pyx_temp_idx_0;
          Py_ssize_t __pyx_temp_extent_1 = __pyx_t_7.shape[1];
          Py_ssize_t __pyx_temp_stride_1 = __pyx_t_7.strides[1];
          char *__pyx_temp_pointer_1;
          Py_ssize_t __pyx_temp_idx_1;
          __pyx_temp_pointer_0 = __pyx_t_7.data;
          for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
            __pyx_temp_pointer_1 = __pyx_temp_pointer_0;
            for (__pyx_temp_idx_1 = 0; __pyx_temp_idx_1 < __pyx_temp_extent_1; __pyx_temp_idx_1++) {
              *((__pyx_t_5numpy_int32_t *) __pyx_temp_pointer_1) = __pyx_temp_scalar;
              __pyx_temp_pointer_1 += __pyx_temp_stride_1;
            }
            __pyx_temp_pointer_0 += __pyx_temp_stride_0;
          }
      }
  }
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);

  /* "pygeoprocessing\routing\routing_core.pyx":67
 *         self.cache_dirty = cache_dirty
 *         self.row_tag_cache[:] = -1
 *         self.col_tag_cache[:] = -1             # <<<<<<<<<<<<<<
 *         self.band_list[:] = band_list
 *         self.block_list[:] = block_list
 */
  if (unlikely(!__pyx_v_self->col_tag_cache.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");{__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_6 = __pyx_v_self->col_tag_cache;
  __PYX_INC_MEMVIEW(&__pyx_t_6, 1);
  __pyx_t_8.data = __pyx_t_6.data;
  __pyx_t_8.memview = __pyx_t_6.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_8, 0);
  __pyx_t_8.shape[0] = __pyx_t_6.shape[0];
__pyx_t_8.strides[0] = __pyx_t_6.strides[0];
    __pyx_t_8.suboffsets[0] = -1;

__pyx_t_8.shape[1] = __pyx_t_6.shape[1];
__pyx_t_8.strides[1] = __pyx_t_6.strides[1];
    __pyx_t_8.suboffsets[1] = -1;

__PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  {
      __pyx_t_5numpy_int32_t __pyx_temp_scalar = -1;
      {
          Py_ssize_t __pyx_temp_extent_0 = __pyx_t_8.shape[0];
          Py_ssize_t __pyx_temp_stride_0 = __pyx_t_8.strides[0];
          char *__pyx_temp_pointer_0;
          Py_ssize_t __pyx_temp_idx_0;
          Py_ssize_t __pyx_temp_extent_1 = __pyx_t_8.shape[1];
          Py_ssize_t __pyx_temp_stride_1 = __pyx_t_8.strides[1];
          char *__pyx_temp_pointer_1;
          Py_ssize_t __pyx_temp_idx_1;
          __pyx_temp_pointer_0 = __pyx_t_8.data;
          for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
            __pyx_temp_pointer_1 = __pyx_temp_pointer_0;
            for (__pyx_temp_idx_1 = 0; __pyx_temp_idx_1 < __pyx_temp_extent_1; __pyx_temp_idx_1++) {
              *((__pyx_t_5numpy_int32_t *) __pyx_temp_pointer_1) = __pyx_temp_scalar;
              __pyx_temp_pointer_1 += __pyx_temp_stride_1;
            }
            __pyx_temp_pointer_0 += __pyx_temp_stride_0;
          }
      }
  }
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);

  /* "pygeoprocessing\routing\routing_core.pyx":68
 *         self.row_tag_cache[:] = -1
 *         self.col_tag_cache[:] = -1
 *         self.band_list[:] = band_list             # <<<<<<<<<<<<<<
 *         self.block_list[:] = block_list
 *         self.update_list[:] = update_list
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_band_list); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetSlice(__pyx_t_1, __pyx_v_band_list, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":69
 *         self.col_tag_cache[:] = -1
 *         self.band_list[:] = band_list
 *         self.block_list[:] = block_list             # <<<<<<<<<<<<<<
 *         self.update_list[:] = update_list
 *         list_lengths = [len(x) for x in [band_list, block_list, update_list]]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_block_list); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetSlice(__pyx_t_1, __pyx_v_block_list, 0, 0, NULL, NULL, &__pyx_slice__2, 0, 0, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":70
 *         self.band_list[:] = band_list
 *         self.block_list[:] = block_list
 *         self.update_list[:] = update_list             # <<<<<<<<<<<<<<
 *         list_lengths = [len(x) for x in [band_list, block_list, update_list]]
 *         if len(set(list_lengths)) > 1:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_list); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetSlice(__pyx_t_1, __pyx_v_update_list, 0, 0, NULL, NULL, &__pyx_slice__3, 0, 0, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":71
 *         self.block_list[:] = block_list
 *         self.update_list[:] = update_list
 *         list_lengths = [len(x) for x in [band_list, block_list, update_list]]             # <<<<<<<<<<<<<<
 *         if len(set(list_lengths)) > 1:
 *             raise ValueError(
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_band_list);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_band_list);
  __Pyx_GIVEREF(__pyx_v_band_list);
  __Pyx_INCREF(__pyx_v_block_list);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_block_list);
  __Pyx_GIVEREF(__pyx_v_block_list);
  __Pyx_INCREF(__pyx_v_update_list);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_update_list);
  __Pyx_GIVEREF(__pyx_v_update_list);
  __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_9 >= 3) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_10 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_list_lengths = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":72
 *         self.update_list[:] = update_list
 *         list_lengths = [len(x) for x in [band_list, block_list, update_list]]
 *         if len(set(list_lengths)) > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "lengths of band_list, block_list, update_list should be equal."
 */
  __pyx_t_1 = PySet_New(__pyx_v_list_lengths); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PySet_Size(__pyx_t_1); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_11 = ((__pyx_t_9 > 1) != 0);
  if (__pyx_t_11) {

    /* "pygeoprocessing\routing\routing_core.pyx":73
 *         list_lengths = [len(x) for x in [band_list, block_list, update_list]]
 *         if len(set(list_lengths)) > 1:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "lengths of band_list, block_list, update_list should be equal."
 *                 " instead they are %s", list_lengths)
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_kp_s_lengths_of_band_list_block_list);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_lengths_of_band_list_block_list);
    __Pyx_GIVEREF(__pyx_kp_s_lengths_of_band_list_block_list);
    __Pyx_INCREF(__pyx_v_list_lengths);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_list_lengths);
    __Pyx_GIVEREF(__pyx_v_list_lengths);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pygeoprocessing\routing\routing_core.pyx":76
 *                 "lengths of band_list, block_list, update_list should be equal."
 *                 " instead they are %s", list_lengths)
 *         raster_dimensions_list = [(b.YSize, b.XSize) for b in band_list]             # <<<<<<<<<<<<<<
 *         for raster_n_rows, raster_n_cols in raster_dimensions_list:
 *             if raster_n_rows != n_rows or raster_n_cols != n_cols:
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_v_band_list)) || PyTuple_CheckExact(__pyx_v_band_list)) {
    __pyx_t_1 = __pyx_v_band_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_band_list); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_12)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_12(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_b, __pyx_n_s_YSize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_b, __pyx_n_s_XSize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_raster_dimensions_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":77
 *                 " instead they are %s", list_lengths)
 *         raster_dimensions_list = [(b.YSize, b.XSize) for b in band_list]
 *         for raster_n_rows, raster_n_cols in raster_dimensions_list:             # <<<<<<<<<<<<<<
 *             if raster_n_rows != n_rows or raster_n_cols != n_cols:
 *                 raise ValueError(
 */
  __pyx_t_3 = __pyx_v_raster_dimensions_list; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
  for (;;) {
    if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_13(__pyx_t_2); if (unlikely(!__pyx_t_5)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_4 = __pyx_t_13(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_2), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L11_unpacking_done;
      __pyx_L10_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L11_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_raster_n_rows, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_raster_n_cols, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":78
 *         raster_dimensions_list = [(b.YSize, b.XSize) for b in band_list]
 *         for raster_n_rows, raster_n_cols in raster_dimensions_list:
 *             if raster_n_rows != n_rows or raster_n_cols != n_cols:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "a band was passed in that has a different dimension than"
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n_rows); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_raster_n_rows, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_14 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!__pyx_t_14) {
    } else {
      __pyx_t_11 = __pyx_t_14;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_raster_n_cols, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_14 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = __pyx_t_14;
    __pyx_L13_bool_binop_done:;
    if (__pyx_t_11) {

      /* "pygeoprocessing\routing\routing_core.pyx":79
 *         for raster_n_rows, raster_n_cols in raster_dimensions_list:
 *             if raster_n_rows != n_rows or raster_n_cols != n_cols:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "a band was passed in that has a different dimension than"
 *                     "the memory block was specified as")
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "pygeoprocessing\routing\routing_core.pyx":77
 *                 " instead they are %s", list_lengths)
 *         raster_dimensions_list = [(b.YSize, b.XSize) for b in band_list]
 *         for raster_n_rows, raster_n_cols in raster_dimensions_list:             # <<<<<<<<<<<<<<
 *             if raster_n_rows != n_rows or raster_n_cols != n_cols:
 *                 raise ValueError(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":83
 *                     "the memory block was specified as")
 * 
 *         for band in band_list:             # <<<<<<<<<<<<<<
 *             block_col_size, block_row_size = band.GetBlockSize()
 *             if block_col_size == 1 or block_row_size == 1:
 */
  if (likely(PyList_CheckExact(__pyx_v_band_list)) || PyTuple_CheckExact(__pyx_v_band_list)) {
    __pyx_t_3 = __pyx_v_band_list; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_band_list); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_12)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_12(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_band, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":84
 * 
 *         for band in band_list:
 *             block_col_size, block_row_size = band.GetBlockSize()             # <<<<<<<<<<<<<<
 *             if block_col_size == 1 or block_row_size == 1:
 *                 LOGGER.warn(
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_13(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L17_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_5 = __pyx_t_13(__pyx_t_2); if (unlikely(!__pyx_t_5)) goto __pyx_L17_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_2), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L18_unpacking_done;
      __pyx_L17_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L18_unpacking_done:;
    }
    __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_block_col_size = __pyx_t_15;
    __pyx_v_block_row_size = __pyx_t_16;

    /* "pygeoprocessing\routing\routing_core.pyx":85
 *         for band in band_list:
 *             block_col_size, block_row_size = band.GetBlockSize()
 *             if block_col_size == 1 or block_row_size == 1:             # <<<<<<<<<<<<<<
 *                 LOGGER.warn(
 *                     'a band in BlockCache is not memory blocked, this might '
 */
    __pyx_t_14 = ((__pyx_v_block_col_size == 1) != 0);
    if (!__pyx_t_14) {
    } else {
      __pyx_t_11 = __pyx_t_14;
      goto __pyx_L20_bool_binop_done;
    }
    __pyx_t_14 = ((__pyx_v_block_row_size == 1) != 0);
    __pyx_t_11 = __pyx_t_14;
    __pyx_L20_bool_binop_done:;
    if (__pyx_t_11) {

      /* "pygeoprocessing\routing\routing_core.pyx":86
 *             block_col_size, block_row_size = band.GetBlockSize()
 *             if block_col_size == 1 or block_row_size == 1:
 *                 LOGGER.warn(             # <<<<<<<<<<<<<<
 *                     'a band in BlockCache is not memory blocked, this might '
 *                     'make the runtime slow for other algorithms. %s',
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":89
 *                     'a band in BlockCache is not memory blocked, this might '
 *                     'make the runtime slow for other algorithms. %s',
 *                     band.GetDescription())             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_band, __pyx_n_s_GetDescription); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_17 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (__pyx_t_17) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_17); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      } else {
        __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_10 = 1;
        }
      }
      __pyx_t_17 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_17);
      if (__pyx_t_2) {
        PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_a_band_in_BlockCache_is_not_memo);
      PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_10, __pyx_kp_s_a_band_in_BlockCache_is_not_memo);
      __Pyx_GIVEREF(__pyx_kp_s_a_band_in_BlockCache_is_not_memo);
      PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_10, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L19;
    }
    __pyx_L19:;

    /* "pygeoprocessing\routing\routing_core.pyx":83
 *                     "the memory block was specified as")
 * 
 *         for band in band_list:             # <<<<<<<<<<<<<<
 *             block_col_size, block_row_size = band.GetBlockSize()
 *             if block_col_size == 1 or block_row_size == 1:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":53
 *     update_list = []
 * 
 *     def __cinit__(             # <<<<<<<<<<<<<<
 *             self, int n_block_rows, int n_block_cols, int n_rows, int n_cols,
 *             int block_row_size, int block_col_size, band_list, block_list,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.BlockCache.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_list_lengths);
  __Pyx_XDECREF(__pyx_v_raster_dimensions_list);
  __Pyx_XDECREF(__pyx_v_raster_n_rows);
  __Pyx_XDECREF(__pyx_v_raster_n_cols);
  __Pyx_XDECREF(__pyx_v_band);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_b);
  __PYX_XDEC_MEMVIEW(&__pyx_v_cache_dirty, 1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":96
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
 *     cdef void update_cache(self, int global_row, int global_col, int *row_index, int *col_index, int *row_block_offset, int *col_block_offset):             # <<<<<<<<<<<<<<
 *         cdef int cache_row_size, cache_col_size
 *         cdef int global_row_offset, global_col_offset
 */

static void __pyx_f_15pygeoprocessing_7routing_12routing_core_10BlockCache_update_cache(struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_self, int __pyx_v_global_row, int __pyx_v_global_col, int *__pyx_v_row_index, int *__pyx_v_col_index, int *__pyx_v_row_block_offset, int *__pyx_v_col_block_offset) {
  int __pyx_v_cache_row_size;
  int __pyx_v_cache_col_size;
  int __pyx_v_global_row_offset;
  int __pyx_v_global_col_offset;
  int __pyx_v_row_tag;
  int __pyx_v_col_tag;
  int __pyx_v_current_row_tag;
  int __pyx_v_current_col_tag;
  PyObject *__pyx_v_band = NULL;
  PyObject *__pyx_v_block = NULL;
  PyObject *__pyx_v_update = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *(*__pyx_t_18)(PyObject *);
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  int __pyx_t_25;
  PyObject *__pyx_t_26 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_cache", 0);

  /* "pygeoprocessing\routing\routing_core.pyx":101
 *         cdef int row_tag, col_tag
 * 
 *         row_block_offset[0] = global_row % self.block_row_size             # <<<<<<<<<<<<<<
 *         row_index[0] = (global_row // self.block_row_size) % self.n_block_rows
 *         row_tag = (global_row // self.block_row_size) // self.n_block_rows
 */
  (__pyx_v_row_block_offset[0]) = (__pyx_v_global_row % __pyx_v_self->block_row_size);

  /* "pygeoprocessing\routing\routing_core.pyx":102
 * 
 *         row_block_offset[0] = global_row % self.block_row_size
 *         row_index[0] = (global_row // self.block_row_size) % self.n_block_rows             # <<<<<<<<<<<<<<
 *         row_tag = (global_row // self.block_row_size) // self.n_block_rows
 * 
 */
  (__pyx_v_row_index[0]) = ((__pyx_v_global_row / __pyx_v_self->block_row_size) % __pyx_v_self->n_block_rows);

  /* "pygeoprocessing\routing\routing_core.pyx":103
 *         row_block_offset[0] = global_row % self.block_row_size
 *         row_index[0] = (global_row // self.block_row_size) % self.n_block_rows
 *         row_tag = (global_row // self.block_row_size) // self.n_block_rows             # <<<<<<<<<<<<<<
 * 
 *         col_block_offset[0] = global_col % self.block_col_size
 */
  __pyx_v_row_tag = ((__pyx_v_global_row / __pyx_v_self->block_row_size) / __pyx_v_self->n_block_rows);

  /* "pygeoprocessing\routing\routing_core.pyx":105
 *         row_tag = (global_row // self.block_row_size) // self.n_block_rows
 * 
 *         col_block_offset[0] = global_col % self.block_col_size             # <<<<<<<<<<<<<<
 *         col_index[0] = (global_col // self.block_col_size) % self.n_block_cols
 *         col_tag = (global_col // self.block_col_size) // self.n_block_cols
 */
  (__pyx_v_col_block_offset[0]) = (__pyx_v_global_col % __pyx_v_self->block_col_size);

  /* "pygeoprocessing\routing\routing_core.pyx":106
 * 
 *         col_block_offset[0] = global_col % self.block_col_size
 *         col_index[0] = (global_col // self.block_col_size) % self.n_block_cols             # <<<<<<<<<<<<<<
 *         col_tag = (global_col // self.block_col_size) // self.n_block_cols
 * 
 */
  (__pyx_v_col_index[0]) = ((__pyx_v_global_col / __pyx_v_self->block_col_size) % __pyx_v_self->n_block_cols);

  /* "pygeoprocessing\routing\routing_core.pyx":107
 *         col_block_offset[0] = global_col % self.block_col_size
 *         col_index[0] = (global_col // self.block_col_size) % self.n_block_cols
 *         col_tag = (global_col // self.block_col_size) // self.n_block_cols             # <<<<<<<<<<<<<<
 * 
 *         cdef int current_row_tag = self.row_tag_cache[row_index[0], col_index[0]]
 */
  __pyx_v_col_tag = ((__pyx_v_global_col / __pyx_v_self->block_col_size) / __pyx_v_self->n_block_cols);

  /* "pygeoprocessing\routing\routing_core.pyx":109
 *         col_tag = (global_col // self.block_col_size) // self.n_block_cols
 * 
 *         cdef int current_row_tag = self.row_tag_cache[row_index[0], col_index[0]]             # <<<<<<<<<<<<<<
 *         cdef int current_col_tag = self.col_tag_cache[row_index[0], col_index[0]]
 * 
 */
  if (unlikely(!__pyx_v_self->row_tag_cache.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");{__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_1 = (__pyx_v_row_index[0]);
  __pyx_t_2 = (__pyx_v_col_index[0]);
  __pyx_v_current_row_tag = (*((__pyx_t_5numpy_int32_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->row_tag_cache.data + __pyx_t_1 * __pyx_v_self->row_tag_cache.strides[0]) ) + __pyx_t_2 * __pyx_v_self->row_tag_cache.strides[1]) )));

  /* "pygeoprocessing\routing\routing_core.pyx":110
 * 
 *         cdef int current_row_tag = self.row_tag_cache[row_index[0], col_index[0]]
 *         cdef int current_col_tag = self.col_tag_cache[row_index[0], col_index[0]]             # <<<<<<<<<<<<<<
 * 
 *         if current_row_tag != row_tag or current_col_tag != col_tag:
 */
  if (unlikely(!__pyx_v_self->col_tag_cache.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");{__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_3 = (__pyx_v_row_index[0]);
  __pyx_t_4 = (__pyx_v_col_index[0]);
  __pyx_v_current_col_tag = (*((__pyx_t_5numpy_int32_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->col_tag_cache.data + __pyx_t_3 * __pyx_v_self->col_tag_cache.strides[0]) ) + __pyx_t_4 * __pyx_v_self->col_tag_cache.strides[1]) )));

  /* "pygeoprocessing\routing\routing_core.pyx":112
 *         cdef int current_col_tag = self.col_tag_cache[row_index[0], col_index[0]]
 * 
 *         if current_row_tag != row_tag or current_col_tag != col_tag:             # <<<<<<<<<<<<<<
 *             if self.cache_dirty[row_index[0], col_index[0]]:
 *                 global_col_offset = (current_col_tag * self.n_block_cols + col_index[0]) * self.block_col_size
 */
  __pyx_t_6 = ((__pyx_v_current_row_tag != __pyx_v_row_tag) != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = ((__pyx_v_current_col_tag != __pyx_v_col_tag) != 0);
  __pyx_t_5 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "pygeoprocessing\routing\routing_core.pyx":113
 * 
 *         if current_row_tag != row_tag or current_col_tag != col_tag:
 *             if self.cache_dirty[row_index[0], col_index[0]]:             # <<<<<<<<<<<<<<
 *                 global_col_offset = (current_col_tag * self.n_block_cols + col_index[0]) * self.block_col_size
 *                 cache_col_size = self.n_cols - global_col_offset
 */
    if (unlikely(!__pyx_v_self->cache_dirty.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");{__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_t_7 = (__pyx_v_row_index[0]);
    __pyx_t_8 = (__pyx_v_col_index[0]);
    __pyx_t_5 = ((*((__pyx_t_5numpy_int8_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->cache_dirty.data + __pyx_t_7 * __pyx_v_self->cache_dirty.strides[0]) ) + __pyx_t_8 * __pyx_v_self->cache_dirty.strides[1]) ))) != 0);
    if (__pyx_t_5) {

      /* "pygeoprocessing\routing\routing_core.pyx":114
 *         if current_row_tag != row_tag or current_col_tag != col_tag:
 *             if self.cache_dirty[row_index[0], col_index[0]]:
 *                 global_col_offset = (current_col_tag * self.n_block_cols + col_index[0]) * self.block_col_size             # <<<<<<<<<<<<<<
 *                 cache_col_size = self.n_cols - global_col_offset
 *                 if cache_col_size > self.block_col_size:
 */
      __pyx_v_global_col_offset = (((__pyx_v_current_col_tag * __pyx_v_self->n_block_cols) + (__pyx_v_col_index[0])) * __pyx_v_self->block_col_size);

      /* "pygeoprocessing\routing\routing_core.pyx":115
 *             if self.cache_dirty[row_index[0], col_index[0]]:
 *                 global_col_offset = (current_col_tag * self.n_block_cols + col_index[0]) * self.block_col_size
 *                 cache_col_size = self.n_cols - global_col_offset             # <<<<<<<<<<<<<<
 *                 if cache_col_size > self.block_col_size:
 *                     cache_col_size = self.block_col_size
 */
      __pyx_v_cache_col_size = (__pyx_v_self->n_cols - __pyx_v_global_col_offset);

      /* "pygeoprocessing\routing\routing_core.pyx":116
 *                 global_col_offset = (current_col_tag * self.n_block_cols + col_index[0]) * self.block_col_size
 *                 cache_col_size = self.n_cols - global_col_offset
 *                 if cache_col_size > self.block_col_size:             # <<<<<<<<<<<<<<
 *                     cache_col_size = self.block_col_size
 * 
 */
      __pyx_t_5 = ((__pyx_v_cache_col_size > __pyx_v_self->block_col_size) != 0);
      if (__pyx_t_5) {

        /* "pygeoprocessing\routing\routing_core.pyx":117
 *                 cache_col_size = self.n_cols - global_col_offset
 *                 if cache_col_size > self.block_col_size:
 *                     cache_col_size = self.block_col_size             # <<<<<<<<<<<<<<
 * 
 *                 global_row_offset = (current_row_tag * self.n_block_rows + row_index[0]) * self.block_row_size
 */
        __pyx_t_9 = __pyx_v_self->block_col_size;
        __pyx_v_cache_col_size = __pyx_t_9;
        goto __pyx_L7;
      }
      __pyx_L7:;

      /* "pygeoprocessing\routing\routing_core.pyx":119
 *                     cache_col_size = self.block_col_size
 * 
 *                 global_row_offset = (current_row_tag * self.n_block_rows + row_index[0]) * self.block_row_size             # <<<<<<<<<<<<<<
 *                 cache_row_size = self.n_rows - global_row_offset
 *                 if cache_row_size > self.block_row_size:
 */
      __pyx_v_global_row_offset = (((__pyx_v_current_row_tag * __pyx_v_self->n_block_rows) + (__pyx_v_row_index[0])) * __pyx_v_self->block_row_size);

      /* "pygeoprocessing\routing\routing_core.pyx":120
 * 
 *                 global_row_offset = (current_row_tag * self.n_block_rows + row_index[0]) * self.block_row_size
 *                 cache_row_size = self.n_rows - global_row_offset             # <<<<<<<<<<<<<<
 *                 if cache_row_size > self.block_row_size:
 *                     cache_row_size = self.block_row_size
 */
      __pyx_v_cache_row_size = (__pyx_v_self->n_rows - __pyx_v_global_row_offset);

      /* "pygeoprocessing\routing\routing_core.pyx":121
 *                 global_row_offset = (current_row_tag * self.n_block_rows + row_index[0]) * self.block_row_size
 *                 cache_row_size = self.n_rows - global_row_offset
 *                 if cache_row_size > self.block_row_size:             # <<<<<<<<<<<<<<
 *                     cache_row_size = self.block_row_size
 * 
 */
      __pyx_t_5 = ((__pyx_v_cache_row_size > __pyx_v_self->block_row_size) != 0);
      if (__pyx_t_5) {

        /* "pygeoprocessing\routing\routing_core.pyx":122
 *                 cache_row_size = self.n_rows - global_row_offset
 *                 if cache_row_size > self.block_row_size:
 *                     cache_row_size = self.block_row_size             # <<<<<<<<<<<<<<
 * 
 *                 for band, block, update in zip(self.band_list, self.block_list, self.update_list):
 */
        __pyx_t_9 = __pyx_v_self->block_row_size;
        __pyx_v_cache_row_size = __pyx_t_9;
        goto __pyx_L8;
      }
      __pyx_L8:;

      /* "pygeoprocessing\routing\routing_core.pyx":124
 *                     cache_row_size = self.block_row_size
 * 
 *                 for band, block, update in zip(self.band_list, self.block_list, self.update_list):             # <<<<<<<<<<<<<<
 *                     if update:
 *                         band.WriteArray(block[row_index[0], col_index[0], 0:cache_row_size, 0:cache_col_size],
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_band_list); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_block_list); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_list); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_12);
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_13, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (likely(PyList_CheckExact(__pyx_t_12)) || PyTuple_CheckExact(__pyx_t_12)) {
        __pyx_t_13 = __pyx_t_12; __Pyx_INCREF(__pyx_t_13); __pyx_t_14 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_15 = Py_TYPE(__pyx_t_13)->tp_iternext; if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      for (;;) {
        if (likely(!__pyx_t_15)) {
          if (likely(PyList_CheckExact(__pyx_t_13))) {
            if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_13)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_12 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_12); __pyx_t_14++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_12 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else {
            if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_13)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_12); __pyx_t_14++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_12 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          }
        } else {
          __pyx_t_12 = __pyx_t_15(__pyx_t_13);
          if (unlikely(!__pyx_t_12)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_12);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_12))) || (PyList_CheckExact(__pyx_t_12))) {
          PyObject* sequence = __pyx_t_12;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_16 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_16 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_16);
          #else
          __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_16 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_16);
          #endif
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_17 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_18 = Py_TYPE(__pyx_t_17)->tp_iternext;
          index = 0; __pyx_t_11 = __pyx_t_18(__pyx_t_17); if (unlikely(!__pyx_t_11)) goto __pyx_L11_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_11);
          index = 1; __pyx_t_10 = __pyx_t_18(__pyx_t_17); if (unlikely(!__pyx_t_10)) goto __pyx_L11_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_10);
          index = 2; __pyx_t_16 = __pyx_t_18(__pyx_t_17); if (unlikely(!__pyx_t_16)) goto __pyx_L11_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_16);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_17), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_t_18 = NULL;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          goto __pyx_L12_unpacking_done;
          __pyx_L11_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_18 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_L12_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_band, __pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_block, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_update, __pyx_t_16);
        __pyx_t_16 = 0;

        /* "pygeoprocessing\routing\routing_core.pyx":125
 * 
 *                 for band, block, update in zip(self.band_list, self.block_list, self.update_list):
 *                     if update:             # <<<<<<<<<<<<<<
 *                         band.WriteArray(block[row_index[0], col_index[0], 0:cache_row_size, 0:cache_col_size],
 *                             yoff=global_row_offset, xoff=global_col_offset)
 */
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_update); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        if (__pyx_t_5) {

          /* "pygeoprocessing\routing\routing_core.pyx":126
 *                 for band, block, update in zip(self.band_list, self.block_list, self.update_list):
 *                     if update:
 *                         band.WriteArray(block[row_index[0], col_index[0], 0:cache_row_size, 0:cache_col_size],             # <<<<<<<<<<<<<<
 *                             yoff=global_row_offset, xoff=global_col_offset)
 *                 self.cache_dirty[row_index[0], col_index[0]] = 0
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_band, __pyx_n_s_WriteArray); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_16 = __Pyx_PyInt_From_int((__pyx_v_row_index[0])); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_10 = __Pyx_PyInt_From_int((__pyx_v_col_index[0])); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_cache_row_size); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_17 = PySlice_New(__pyx_int_0, __pyx_t_11, Py_None); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_cache_col_size); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_19 = PySlice_New(__pyx_int_0, __pyx_t_11, Py_None); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_19);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = PyTuple_New(4); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_11);
          PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_16);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_17);
          PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_19);
          __Pyx_GIVEREF(__pyx_t_19);
          __pyx_t_16 = 0;
          __pyx_t_10 = 0;
          __pyx_t_17 = 0;
          __pyx_t_19 = 0;
          __pyx_t_19 = PyObject_GetItem(__pyx_v_block, __pyx_t_11); if (unlikely(__pyx_t_19 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
          __Pyx_GOTREF(__pyx_t_19);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_11);
          PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_19);
          __Pyx_GIVEREF(__pyx_t_19);
          __pyx_t_19 = 0;
          __pyx_t_19 = PyDict_New(); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_19);

          /* "pygeoprocessing\routing\routing_core.pyx":127
 *                     if update:
 *                         band.WriteArray(block[row_index[0], col_index[0], 0:cache_row_size, 0:cache_col_size],
 *                             yoff=global_row_offset, xoff=global_col_offset)             # <<<<<<<<<<<<<<
 *                 self.cache_dirty[row_index[0], col_index[0]] = 0
 *             self.row_tag_cache[row_index[0], col_index[0]] = row_tag
 */
          __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_global_row_offset); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_17);
          if (PyDict_SetItem(__pyx_t_19, __pyx_n_s_yoff, __pyx_t_17) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_global_col_offset); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_17);
          if (PyDict_SetItem(__pyx_t_19, __pyx_n_s_xoff, __pyx_t_17) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

          /* "pygeoprocessing\routing\routing_core.pyx":126
 *                 for band, block, update in zip(self.band_list, self.block_list, self.update_list):
 *                     if update:
 *                         band.WriteArray(block[row_index[0], col_index[0], 0:cache_row_size, 0:cache_col_size],             # <<<<<<<<<<<<<<
 *                             yoff=global_row_offset, xoff=global_col_offset)
 *                 self.cache_dirty[row_index[0], col_index[0]] = 0
 */
          __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_11, __pyx_t_19); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          goto __pyx_L13;
        }
        __pyx_L13:;

        /* "pygeoprocessing\routing\routing_core.pyx":124
 *                     cache_row_size = self.block_row_size
 * 
 *                 for band, block, update in zip(self.band_list, self.block_list, self.update_list):             # <<<<<<<<<<<<<<
 *                     if update:
 *                         band.WriteArray(block[row_index[0], col_index[0], 0:cache_row_size, 0:cache_col_size],
 */
      }
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":128
 *                         band.WriteArray(block[row_index[0], col_index[0], 0:cache_row_size, 0:cache_col_size],
 *                             yoff=global_row_offset, xoff=global_col_offset)
 *                 self.cache_dirty[row_index[0], col_index[0]] = 0             # <<<<<<<<<<<<<<
 *             self.row_tag_cache[row_index[0], col_index[0]] = row_tag
 *             self.col_tag_cache[row_index[0], col_index[0]] = col_tag
 */
      if (unlikely(!__pyx_v_self->cache_dirty.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");{__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
      __pyx_t_9 = (__pyx_v_row_index[0]);
      __pyx_t_20 = (__pyx_v_col_index[0]);
      *((__pyx_t_5numpy_int8_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->cache_dirty.data + __pyx_t_9 * __pyx_v_self->cache_dirty.strides[0]) ) + __pyx_t_20 * __pyx_v_self->cache_dirty.strides[1]) )) = 0;
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "pygeoprocessing\routing\routing_core.pyx":129
 *                             yoff=global_row_offset, xoff=global_col_offset)
 *                 self.cache_dirty[row_index[0], col_index[0]] = 0
 *             self.row_tag_cache[row_index[0], col_index[0]] = row_tag             # <<<<<<<<<<<<<<
 *             self.col_tag_cache[row_index[0], col_index[0]] = col_tag
 * 
 */
    if (unlikely(!__pyx_v_self->row_tag_cache.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");{__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_t_21 = (__pyx_v_row_index[0]);
    __pyx_t_22 = (__pyx_v_col_index[0]);
    *((__pyx_t_5numpy_int32_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->row_tag_cache.data + __pyx_t_21 * __pyx_v_self->row_tag_cache.strides[0]) ) + __pyx_t_22 * __pyx_v_self->row_tag_cache.strides[1]) )) = __pyx_v_row_tag;

    /* "pygeoprocessing\routing\routing_core.pyx":130
 *                 self.cache_dirty[row_index[0], col_index[0]] = 0
 *             self.row_tag_cache[row_index[0], col_index[0]] = row_tag
 *             self.col_tag_cache[row_index[0], col_index[0]] = col_tag             # <<<<<<<<<<<<<<
 * 
 *             global_col_offset = (col_tag * self.n_block_cols + col_index[0]) * self.block_col_size
 */
    if (unlikely(!__pyx_v_self->col_tag_cache.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");{__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_t_23 = (__pyx_v_row_index[0]);
    __pyx_t_24 = (__pyx_v_col_index[0]);
    *((__pyx_t_5numpy_int32_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->col_tag_cache.data + __pyx_t_23 * __pyx_v_self->col_tag_cache.strides[0]) ) + __pyx_t_24 * __pyx_v_self->col_tag_cache.strides[1]) )) = __pyx_v_col_tag;

    /* "pygeoprocessing\routing\routing_core.pyx":132
 *             self.col_tag_cache[row_index[0], col_index[0]] = col_tag
 * 
 *             global_col_offset = (col_tag * self.n_block_cols + col_index[0]) * self.block_col_size             # <<<<<<<<<<<<<<
 *             global_row_offset = (row_tag * self.n_block_rows + row_index[0]) * self.block_row_size
 * 
 */
    __pyx_v_global_col_offset = (((__pyx_v_col_tag * __pyx_v_self->n_block_cols) + (__pyx_v_col_index[0])) * __pyx_v_self->block_col_size);

    /* "pygeoprocessing\routing\routing_core.pyx":133
 * 
 *             global_col_offset = (col_tag * self.n_block_cols + col_index[0]) * self.block_col_size
 *             global_row_offset = (row_tag * self.n_block_rows + row_index[0]) * self.block_row_size             # <<<<<<<<<<<<<<
 * 
 *             cache_col_size = self.n_cols - global_col_offset
 */
    __pyx_v_global_row_offset = (((__pyx_v_row_tag * __pyx_v_self->n_block_rows) + (__pyx_v_row_index[0])) * __pyx_v_self->block_row_size);

    /* "pygeoprocessing\routing\routing_core.pyx":135
 *             global_row_offset = (row_tag * self.n_block_rows + row_index[0]) * self.block_row_size
 * 
 *             cache_col_size = self.n_cols - global_col_offset             # <<<<<<<<<<<<<<
 *             if cache_col_size > self.block_col_size:
 *                 cache_col_size = self.block_col_size
 */
    __pyx_v_cache_col_size = (__pyx_v_self->n_cols - __pyx_v_global_col_offset);

    /* "pygeoprocessing\routing\routing_core.pyx":136
 * 
 *             cache_col_size = self.n_cols - global_col_offset
 *             if cache_col_size > self.block_col_size:             # <<<<<<<<<<<<<<
 *                 cache_col_size = self.block_col_size
 *             cache_row_size = self.n_rows - global_row_offset
 */
    __pyx_t_5 = ((__pyx_v_cache_col_size > __pyx_v_self->block_col_size) != 0);
    if (__pyx_t_5) {

      /* "pygeoprocessing\routing\routing_core.pyx":137
 *             cache_col_size = self.n_cols - global_col_offset
 *             if cache_col_size > self.block_col_size:
 *                 cache_col_size = self.block_col_size             # <<<<<<<<<<<<<<
 *             cache_row_size = self.n_rows - global_row_offset
 *             if cache_row_size > self.block_row_size:
 */
      __pyx_t_25 = __pyx_v_self->block_col_size;
      __pyx_v_cache_col_size = __pyx_t_25;
      goto __pyx_L14;
    }
    __pyx_L14:;

    /* "pygeoprocessing\routing\routing_core.pyx":138
 *             if cache_col_size > self.block_col_size:
 *                 cache_col_size = self.block_col_size
 *             cache_row_size = self.n_rows - global_row_offset             # <<<<<<<<<<<<<<
 *             if cache_row_size > self.block_row_size:
 *                 cache_row_size = self.block_row_size
 */
    __pyx_v_cache_row_size = (__pyx_v_self->n_rows - __pyx_v_global_row_offset);

    /* "pygeoprocessing\routing\routing_core.pyx":139
 *                 cache_col_size = self.block_col_size
 *             cache_row_size = self.n_rows - global_row_offset
 *             if cache_row_size > self.block_row_size:             # <<<<<<<<<<<<<<
 *                 cache_row_size = self.block_row_size
 * 
 */
    __pyx_t_5 = ((__pyx_v_cache_row_size > __pyx_v_self->block_row_size) != 0);
    if (__pyx_t_5) {

      /* "pygeoprocessing\routing\routing_core.pyx":140
 *             cache_row_size = self.n_rows - global_row_offset
 *             if cache_row_size > self.block_row_size:
 *                 cache_row_size = self.block_row_size             # <<<<<<<<<<<<<<
 * 
 *             for band, block in zip(self.band_list, self.block_list):
 */
      __pyx_t_25 = __pyx_v_self->block_row_size;
      __pyx_v_cache_row_size = __pyx_t_25;
      goto __pyx_L15;
    }
    __pyx_L15:;

    /* "pygeoprocessing\routing\routing_core.pyx":142
 *                 cache_row_size = self.block_row_size
 * 
 *             for band, block in zip(self.band_list, self.block_list):             # <<<<<<<<<<<<<<
 *                 band.ReadAsArray(
 *                     xoff=global_col_offset, yoff=global_row_offset,
 */
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_band_list); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_17 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_block_list); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_19);
    PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_17);
    __pyx_t_13 = 0;
    __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_19, NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (likely(PyList_CheckExact(__pyx_t_17)) || PyTuple_CheckExact(__pyx_t_17)) {
      __pyx_t_19 = __pyx_t_17; __Pyx_INCREF(__pyx_t_19); __pyx_t_14 = 0;
      __pyx_t_15 = NULL;
    } else {
      __pyx_t_14 = -1; __pyx_t_19 = PyObject_GetIter(__pyx_t_17); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_19);
      __pyx_t_15 = Py_TYPE(__pyx_t_19)->tp_iternext; if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    for (;;) {
      if (likely(!__pyx_t_15)) {
        if (likely(PyList_CheckExact(__pyx_t_19))) {
          if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_19)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_17 = PyList_GET_ITEM(__pyx_t_19, __pyx_t_14); __Pyx_INCREF(__pyx_t_17); __pyx_t_14++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_17 = PySequence_ITEM(__pyx_t_19, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_19)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_17 = PyTuple_GET_ITEM(__pyx_t_19, __pyx_t_14); __Pyx_INCREF(__pyx_t_17); __pyx_t_14++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_17 = PySequence_ITEM(__pyx_t_19, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_17 = __pyx_t_15(__pyx_t_19);
        if (unlikely(!__pyx_t_17)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_17);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_17))) || (PyList_CheckExact(__pyx_t_17))) {
        PyObject* sequence = __pyx_t_17;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_13 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_13 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_11);
        #else
        __pyx_t_13 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_12 = PyObject_GetIter(__pyx_t_17); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_18 = Py_TYPE(__pyx_t_12)->tp_iternext;
        index = 0; __pyx_t_13 = __pyx_t_18(__pyx_t_12); if (unlikely(!__pyx_t_13)) goto __pyx_L18_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_13);
        index = 1; __pyx_t_11 = __pyx_t_18(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L18_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_12), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_18 = NULL;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L19_unpacking_done;
        __pyx_L18_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_18 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L19_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_band, __pyx_t_13);
      __pyx_t_13 = 0;
      __Pyx_XDECREF_SET(__pyx_v_block, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":143
 * 
 *             for band, block in zip(self.band_list, self.block_list):
 *                 band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                     xoff=global_col_offset, yoff=global_row_offset,
 *                     win_xsize=cache_col_size, win_ysize=cache_row_size,
 */
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);

      /* "pygeoprocessing\routing\routing_core.pyx":144
 *             for band, block in zip(self.band_list, self.block_list):
 *                 band.ReadAsArray(
 *                     xoff=global_col_offset, yoff=global_row_offset,             # <<<<<<<<<<<<<<
 *                     win_xsize=cache_col_size, win_ysize=cache_row_size,
 *                     buf_obj=block[row_index[0], col_index[0], 0:cache_row_size, 0:cache_col_size])
 */
      __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_global_col_offset); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_13);
      if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_xoff, __pyx_t_13) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_global_row_offset); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_13);
      if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_yoff, __pyx_t_13) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":145
 *                 band.ReadAsArray(
 *                     xoff=global_col_offset, yoff=global_row_offset,
 *                     win_xsize=cache_col_size, win_ysize=cache_row_size,             # <<<<<<<<<<<<<<
 *                     buf_obj=block[row_index[0], col_index[0], 0:cache_row_size, 0:cache_col_size])
 * 
 */
      __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_cache_col_size); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_13);
      if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_win_xsize, __pyx_t_13) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_cache_row_size); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_13);
      if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_win_ysize, __pyx_t_13) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":146
 *                     xoff=global_col_offset, yoff=global_row_offset,
 *                     win_xsize=cache_col_size, win_ysize=cache_row_size,
 *                     buf_obj=block[row_index[0], col_index[0], 0:cache_row_size, 0:cache_col_size])             # <<<<<<<<<<<<<<
 * 
 *     cdef void flush_cache(self):
 */
      __pyx_t_13 = __Pyx_PyInt_From_int((__pyx_v_row_index[0])); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = __Pyx_PyInt_From_int((__pyx_v_col_index[0])); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_cache_row_size); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_16 = PySlice_New(__pyx_int_0, __pyx_t_10, Py_None); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_cache_col_size); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_26 = PySlice_New(__pyx_int_0, __pyx_t_10, Py_None); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_26);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_26);
      __Pyx_GIVEREF(__pyx_t_26);
      __pyx_t_13 = 0;
      __pyx_t_12 = 0;
      __pyx_t_16 = 0;
      __pyx_t_26 = 0;
      __pyx_t_26 = PyObject_GetItem(__pyx_v_block, __pyx_t_10); if (unlikely(__pyx_t_26 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_26);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_buf_obj, __pyx_t_26) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":143
 * 
 *             for band, block in zip(self.band_list, self.block_list):
 *                 band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                     xoff=global_col_offset, yoff=global_row_offset,
 *                     win_xsize=cache_col_size, win_ysize=cache_row_size,
 */
      __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_empty_tuple, __pyx_t_11); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_26);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":142
 *                 cache_row_size = self.block_row_size
 * 
 *             for band, block in zip(self.band_list, self.block_list):             # <<<<<<<<<<<<<<
 *                 band.ReadAsArray(
 *                     xoff=global_col_offset, yoff=global_row_offset,
 */
    }
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pygeoprocessing\routing\routing_core.pyx":96
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
 *     cdef void update_cache(self, int global_row, int global_col, int *row_index, int *col_index, int *row_block_offset, int *col_block_offset):             # <<<<<<<<<<<<<<
 *         cdef int cache_row_size, cache_col_size
 *         cdef int global_row_offset, global_col_offset
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_WriteUnraisable("pygeoprocessing.routing.routing_core.BlockCache.update_cache", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_band);
  __Pyx_XDECREF(__pyx_v_block);
  __Pyx_XDECREF(__pyx_v_update);
  __Pyx_RefNannyFinishContext();
}

/* "pygeoprocessing\routing\routing_core.pyx":148
 *                     buf_obj=block[row_index[0], col_index[0], 0:cache_row_size, 0:cache_col_size])
 * 
 *     cdef void flush_cache(self):             # <<<<<<<<<<<<<<
 *         cdef int global_row_offset, global_col_offset
 *         cdef int cache_row_size, cache_col_size
 */

static void __pyx_f_15pygeoprocessing_7routing_12routing_core_10BlockCache_flush_cache(struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_self) {
  int __pyx_v_global_row_offset;
  int __pyx_v_global_col_offset;
  int __pyx_v_cache_row_size;
  int __pyx_v_cache_col_size;
  int __pyx_v_row_index;
  int __pyx_v_col_index;
  PyObject *__pyx_v_row_tag = NULL;
  PyObject *__pyx_v_col_tag = NULL;
  PyObject *__pyx_v_band = NULL;
  PyObject *__pyx_v_block = NULL;
  PyObject *__pyx_v_update = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  Py_ssize_t __pyx_t_17;
  PyObject *(*__pyx_t_18)(PyObject *);
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *(*__pyx_t_21)(PyObject *);
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flush_cache", 0);

  /* "pygeoprocessing\routing\routing_core.pyx":152
 *         cdef int cache_row_size, cache_col_size
 *         cdef int row_index, col_index
 *         for row_index in xrange(self.n_block_rows):             # <<<<<<<<<<<<<<
 *             for col_index in xrange(self.n_block_cols):
 *                 row_tag = self.row_tag_cache[row_index, col_index]
 */
  __pyx_t_1 = __pyx_v_self->n_block_rows;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_row_index = __pyx_t_2;

    /* "pygeoprocessing\routing\routing_core.pyx":153
 *         cdef int row_index, col_index
 *         for row_index in xrange(self.n_block_rows):
 *             for col_index in xrange(self.n_block_cols):             # <<<<<<<<<<<<<<
 *                 row_tag = self.row_tag_cache[row_index, col_index]
 *                 col_tag = self.col_tag_cache[row_index, col_index]
 */
    __pyx_t_3 = __pyx_v_self->n_block_cols;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_col_index = __pyx_t_4;

      /* "pygeoprocessing\routing\routing_core.pyx":154
 *         for row_index in xrange(self.n_block_rows):
 *             for col_index in xrange(self.n_block_cols):
 *                 row_tag = self.row_tag_cache[row_index, col_index]             # <<<<<<<<<<<<<<
 *                 col_tag = self.col_tag_cache[row_index, col_index]
 * 
 */
      if (unlikely(!__pyx_v_self->row_tag_cache.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");{__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
      __pyx_t_5 = __pyx_v_row_index;
      __pyx_t_6 = __pyx_v_col_index;
      __pyx_t_7 = -1;
      if (__pyx_t_5 < 0) {
        __pyx_t_5 += __pyx_v_self->row_tag_cache.shape[0];
        if (unlikely(__pyx_t_5 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_5 >= __pyx_v_self->row_tag_cache.shape[0])) __pyx_t_7 = 0;
      if (__pyx_t_6 < 0) {
        __pyx_t_6 += __pyx_v_self->row_tag_cache.shape[1];
        if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 1;
      } else if (unlikely(__pyx_t_6 >= __pyx_v_self->row_tag_cache.shape[1])) __pyx_t_7 = 1;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_8 = __Pyx_PyInt_From_npy_int32((*((__pyx_t_5numpy_int32_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->row_tag_cache.data + __pyx_t_5 * __pyx_v_self->row_tag_cache.strides[0]) ) + __pyx_t_6 * __pyx_v_self->row_tag_cache.strides[1]) )))); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_v_row_tag, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":155
 *             for col_index in xrange(self.n_block_cols):
 *                 row_tag = self.row_tag_cache[row_index, col_index]
 *                 col_tag = self.col_tag_cache[row_index, col_index]             # <<<<<<<<<<<<<<
 * 
 *                 if self.cache_dirty[row_index, col_index]:
 */
      if (unlikely(!__pyx_v_self->col_tag_cache.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");{__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
      __pyx_t_7 = __pyx_v_row_index;
      __pyx_t_9 = __pyx_v_col_index;
      __pyx_t_10 = -1;
      if (__pyx_t_7 < 0) {
        __pyx_t_7 += __pyx_v_self->col_tag_cache.shape[0];
        if (unlikely(__pyx_t_7 < 0)) __pyx_t_10 = 0;
      } else if (unlikely(__pyx_t_7 >= __pyx_v_self->col_tag_cache.shape[0])) __pyx_t_10 = 0;
      if (__pyx_t_9 < 0) {
        __pyx_t_9 += __pyx_v_self->col_tag_cache.shape[1];
        if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 1;
      } else if (unlikely(__pyx_t_9 >= __pyx_v_self->col_tag_cache.shape[1])) __pyx_t_10 = 1;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_8 = __Pyx_PyInt_From_npy_int32((*((__pyx_t_5numpy_int32_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->col_tag_cache.data + __pyx_t_7 * __pyx_v_self->col_tag_cache.strides[0]) ) + __pyx_t_9 * __pyx_v_self->col_tag_cache.strides[1]) )))); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_v_col_tag, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":157
 *                 col_tag = self.col_tag_cache[row_index, col_index]
 * 
 *                 if self.cache_dirty[row_index, col_index]:             # <<<<<<<<<<<<<<
 *                     global_col_offset = (col_tag * self.n_block_cols + col_index) * self.block_col_size
 *                     cache_col_size = self.n_cols - global_col_offset
 */
      if (unlikely(!__pyx_v_self->cache_dirty.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");{__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
      __pyx_t_10 = __pyx_v_row_index;
      __pyx_t_11 = __pyx_v_col_index;
      __pyx_t_12 = -1;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_self->cache_dirty.shape[0];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_12 = 0;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_self->cache_dirty.shape[0])) __pyx_t_12 = 0;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_v_self->cache_dirty.shape[1];
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 1;
      } else if (unlikely(__pyx_t_11 >= __pyx_v_self->cache_dirty.shape[1])) __pyx_t_12 = 1;
      if (unlikely(__pyx_t_12 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_12);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_13 = ((*((__pyx_t_5numpy_int8_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->cache_dirty.data + __pyx_t_10 * __pyx_v_self->cache_dirty.strides[0]) ) + __pyx_t_11 * __pyx_v_self->cache_dirty.strides[1]) ))) != 0);
      if (__pyx_t_13) {

        /* "pygeoprocessing\routing\routing_core.pyx":158
 * 
 *                 if self.cache_dirty[row_index, col_index]:
 *                     global_col_offset = (col_tag * self.n_block_cols + col_index) * self.block_col_size             # <<<<<<<<<<<<<<
 *                     cache_col_size = self.n_cols - global_col_offset
 *                     if cache_col_size > self.block_col_size:
 */
        __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->n_block_cols); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = PyNumber_Multiply(__pyx_v_col_tag, __pyx_t_8); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_col_index); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_15 = PyNumber_Add(__pyx_t_14, __pyx_t_8); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->block_col_size); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = PyNumber_Multiply(__pyx_t_15, __pyx_t_8); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_14); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_v_global_col_offset = __pyx_t_12;

        /* "pygeoprocessing\routing\routing_core.pyx":159
 *                 if self.cache_dirty[row_index, col_index]:
 *                     global_col_offset = (col_tag * self.n_block_cols + col_index) * self.block_col_size
 *                     cache_col_size = self.n_cols - global_col_offset             # <<<<<<<<<<<<<<
 *                     if cache_col_size > self.block_col_size:
 *                         cache_col_size = self.block_col_size
 */
        __pyx_v_cache_col_size = (__pyx_v_self->n_cols - __pyx_v_global_col_offset);

        /* "pygeoprocessing\routing\routing_core.pyx":160
 *                     global_col_offset = (col_tag * self.n_block_cols + col_index) * self.block_col_size
 *                     cache_col_size = self.n_cols - global_col_offset
 *                     if cache_col_size > self.block_col_size:             # <<<<<<<<<<<<<<
 *                         cache_col_size = self.block_col_size
 * 
 */
        __pyx_t_13 = ((__pyx_v_cache_col_size > __pyx_v_self->block_col_size) != 0);
        if (__pyx_t_13) {

          /* "pygeoprocessing\routing\routing_core.pyx":161
 *                     cache_col_size = self.n_cols - global_col_offset
 *                     if cache_col_size > self.block_col_size:
 *                         cache_col_size = self.block_col_size             # <<<<<<<<<<<<<<
 * 
 *                     global_row_offset = (row_tag * self.n_block_rows + row_index) * self.block_row_size
 */
          __pyx_t_12 = __pyx_v_self->block_col_size;
          __pyx_v_cache_col_size = __pyx_t_12;
          goto __pyx_L8;
        }
        __pyx_L8:;

        /* "pygeoprocessing\routing\routing_core.pyx":163
 *                         cache_col_size = self.block_col_size
 * 
 *                     global_row_offset = (row_tag * self.n_block_rows + row_index) * self.block_row_size             # <<<<<<<<<<<<<<
 *                     cache_row_size = self.n_rows - global_row_offset
 *                     if cache_row_size > self.block_row_size:
 */
        __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_self->n_block_rows); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_8 = PyNumber_Multiply(__pyx_v_row_tag, __pyx_t_14); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_row_index); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_15 = PyNumber_Add(__pyx_t_8, __pyx_t_14); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_self->block_row_size); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_8 = PyNumber_Multiply(__pyx_t_15, __pyx_t_14); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_v_global_row_offset = __pyx_t_12;

        /* "pygeoprocessing\routing\routing_core.pyx":164
 * 
 *                     global_row_offset = (row_tag * self.n_block_rows + row_index) * self.block_row_size
 *                     cache_row_size = self.n_rows - global_row_offset             # <<<<<<<<<<<<<<
 *                     if cache_row_size > self.block_row_size:
 *                         cache_row_size = self.block_row_size
 */
        __pyx_v_cache_row_size = (__pyx_v_self->n_rows - __pyx_v_global_row_offset);

        /* "pygeoprocessing\routing\routing_core.pyx":165
 *                     global_row_offset = (row_tag * self.n_block_rows + row_index) * self.block_row_size
 *                     cache_row_size = self.n_rows - global_row_offset
 *                     if cache_row_size > self.block_row_size:             # <<<<<<<<<<<<<<
 *                         cache_row_size = self.block_row_size
 * 
 */
        __pyx_t_13 = ((__pyx_v_cache_row_size > __pyx_v_self->block_row_size) != 0);
        if (__pyx_t_13) {

          /* "pygeoprocessing\routing\routing_core.pyx":166
 *                     cache_row_size = self.n_rows - global_row_offset
 *                     if cache_row_size > self.block_row_size:
 *                         cache_row_size = self.block_row_size             # <<<<<<<<<<<<<<
 * 
 *                     for band, block, update in zip(self.band_list, self.block_list, self.update_list):
 */
          __pyx_t_12 = __pyx_v_self->block_row_size;
          __pyx_v_cache_row_size = __pyx_t_12;
          goto __pyx_L9;
        }
        __pyx_L9:;

        /* "pygeoprocessing\routing\routing_core.pyx":168
 *                         cache_row_size = self.block_row_size
 * 
 *                     for band, block, update in zip(self.band_list, self.block_list, self.update_list):             # <<<<<<<<<<<<<<
 *                         if update:
 *                             band.WriteArray(block[row_index, col_index, 0:cache_row_size, 0:cache_col_size],
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_band_list); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_block_list); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_list); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_16 = PyTuple_New(3); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_16);
        PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_15);
        __Pyx_GIVEREF(__pyx_t_15);
        __pyx_t_8 = 0;
        __pyx_t_14 = 0;
        __pyx_t_15 = 0;
        __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_16, NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
          __pyx_t_16 = __pyx_t_15; __Pyx_INCREF(__pyx_t_16); __pyx_t_17 = 0;
          __pyx_t_18 = NULL;
        } else {
          __pyx_t_17 = -1; __pyx_t_16 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_18 = Py_TYPE(__pyx_t_16)->tp_iternext; if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        for (;;) {
          if (likely(!__pyx_t_18)) {
            if (likely(PyList_CheckExact(__pyx_t_16))) {
              if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_16)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_15 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_17); __Pyx_INCREF(__pyx_t_15); __pyx_t_17++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              #else
              __pyx_t_15 = PySequence_ITEM(__pyx_t_16, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              #endif
            } else {
              if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_16)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_16, __pyx_t_17); __Pyx_INCREF(__pyx_t_15); __pyx_t_17++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              #else
              __pyx_t_15 = PySequence_ITEM(__pyx_t_16, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              #endif
            }
          } else {
            __pyx_t_15 = __pyx_t_18(__pyx_t_16);
            if (unlikely(!__pyx_t_15)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_15);
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_15))) || (PyList_CheckExact(__pyx_t_15))) {
            PyObject* sequence = __pyx_t_15;
            #if CYTHON_COMPILING_IN_CPYTHON
            Py_ssize_t size = Py_SIZE(sequence);
            #else
            Py_ssize_t size = PySequence_Size(sequence);
            #endif
            if (unlikely(size != 3)) {
              if (size > 3) __Pyx_RaiseTooManyValuesError(3);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            #if CYTHON_COMPILING_IN_CPYTHON
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_14 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
              __pyx_t_19 = PyTuple_GET_ITEM(sequence, 2); 
            } else {
              __pyx_t_14 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
              __pyx_t_19 = PyList_GET_ITEM(sequence, 2); 
            }
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_19);
            #else
            __pyx_t_14 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_19 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_19);
            #endif
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_20 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_21 = Py_TYPE(__pyx_t_20)->tp_iternext;
            index = 0; __pyx_t_14 = __pyx_t_21(__pyx_t_20); if (unlikely(!__pyx_t_14)) goto __pyx_L12_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_14);
            index = 1; __pyx_t_8 = __pyx_t_21(__pyx_t_20); if (unlikely(!__pyx_t_8)) goto __pyx_L12_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_8);
            index = 2; __pyx_t_19 = __pyx_t_21(__pyx_t_20); if (unlikely(!__pyx_t_19)) goto __pyx_L12_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_19);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_21(__pyx_t_20), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __pyx_t_21 = NULL;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            goto __pyx_L13_unpacking_done;
            __pyx_L12_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __pyx_t_21 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __pyx_L13_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_band, __pyx_t_14);
          __pyx_t_14 = 0;
          __Pyx_XDECREF_SET(__pyx_v_block, __pyx_t_8);
          __pyx_t_8 = 0;
          __Pyx_XDECREF_SET(__pyx_v_update, __pyx_t_19);
          __pyx_t_19 = 0;

          /* "pygeoprocessing\routing\routing_core.pyx":169
 * 
 *                     for band, block, update in zip(self.band_list, self.block_list, self.update_list):
 *                         if update:             # <<<<<<<<<<<<<<
 *                             band.WriteArray(block[row_index, col_index, 0:cache_row_size, 0:cache_col_size],
 *                                 yoff=global_row_offset, xoff=global_col_offset)
 */
          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_update); if (unlikely(__pyx_t_13 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          if (__pyx_t_13) {

            /* "pygeoprocessing\routing\routing_core.pyx":170
 *                     for band, block, update in zip(self.band_list, self.block_list, self.update_list):
 *                         if update:
 *                             band.WriteArray(block[row_index, col_index, 0:cache_row_size, 0:cache_col_size],             # <<<<<<<<<<<<<<
 *                                 yoff=global_row_offset, xoff=global_col_offset)
 *         for band in self.band_list:
 */
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_band, __pyx_n_s_WriteArray); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_19 = __Pyx_PyInt_From_int(__pyx_v_row_index); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_19);
            __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_col_index); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_cache_row_size); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_20 = PySlice_New(__pyx_int_0, __pyx_t_14, Py_None); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_cache_col_size); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_22 = PySlice_New(__pyx_int_0, __pyx_t_14, Py_None); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_22);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = PyTuple_New(4); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_14);
            PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_19);
            __Pyx_GIVEREF(__pyx_t_19);
            PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_8);
            PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_t_20);
            __Pyx_GIVEREF(__pyx_t_20);
            PyTuple_SET_ITEM(__pyx_t_14, 3, __pyx_t_22);
            __Pyx_GIVEREF(__pyx_t_22);
            __pyx_t_19 = 0;
            __pyx_t_8 = 0;
            __pyx_t_20 = 0;
            __pyx_t_22 = 0;
            __pyx_t_22 = PyObject_GetItem(__pyx_v_block, __pyx_t_14); if (unlikely(__pyx_t_22 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
            __Pyx_GOTREF(__pyx_t_22);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_14);
            PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_22);
            __Pyx_GIVEREF(__pyx_t_22);
            __pyx_t_22 = 0;
            __pyx_t_22 = PyDict_New(); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_22);

            /* "pygeoprocessing\routing\routing_core.pyx":171
 *                         if update:
 *                             band.WriteArray(block[row_index, col_index, 0:cache_row_size, 0:cache_col_size],
 *                                 yoff=global_row_offset, xoff=global_col_offset)             # <<<<<<<<<<<<<<
 *         for band in self.band_list:
 *             band.FlushCache()
 */
            __pyx_t_20 = __Pyx_PyInt_From_int(__pyx_v_global_row_offset); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_20);
            if (PyDict_SetItem(__pyx_t_22, __pyx_n_s_yoff, __pyx_t_20) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __pyx_t_20 = __Pyx_PyInt_From_int(__pyx_v_global_col_offset); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_20);
            if (PyDict_SetItem(__pyx_t_22, __pyx_n_s_xoff, __pyx_t_20) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

            /* "pygeoprocessing\routing\routing_core.pyx":170
 *                     for band, block, update in zip(self.band_list, self.block_list, self.update_list):
 *                         if update:
 *                             band.WriteArray(block[row_index, col_index, 0:cache_row_size, 0:cache_col_size],             # <<<<<<<<<<<<<<
 *                                 yoff=global_row_offset, xoff=global_col_offset)
 *         for band in self.band_list:
 */
            __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_14, __pyx_t_22); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            goto __pyx_L14;
          }
          __pyx_L14:;

          /* "pygeoprocessing\routing\routing_core.pyx":168
 *                         cache_row_size = self.block_row_size
 * 
 *                     for band, block, update in zip(self.band_list, self.block_list, self.update_list):             # <<<<<<<<<<<<<<
 *                         if update:
 *                             band.WriteArray(block[row_index, col_index, 0:cache_row_size, 0:cache_col_size],
 */
        }
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
  }

  /* "pygeoprocessing\routing\routing_core.pyx":172
 *                             band.WriteArray(block[row_index, col_index, 0:cache_row_size, 0:cache_col_size],
 *                                 yoff=global_row_offset, xoff=global_col_offset)
 *         for band in self.band_list:             # <<<<<<<<<<<<<<
 *             band.FlushCache()
 * 
 */
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_band_list); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
    __pyx_t_20 = __pyx_t_16; __Pyx_INCREF(__pyx_t_20); __pyx_t_17 = 0;
    __pyx_t_18 = NULL;
  } else {
    __pyx_t_17 = -1; __pyx_t_20 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_18 = Py_TYPE(__pyx_t_20)->tp_iternext; if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  for (;;) {
    if (likely(!__pyx_t_18)) {
      if (likely(PyList_CheckExact(__pyx_t_20))) {
        if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_20)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_16 = PyList_GET_ITEM(__pyx_t_20, __pyx_t_17); __Pyx_INCREF(__pyx_t_16); __pyx_t_17++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_16 = PySequence_ITEM(__pyx_t_20, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_20)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_20, __pyx_t_17); __Pyx_INCREF(__pyx_t_16); __pyx_t_17++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_16 = PySequence_ITEM(__pyx_t_20, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_16 = __pyx_t_18(__pyx_t_20);
      if (unlikely(!__pyx_t_16)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_16);
    }
    __Pyx_XDECREF_SET(__pyx_v_band, __pyx_t_16);
    __pyx_t_16 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":173
 *                                 yoff=global_row_offset, xoff=global_col_offset)
 *         for band in self.band_list:
 *             band.FlushCache()             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
    __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_v_band, __pyx_n_s_FlushCache); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_14 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_22))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_22);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_22);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_22, function);
      }
    }
    if (__pyx_t_14) {
      __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_22, __pyx_t_14); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    } else {
      __pyx_t_16 = __Pyx_PyObject_CallNoArg(__pyx_t_22); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":172
 *                             band.WriteArray(block[row_index, col_index, 0:cache_row_size, 0:cache_col_size],
 *                                 yoff=global_row_offset, xoff=global_col_offset)
 *         for band in self.band_list:             # <<<<<<<<<<<<<<
 *             band.FlushCache()
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":148
 *                     buf_obj=block[row_index[0], col_index[0], 0:cache_row_size, 0:cache_col_size])
 * 
 *     cdef void flush_cache(self):             # <<<<<<<<<<<<<<
 *         cdef int global_row_offset, global_col_offset
 *         cdef int cache_row_size, cache_col_size
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_WriteUnraisable("pygeoprocessing.routing.routing_core.BlockCache.flush_cache", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_row_tag);
  __Pyx_XDECREF(__pyx_v_col_tag);
  __Pyx_XDECREF(__pyx_v_band);
  __Pyx_XDECREF(__pyx_v_block);
  __Pyx_XDECREF(__pyx_v_update);
  __Pyx_RefNannyFinishContext();
}

/* "pygeoprocessing\routing\routing_core.pyx":177
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef calculate_transport(             # <<<<<<<<<<<<<<
 *         outflow_direction_uri, outflow_weights_uri, deque[int] &sink_cell_deque,
 *         source_uri, absorption_rate_uri, loss_uri, flux_uri, absorption_mode,
 */

static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_calculate_transport(PyObject *__pyx_v_outflow_direction_uri, PyObject *__pyx_v_outflow_weights_uri, std::deque<int>  &__pyx_v_sink_cell_deque, PyObject *__pyx_v_source_uri, PyObject *__pyx_v_absorption_rate_uri, PyObject *__pyx_v_loss_uri, PyObject *__pyx_v_flux_uri, PyObject *__pyx_v_absorption_mode, struct __pyx_opt_args_15pygeoprocessing_7routing_12routing_core_calculate_transport *__pyx_optional_args) {

  /* "pygeoprocessing\routing\routing_core.pyx":180
 *         outflow_direction_uri, outflow_weights_uri, deque[int] &sink_cell_deque,
 *         source_uri, absorption_rate_uri, loss_uri, flux_uri, absorption_mode,
 *         stream_uri=None):             # <<<<<<<<<<<<<<
 *     """This is a generalized flux transport algorithm that operates
 *         on a 2D grid given a per pixel flow direction, per pixel source,
 */
  PyObject *__pyx_v_stream_uri = ((PyObject *)Py_None);
  time_t __pyx_v_start;
  PyObject *__pyx_v_outflow_direction_dataset = NULL;
  int __pyx_v_n_cols;
  int __pyx_v_n_rows;
  PyObject *__pyx_v_outflow_direction_band = NULL;
  int __pyx_v_block_col_size;
  int __pyx_v_block_row_size;
  int __pyx_v_global_row;
  int __pyx_v_global_col;
  int __pyx_v_row_index;
  int __pyx_v_col_index;
  int __pyx_v_row_block_offset;
  int __pyx_v_col_block_offset;
  int __pyx_v_neighbor_row;
  int __pyx_v_neighbor_col;
  int __pyx_v_neighbor_row_index;
  int __pyx_v_neighbor_col_index;
  int __pyx_v_neighbor_row_block_offset;
  int __pyx_v_neighbor_col_block_offset;
  PyArrayObject *__pyx_v_outflow_direction_block = 0;
  PyArrayObject *__pyx_v_outflow_weights_block = 0;
  PyArrayObject *__pyx_v_source_block = 0;
  PyArrayObject *__pyx_v_absorption_rate_block = 0;
  PyArrayObject *__pyx_v_loss_block = 0;
  PyArrayObject *__pyx_v_flux_block = 0;
  PyArrayObject *__pyx_v_stream_block = 0;
  PyArrayObject *__pyx_v_cache_dirty = 0;
  int __pyx_v_outflow_direction_nodata;
  PyObject *__pyx_v_outflow_weights_dataset = NULL;
  PyObject *__pyx_v_outflow_weights_band = NULL;
  CYTHON_UNUSED int __pyx_v_outflow_weights_nodata;
  PyObject *__pyx_v_source_dataset = NULL;
  PyObject *__pyx_v_source_band = NULL;
  int __pyx_v_source_nodata;
  PyObject *__pyx_v_absorption_rate_dataset = NULL;
  PyObject *__pyx_v_absorption_rate_band = NULL;
  int __pyx_v_absorption_rate_nodata;
  double __pyx_v_transport_nodata;
  PyObject *__pyx_v_loss_dataset = NULL;
  PyObject *__pyx_v_loss_band = NULL;
  PyObject *__pyx_v_flux_dataset = NULL;
  PyObject *__pyx_v_flux_band = NULL;
  PyObject *__pyx_v_band_list = NULL;
  PyObject *__pyx_v_block_list = NULL;
  PyObject *__pyx_v_update_list = NULL;
  CYTHON_UNUSED int __pyx_v_stream_nodata;
  PyObject *__pyx_v_stream_dataset = NULL;
  PyObject *__pyx_v_stream_band = NULL;
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_block_cache = 0;
  std::deque<int>  __pyx_v_cells_to_process;
  int __pyx_v_cell;
  std::deque<int>  __pyx_v_cell_neighbor_to_process;
  CYTHON_UNUSED size_t __pyx_v__;
  int *__pyx_v_row_offsets;
  int *__pyx_v_col_offsets;
  int *__pyx_v_inflow_offsets;
  int __pyx_v_neighbor_direction;
  double __pyx_v_absorption_rate;
  double __pyx_v_outflow_weight;
  double __pyx_v_in_flux;
  int __pyx_v_current_neighbor_index;
  int __pyx_v_current_index;
  int __pyx_v_absorb_source;
  time_t __pyx_v_last_time;
  time_t __pyx_v_current_time;
  long __pyx_v_direction_index;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_absorption_rate_block;
  __Pyx_Buffer __pyx_pybuffer_absorption_rate_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cache_dirty;
  __Pyx_Buffer __pyx_pybuffer_cache_dirty;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flux_block;
  __Pyx_Buffer __pyx_pybuffer_flux_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_loss_block;
  __Pyx_Buffer __pyx_pybuffer_loss_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_outflow_direction_block;
  __Pyx_Buffer __pyx_pybuffer_outflow_direction_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_outflow_weights_block;
  __Pyx_Buffer __pyx_pybuffer_outflow_weights_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_source_block;
  __Pyx_Buffer __pyx_pybuffer_source_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stream_block;
  __Pyx_Buffer __pyx_pybuffer_stream_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  PyArrayObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  PyArrayObject *__pyx_t_16 = NULL;
  PyArrayObject *__pyx_t_17 = NULL;
  Py_ssize_t __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  std::deque<int> ::iterator __pyx_t_22;
  size_t __pyx_t_23;
  size_t __pyx_t_24;
  int __pyx_t_25[8];
  int __pyx_t_26[8];
  int __pyx_t_27[8];
  int __pyx_t_28;
  int __pyx_t_29;
  int __pyx_t_30;
  int __pyx_t_31;
  int __pyx_t_32;
  int __pyx_t_33;
  int __pyx_t_34;
  int __pyx_t_35;
  int __pyx_t_36;
  int __pyx_t_37;
  int __pyx_t_38;
  int __pyx_t_39;
  int __pyx_t_40;
  int __pyx_t_41;
  int __pyx_t_42;
  int __pyx_t_43;
  int __pyx_t_44;
  int __pyx_t_45;
  int __pyx_t_46;
  int __pyx_t_47;
  int __pyx_t_48;
  int __pyx_t_49;
  int __pyx_t_50;
  int __pyx_t_51;
  int __pyx_t_52;
  int __pyx_t_53;
  int __pyx_t_54;
  int __pyx_t_55;
  int __pyx_t_56;
  int __pyx_t_57;
  int __pyx_t_58;
  int __pyx_t_59;
  int __pyx_t_60;
  int __pyx_t_61;
  int __pyx_t_62;
  int __pyx_t_63;
  int __pyx_t_64;
  int __pyx_t_65;
  int __pyx_t_66;
  int __pyx_t_67;
  int __pyx_t_68;
  int __pyx_t_69;
  int __pyx_t_70;
  int __pyx_t_71;
  int __pyx_t_72;
  int __pyx_t_73;
  int __pyx_t_74;
  int __pyx_t_75;
  int __pyx_t_76;
  int __pyx_t_77;
  int __pyx_t_78;
  int __pyx_t_79;
  int __pyx_t_80;
  int __pyx_t_81;
  int __pyx_t_82;
  int __pyx_t_83;
  int __pyx_t_84;
  int __pyx_t_85;
  int __pyx_t_86;
  int __pyx_t_87;
  int __pyx_t_88;
  int __pyx_t_89;
  long __pyx_t_90;
  int __pyx_t_91;
  int __pyx_t_92;
  int __pyx_t_93;
  int __pyx_t_94;
  int __pyx_t_95;
  int __pyx_t_96;
  int __pyx_t_97;
  int __pyx_t_98;
  int __pyx_t_99;
  int __pyx_t_100;
  int __pyx_t_101;
  int __pyx_t_102;
  int __pyx_t_103;
  int __pyx_t_104;
  int __pyx_t_105;
  int __pyx_t_106;
  int __pyx_t_107;
  int __pyx_t_108;
  int __pyx_t_109;
  int __pyx_t_110;
  int __pyx_t_111;
  int __pyx_t_112;
  int __pyx_t_113;
  int __pyx_t_114;
  int __pyx_t_115;
  int __pyx_t_116;
  int __pyx_t_117;
  int __pyx_t_118;
  int __pyx_t_119;
  int __pyx_t_120;
  int __pyx_t_121;
  int __pyx_t_122;
  int __pyx_t_123;
  int __pyx_t_124;
  int __pyx_t_125;
  int __pyx_t_126;
  int __pyx_t_127;
  int __pyx_t_128;
  int __pyx_t_129;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_transport", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_stream_uri = __pyx_optional_args->stream_uri;
    }
  }
  __pyx_pybuffer_outflow_direction_block.pybuffer.buf = NULL;
  __pyx_pybuffer_outflow_direction_block.refcount = 0;
  __pyx_pybuffernd_outflow_direction_block.data = NULL;
  __pyx_pybuffernd_outflow_direction_block.rcbuffer = &__pyx_pybuffer_outflow_direction_block;
  __pyx_pybuffer_outflow_weights_block.pybuffer.buf = NULL;
  __pyx_pybuffer_outflow_weights_block.refcount = 0;
  __pyx_pybuffernd_outflow_weights_block.data = NULL;
  __pyx_pybuffernd_outflow_weights_block.rcbuffer = &__pyx_pybuffer_outflow_weights_block;
  __pyx_pybuffer_source_block.pybuffer.buf = NULL;
  __pyx_pybuffer_source_block.refcount = 0;
  __pyx_pybuffernd_source_block.data = NULL;
  __pyx_pybuffernd_source_block.rcbuffer = &__pyx_pybuffer_source_block;
  __pyx_pybuffer_absorption_rate_block.pybuffer.buf = NULL;
  __pyx_pybuffer_absorption_rate_block.refcount = 0;
  __pyx_pybuffernd_absorption_rate_block.data = NULL;
  __pyx_pybuffernd_absorption_rate_block.rcbuffer = &__pyx_pybuffer_absorption_rate_block;
  __pyx_pybuffer_loss_block.pybuffer.buf = NULL;
  __pyx_pybuffer_loss_block.refcount = 0;
  __pyx_pybuffernd_loss_block.data = NULL;
  __pyx_pybuffernd_loss_block.rcbuffer = &__pyx_pybuffer_loss_block;
  __pyx_pybuffer_flux_block.pybuffer.buf = NULL;
  __pyx_pybuffer_flux_block.refcount = 0;
  __pyx_pybuffernd_flux_block.data = NULL;
  __pyx_pybuffernd_flux_block.rcbuffer = &__pyx_pybuffer_flux_block;
  __pyx_pybuffer_stream_block.pybuffer.buf = NULL;
  __pyx_pybuffer_stream_block.refcount = 0;
  __pyx_pybuffernd_stream_block.data = NULL;
  __pyx_pybuffernd_stream_block.rcbuffer = &__pyx_pybuffer_stream_block;
  __pyx_pybuffer_cache_dirty.pybuffer.buf = NULL;
  __pyx_pybuffer_cache_dirty.refcount = 0;
  __pyx_pybuffernd_cache_dirty.data = NULL;
  __pyx_pybuffernd_cache_dirty.rcbuffer = &__pyx_pybuffer_cache_dirty;

  /* "pygeoprocessing\routing\routing_core.pyx":221
 *     #Pass transport
 *     cdef time_t start
 *     time(&start)             # <<<<<<<<<<<<<<
 * 
 *     #Create output arrays for loss and flux
 */
  time((&__pyx_v_start));

  /* "pygeoprocessing\routing\routing_core.pyx":224
 * 
 *     #Create output arrays for loss and flux
 *     outflow_direction_dataset = gdal.Open(outflow_direction_uri)             # <<<<<<<<<<<<<<
 *     cdef int n_cols = outflow_direction_dataset.RasterXSize
 *     cdef int n_rows = outflow_direction_dataset.RasterYSize
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Open); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_outflow_direction_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_outflow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_outflow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_outflow_direction_uri);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_outflow_direction_dataset = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":225
 *     #Create output arrays for loss and flux
 *     outflow_direction_dataset = gdal.Open(outflow_direction_uri)
 *     cdef int n_cols = outflow_direction_dataset.RasterXSize             # <<<<<<<<<<<<<<
 *     cdef int n_rows = outflow_direction_dataset.RasterYSize
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_outflow_direction_dataset, __pyx_n_s_RasterXSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n_cols = __pyx_t_5;

  /* "pygeoprocessing\routing\routing_core.pyx":226
 *     outflow_direction_dataset = gdal.Open(outflow_direction_uri)
 *     cdef int n_cols = outflow_direction_dataset.RasterXSize
 *     cdef int n_rows = outflow_direction_dataset.RasterYSize             # <<<<<<<<<<<<<<
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_outflow_direction_dataset, __pyx_n_s_RasterYSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n_rows = __pyx_t_5;

  /* "pygeoprocessing\routing\routing_core.pyx":227
 *     cdef int n_cols = outflow_direction_dataset.RasterXSize
 *     cdef int n_rows = outflow_direction_dataset.RasterYSize
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_outflow_direction_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_outflow_direction_band = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":230
 * 
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = outflow_direction_band.GetBlockSize()             # <<<<<<<<<<<<<<
 * 
 *     #center point of global index
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_outflow_direction_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_2), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_block_col_size = __pyx_t_5;
  __pyx_v_block_row_size = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":244
 * 
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":245
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":244
 * 
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 */
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);

  /* "pygeoprocessing\routing\routing_core.pyx":245
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":244
 * 
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn_npy_int8, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_outflow_direction_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_outflow_direction_block.diminfo[0].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_outflow_direction_block.diminfo[0].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_outflow_direction_block.diminfo[1].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_outflow_direction_block.diminfo[1].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_outflow_direction_block.diminfo[2].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_outflow_direction_block.diminfo[2].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_outflow_direction_block.diminfo[3].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_outflow_direction_block.diminfo[3].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_outflow_direction_block = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":246
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] source_block =numpy.zeros(
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":247
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] source_block =numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_8 = 0;
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":246
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] source_block =numpy.zeros(
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygeoprocessing\routing\routing_core.pyx":247
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] source_block =numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":246
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] source_block =numpy.zeros(
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_outflow_weights_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_outflow_weights_block.diminfo[0].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_outflow_weights_block.diminfo[0].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_outflow_weights_block.diminfo[1].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_outflow_weights_block.diminfo[1].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_outflow_weights_block.diminfo[2].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_outflow_weights_block.diminfo[2].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_outflow_weights_block.diminfo[3].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_outflow_weights_block.diminfo[3].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_11 = 0;
  __pyx_v_outflow_weights_block = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":248
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] source_block =numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] absorption_rate_block = numpy.zeros(
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":249
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] source_block =numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] absorption_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_8 = 0;
  __pyx_t_2 = 0;
  __pyx_t_9 = 0;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":248
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] source_block =numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] absorption_rate_block = numpy.zeros(
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygeoprocessing\routing\routing_core.pyx":249
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] source_block =numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] absorption_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_float32); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":248
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] source_block =numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] absorption_rate_block = numpy.zeros(
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_12 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_source_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_source_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_source_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_source_block.diminfo[0].strides = __pyx_pybuffernd_source_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_source_block.diminfo[0].shape = __pyx_pybuffernd_source_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_source_block.diminfo[1].strides = __pyx_pybuffernd_source_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_source_block.diminfo[1].shape = __pyx_pybuffernd_source_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_source_block.diminfo[2].strides = __pyx_pybuffernd_source_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_source_block.diminfo[2].shape = __pyx_pybuffernd_source_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_source_block.diminfo[3].strides = __pyx_pybuffernd_source_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_source_block.diminfo[3].shape = __pyx_pybuffernd_source_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_12 = 0;
  __pyx_v_source_block = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":250
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] source_block =numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] absorption_rate_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] loss_block = numpy.zeros(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":251
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] absorption_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] loss_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":250
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] source_block =numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] absorption_rate_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] loss_block = numpy.zeros(
 */
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);

  /* "pygeoprocessing\routing\routing_core.pyx":251
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] absorption_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] loss_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":250
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] source_block =numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] absorption_rate_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] loss_block = numpy.zeros(
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_absorption_rate_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_absorption_rate_block.diminfo[0].strides = __pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_absorption_rate_block.diminfo[0].shape = __pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_absorption_rate_block.diminfo[1].strides = __pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_absorption_rate_block.diminfo[1].shape = __pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_absorption_rate_block.diminfo[2].strides = __pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_absorption_rate_block.diminfo[2].shape = __pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_absorption_rate_block.diminfo[3].strides = __pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_absorption_rate_block.diminfo[3].shape = __pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_13 = 0;
  __pyx_v_absorption_rate_block = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":252
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] absorption_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] loss_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flux_block = numpy.zeros(
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":253
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] loss_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flux_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":252
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] absorption_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] loss_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flux_block = numpy.zeros(
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pygeoprocessing\routing\routing_core.pyx":253
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] loss_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flux_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":252
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] absorption_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] loss_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flux_block = numpy.zeros(
 */
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_9);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_loss_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_loss_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_loss_block.diminfo[0].strides = __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_loss_block.diminfo[0].shape = __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_loss_block.diminfo[1].strides = __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_loss_block.diminfo[1].shape = __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_loss_block.diminfo[2].strides = __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_loss_block.diminfo[2].shape = __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_loss_block.diminfo[3].strides = __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_loss_block.diminfo[3].shape = __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_14 = 0;
  __pyx_v_loss_block = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":254
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] loss_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flux_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] stream_block = numpy.zeros(
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":255
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flux_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] stream_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 */
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_9 = 0;
  __pyx_t_3 = 0;
  __pyx_t_8 = 0;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":254
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] loss_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flux_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] stream_block = numpy.zeros(
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":255
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flux_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] stream_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":254
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] loss_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flux_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] stream_block = numpy.zeros(
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flux_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_flux_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_flux_block.diminfo[0].strides = __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flux_block.diminfo[0].shape = __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flux_block.diminfo[1].strides = __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flux_block.diminfo[1].shape = __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_flux_block.diminfo[2].strides = __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_flux_block.diminfo[2].shape = __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_flux_block.diminfo[3].strides = __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_flux_block.diminfo[3].shape = __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_15 = 0;
  __pyx_v_flux_block = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":256
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flux_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] stream_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":257
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] stream_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)             # <<<<<<<<<<<<<<
 * 
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=2] cache_dirty = numpy.zeros(
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":256
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flux_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] stream_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 * 
 */
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);

  /* "pygeoprocessing\routing\routing_core.pyx":257
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] stream_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)             # <<<<<<<<<<<<<<
 * 
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=2] cache_dirty = numpy.zeros(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":256
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flux_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] stream_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_16 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stream_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn_npy_int8, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_stream_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_stream_block.diminfo[0].strides = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stream_block.diminfo[0].shape = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_stream_block.diminfo[1].strides = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_stream_block.diminfo[1].shape = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_stream_block.diminfo[2].strides = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_stream_block.diminfo[2].shape = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_stream_block.diminfo[3].strides = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_stream_block.diminfo[3].shape = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_16 = 0;
  __pyx_v_stream_block = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":259
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 * 
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":260
 * 
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)             # <<<<<<<<<<<<<<
 * 
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":259
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 * 
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)
 * 
 */
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":260
 * 
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)             # <<<<<<<<<<<<<<
 * 
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":259
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 * 
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_17 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer, (PyObject*)__pyx_t_17, &__Pyx_TypeInfo_nn_npy_int8, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_cache_dirty = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_cache_dirty.diminfo[0].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cache_dirty.diminfo[0].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cache_dirty.diminfo[1].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cache_dirty.diminfo[1].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_17 = 0;
  __pyx_v_cache_dirty = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":262
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)
 * 
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         outflow_direction_uri)
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":263
 * 
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_direction_uri)             # <<<<<<<<<<<<<<
 * 
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)
 */
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_outflow_direction_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_outflow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_outflow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_outflow_direction_uri);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":262
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)
 * 
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         outflow_direction_uri)
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_outflow_direction_nodata = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":265
 *         outflow_direction_uri)
 * 
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)             # <<<<<<<<<<<<<<
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)
 *     cdef int outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_Open); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_outflow_weights_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __Pyx_GIVEREF(__pyx_t_8); __pyx_t_8 = NULL;
    __Pyx_INCREF(__pyx_v_outflow_weights_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_outflow_weights_uri);
    __Pyx_GIVEREF(__pyx_v_outflow_weights_uri);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_outflow_weights_dataset = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":266
 * 
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_weights_uri)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_outflow_weights_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_outflow_weights_band = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":267
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)
 *     cdef int outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         outflow_weights_uri)
 *     source_dataset = gdal.Open(source_uri)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":268
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)
 *     cdef int outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_weights_uri)             # <<<<<<<<<<<<<<
 *     source_dataset = gdal.Open(source_uri)
 *     source_band = source_dataset.GetRasterBand(1)
 */
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_outflow_weights_uri); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_outflow_weights_uri);
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_outflow_weights_uri);
    __Pyx_GIVEREF(__pyx_v_outflow_weights_uri);
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":267
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)
 *     cdef int outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         outflow_weights_uri)
 *     source_dataset = gdal.Open(source_uri)
 */
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_outflow_weights_nodata = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":269
 *     cdef int outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_weights_uri)
 *     source_dataset = gdal.Open(source_uri)             # <<<<<<<<<<<<<<
 *     source_band = source_dataset.GetRasterBand(1)
 *     cdef int source_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Open); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_source_uri); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_source_uri);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_source_uri);
    __Pyx_GIVEREF(__pyx_v_source_uri);
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_2, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_source_dataset = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":270
 *         outflow_weights_uri)
 *     source_dataset = gdal.Open(source_uri)
 *     source_band = source_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int source_nodata = pygeoprocessing.get_nodata_from_uri(
 *         source_uri)
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_source_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_source_band = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":271
 *     source_dataset = gdal.Open(source_uri)
 *     source_band = source_dataset.GetRasterBand(1)
 *     cdef int source_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         source_uri)
 *     absorption_rate_dataset = gdal.Open(absorption_rate_uri)
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":272
 *     source_band = source_dataset.GetRasterBand(1)
 *     cdef int source_nodata = pygeoprocessing.get_nodata_from_uri(
 *         source_uri)             # <<<<<<<<<<<<<<
 *     absorption_rate_dataset = gdal.Open(absorption_rate_uri)
 *     absorption_rate_band = absorption_rate_dataset.GetRasterBand(1)
 */
  __pyx_t_9 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_9) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_source_uri); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9); __Pyx_GIVEREF(__pyx_t_9); __pyx_t_9 = NULL;
    __Pyx_INCREF(__pyx_v_source_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_source_uri);
    __Pyx_GIVEREF(__pyx_v_source_uri);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":271
 *     source_dataset = gdal.Open(source_uri)
 *     source_band = source_dataset.GetRasterBand(1)
 *     cdef int source_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         source_uri)
 *     absorption_rate_dataset = gdal.Open(absorption_rate_uri)
 */
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_source_nodata = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":273
 *     cdef int source_nodata = pygeoprocessing.get_nodata_from_uri(
 *         source_uri)
 *     absorption_rate_dataset = gdal.Open(absorption_rate_uri)             # <<<<<<<<<<<<<<
 *     absorption_rate_band = absorption_rate_dataset.GetRasterBand(1)
 *     cdef int absorption_rate_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Open); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_absorption_rate_uri); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
  } else {
    __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_absorption_rate_uri);
    PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_absorption_rate_uri);
    __Pyx_GIVEREF(__pyx_v_absorption_rate_uri);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_absorption_rate_dataset = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":274
 *         source_uri)
 *     absorption_rate_dataset = gdal.Open(absorption_rate_uri)
 *     absorption_rate_band = absorption_rate_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int absorption_rate_nodata = pygeoprocessing.get_nodata_from_uri(
 *         absorption_rate_uri)
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_absorption_rate_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_absorption_rate_band = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":275
 *     absorption_rate_dataset = gdal.Open(absorption_rate_uri)
 *     absorption_rate_band = absorption_rate_dataset.GetRasterBand(1)
 *     cdef int absorption_rate_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         absorption_rate_uri)
 * 
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":276
 *     absorption_rate_band = absorption_rate_dataset.GetRasterBand(1)
 *     cdef int absorption_rate_nodata = pygeoprocessing.get_nodata_from_uri(
 *         absorption_rate_uri)             # <<<<<<<<<<<<<<
 * 
 *     #Create output arrays for loss and flux
 */
  __pyx_t_8 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_absorption_rate_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_8); __Pyx_GIVEREF(__pyx_t_8); __pyx_t_8 = NULL;
    __Pyx_INCREF(__pyx_v_absorption_rate_uri);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_absorption_rate_uri);
    __Pyx_GIVEREF(__pyx_v_absorption_rate_uri);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":275
 *     absorption_rate_dataset = gdal.Open(absorption_rate_uri)
 *     absorption_rate_band = absorption_rate_dataset.GetRasterBand(1)
 *     cdef int absorption_rate_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         absorption_rate_uri)
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_absorption_rate_nodata = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":279
 * 
 *     #Create output arrays for loss and flux
 *     transport_nodata = -1.0             # <<<<<<<<<<<<<<
 *     loss_dataset = pygeoprocessing.new_raster_from_base(
 *         outflow_direction_dataset, loss_uri, 'GTiff', transport_nodata,
 */
  __pyx_v_transport_nodata = -1.0;

  /* "pygeoprocessing\routing\routing_core.pyx":280
 *     #Create output arrays for loss and flux
 *     transport_nodata = -1.0
 *     loss_dataset = pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         outflow_direction_dataset, loss_uri, 'GTiff', transport_nodata,
 *         gdal.GDT_Float32)
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":281
 *     transport_nodata = -1.0
 *     loss_dataset = pygeoprocessing.new_raster_from_base(
 *         outflow_direction_dataset, loss_uri, 'GTiff', transport_nodata,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Float32)
 *     loss_band = loss_dataset.GetRasterBand(1)
 */
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_transport_nodata); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);

  /* "pygeoprocessing\routing\routing_core.pyx":282
 *     loss_dataset = pygeoprocessing.new_raster_from_base(
 *         outflow_direction_dataset, loss_uri, 'GTiff', transport_nodata,
 *         gdal.GDT_Float32)             # <<<<<<<<<<<<<<
 *     loss_band = loss_dataset.GetRasterBand(1)
 *     flux_dataset = pygeoprocessing.new_raster_from_base(
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_GDT_Float32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_18 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_18 = 1;
    }
  }
  __pyx_t_3 = PyTuple_New(5+__pyx_t_18); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (__pyx_t_8) {
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __Pyx_GIVEREF(__pyx_t_8); __pyx_t_8 = NULL;
  }
  __Pyx_INCREF(__pyx_v_outflow_direction_dataset);
  PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_18, __pyx_v_outflow_direction_dataset);
  __Pyx_GIVEREF(__pyx_v_outflow_direction_dataset);
  __Pyx_INCREF(__pyx_v_loss_uri);
  PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_18, __pyx_v_loss_uri);
  __Pyx_GIVEREF(__pyx_v_loss_uri);
  __Pyx_INCREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_18, __pyx_n_s_GTiff);
  __Pyx_GIVEREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_18, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_18, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_9 = 0;
  __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_loss_dataset = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":283
 *         outflow_direction_dataset, loss_uri, 'GTiff', transport_nodata,
 *         gdal.GDT_Float32)
 *     loss_band = loss_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flux_dataset = pygeoprocessing.new_raster_from_base(
 *         outflow_direction_dataset, flux_uri, 'GTiff', transport_nodata,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_loss_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_loss_band = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":284
 *         gdal.GDT_Float32)
 *     loss_band = loss_dataset.GetRasterBand(1)
 *     flux_dataset = pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         outflow_direction_dataset, flux_uri, 'GTiff', transport_nodata,
 *         gdal.GDT_Float32)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":285
 *     loss_band = loss_dataset.GetRasterBand(1)
 *     flux_dataset = pygeoprocessing.new_raster_from_base(
 *         outflow_direction_dataset, flux_uri, 'GTiff', transport_nodata,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Float32)
 *     flux_band = flux_dataset.GetRasterBand(1)
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_transport_nodata); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":286
 *     flux_dataset = pygeoprocessing.new_raster_from_base(
 *         outflow_direction_dataset, flux_uri, 'GTiff', transport_nodata,
 *         gdal.GDT_Float32)             # <<<<<<<<<<<<<<
 *     flux_band = flux_dataset.GetRasterBand(1)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_GDT_Float32); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_18 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_18 = 1;
    }
  }
  __pyx_t_8 = PyTuple_New(5+__pyx_t_18); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (__pyx_t_1) {
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
  }
  __Pyx_INCREF(__pyx_v_outflow_direction_dataset);
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_18, __pyx_v_outflow_direction_dataset);
  __Pyx_GIVEREF(__pyx_v_outflow_direction_dataset);
  __Pyx_INCREF(__pyx_v_flux_uri);
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_18, __pyx_v_flux_uri);
  __Pyx_GIVEREF(__pyx_v_flux_uri);
  __Pyx_INCREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_18, __pyx_n_s_GTiff);
  __Pyx_GIVEREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_18, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 4+__pyx_t_18, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flux_dataset = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":287
 *         outflow_direction_dataset, flux_uri, 'GTiff', transport_nodata,
 *         gdal.GDT_Float32)
 *     flux_band = flux_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cache_dirty[:] = 0
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_flux_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_flux_band = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":289
 *     flux_band = flux_dataset.GetRasterBand(1)
 * 
 *     cache_dirty[:] = 0             # <<<<<<<<<<<<<<
 *     band_list = [outflow_direction_band, outflow_weights_band, source_band, absorption_rate_band, loss_band, flux_band]
 *     block_list = [outflow_direction_block, outflow_weights_block, source_block, absorption_rate_block, loss_block, flux_block]
 */
  if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_cache_dirty), __pyx_int_0, 0, 0, NULL, NULL, &__pyx_slice__11, 0, 0, 0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pygeoprocessing\routing\routing_core.pyx":290
 * 
 *     cache_dirty[:] = 0
 *     band_list = [outflow_direction_band, outflow_weights_band, source_band, absorption_rate_band, loss_band, flux_band]             # <<<<<<<<<<<<<<
 *     block_list = [outflow_direction_block, outflow_weights_block, source_block, absorption_rate_block, loss_block, flux_block]
 *     update_list = [False, False, False, False, True, True]
 */
  __pyx_t_3 = PyList_New(6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_outflow_direction_band);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_outflow_direction_band);
  __Pyx_GIVEREF(__pyx_v_outflow_direction_band);
  __Pyx_INCREF(__pyx_v_outflow_weights_band);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_v_outflow_weights_band);
  __Pyx_GIVEREF(__pyx_v_outflow_weights_band);
  __Pyx_INCREF(__pyx_v_source_band);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_v_source_band);
  __Pyx_GIVEREF(__pyx_v_source_band);
  __Pyx_INCREF(__pyx_v_absorption_rate_band);
  PyList_SET_ITEM(__pyx_t_3, 3, __pyx_v_absorption_rate_band);
  __Pyx_GIVEREF(__pyx_v_absorption_rate_band);
  __Pyx_INCREF(__pyx_v_loss_band);
  PyList_SET_ITEM(__pyx_t_3, 4, __pyx_v_loss_band);
  __Pyx_GIVEREF(__pyx_v_loss_band);
  __Pyx_INCREF(__pyx_v_flux_band);
  PyList_SET_ITEM(__pyx_t_3, 5, __pyx_v_flux_band);
  __Pyx_GIVEREF(__pyx_v_flux_band);
  __pyx_v_band_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":291
 *     cache_dirty[:] = 0
 *     band_list = [outflow_direction_band, outflow_weights_band, source_band, absorption_rate_band, loss_band, flux_band]
 *     block_list = [outflow_direction_block, outflow_weights_block, source_block, absorption_rate_block, loss_block, flux_block]             # <<<<<<<<<<<<<<
 *     update_list = [False, False, False, False, True, True]
 * 
 */
  __pyx_t_3 = PyList_New(6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_outflow_direction_block));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_outflow_direction_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_outflow_direction_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_outflow_weights_block));
  PyList_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_outflow_weights_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_outflow_weights_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_source_block));
  PyList_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_source_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_source_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_absorption_rate_block));
  PyList_SET_ITEM(__pyx_t_3, 3, ((PyObject *)__pyx_v_absorption_rate_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_absorption_rate_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_loss_block));
  PyList_SET_ITEM(__pyx_t_3, 4, ((PyObject *)__pyx_v_loss_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_loss_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_flux_block));
  PyList_SET_ITEM(__pyx_t_3, 5, ((PyObject *)__pyx_v_flux_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_flux_block));
  __pyx_v_block_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":292
 *     band_list = [outflow_direction_band, outflow_weights_band, source_band, absorption_rate_band, loss_band, flux_band]
 *     block_list = [outflow_direction_block, outflow_weights_block, source_block, absorption_rate_block, loss_block, flux_block]
 *     update_list = [False, False, False, False, True, True]             # <<<<<<<<<<<<<<
 * 
 *     cdef int stream_nodata = 0
 */
  __pyx_t_3 = PyList_New(6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_3, 0, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_3, 1, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_3, 2, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_3, 3, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_True);
  PyList_SET_ITEM(__pyx_t_3, 4, Py_True);
  __Pyx_GIVEREF(Py_True);
  __Pyx_INCREF(Py_True);
  PyList_SET_ITEM(__pyx_t_3, 5, Py_True);
  __Pyx_GIVEREF(Py_True);
  __pyx_v_update_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":294
 *     update_list = [False, False, False, False, True, True]
 * 
 *     cdef int stream_nodata = 0             # <<<<<<<<<<<<<<
 *     if stream_uri != None:
 *         stream_dataset = gdal.Open(stream_uri)
 */
  __pyx_v_stream_nodata = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":295
 * 
 *     cdef int stream_nodata = 0
 *     if stream_uri != None:             # <<<<<<<<<<<<<<
 *         stream_dataset = gdal.Open(stream_uri)
 *         stream_band = stream_dataset.GetRasterBand(1)
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_stream_uri, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_19 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_19) {

    /* "pygeoprocessing\routing\routing_core.pyx":296
 *     cdef int stream_nodata = 0
 *     if stream_uri != None:
 *         stream_dataset = gdal.Open(stream_uri)             # <<<<<<<<<<<<<<
 *         stream_band = stream_dataset.GetRasterBand(1)
 *         stream_nodata = pygeoprocessing.get_nodata_from_uri(stream_uri)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Open); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_stream_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_stream_uri);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_stream_uri);
      __Pyx_GIVEREF(__pyx_v_stream_uri);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_stream_dataset = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":297
 *     if stream_uri != None:
 *         stream_dataset = gdal.Open(stream_uri)
 *         stream_band = stream_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *         stream_nodata = pygeoprocessing.get_nodata_from_uri(stream_uri)
 *         band_list.append(stream_band)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_stream_band = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":298
 *         stream_dataset = gdal.Open(stream_uri)
 *         stream_band = stream_dataset.GetRasterBand(1)
 *         stream_nodata = pygeoprocessing.get_nodata_from_uri(stream_uri)             # <<<<<<<<<<<<<<
 *         band_list.append(stream_band)
 *         block_list.append(stream_block)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_stream_uri); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
    } else {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_stream_uri);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_stream_uri);
      __Pyx_GIVEREF(__pyx_v_stream_uri);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_2, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_stream_nodata = __pyx_t_7;

    /* "pygeoprocessing\routing\routing_core.pyx":299
 *         stream_band = stream_dataset.GetRasterBand(1)
 *         stream_nodata = pygeoprocessing.get_nodata_from_uri(stream_uri)
 *         band_list.append(stream_band)             # <<<<<<<<<<<<<<
 *         block_list.append(stream_block)
 *         update_list.append(False)
 */
    __pyx_t_20 = __Pyx_PyList_Append(__pyx_v_band_list, __pyx_v_stream_band); if (unlikely(__pyx_t_20 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pygeoprocessing\routing\routing_core.pyx":300
 *         stream_nodata = pygeoprocessing.get_nodata_from_uri(stream_uri)
 *         band_list.append(stream_band)
 *         block_list.append(stream_block)             # <<<<<<<<<<<<<<
 *         update_list.append(False)
 *     else:
 */
    __pyx_t_20 = __Pyx_PyList_Append(__pyx_v_block_list, ((PyObject *)__pyx_v_stream_block)); if (unlikely(__pyx_t_20 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pygeoprocessing\routing\routing_core.pyx":301
 *         band_list.append(stream_band)
 *         block_list.append(stream_block)
 *         update_list.append(False)             # <<<<<<<<<<<<<<
 *     else:
 *         stream_band = None
 */
    __pyx_t_20 = __Pyx_PyList_Append(__pyx_v_update_list, Py_False); if (unlikely(__pyx_t_20 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  /*else*/ {

    /* "pygeoprocessing\routing\routing_core.pyx":303
 *         update_list.append(False)
 *     else:
 *         stream_band = None             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_stream_band = Py_None;
  }
  __pyx_L5:;

  /* "pygeoprocessing\routing\routing_core.pyx":306
 * 
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size, block_col_size, band_list, block_list, update_list, cache_dirty)             # <<<<<<<<<<<<<<
 * 
 *     #Process flux through the grid
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n_rows); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygeoprocessing\routing\routing_core.pyx":305
 *         stream_band = None
 * 
 *     cdef BlockCache block_cache = BlockCache(             # <<<<<<<<<<<<<<
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size, block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 */
  __pyx_t_21 = PyTuple_New(10); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_21, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_21, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_21, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_21, 4, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_21, 5, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_band_list);
  PyTuple_SET_ITEM(__pyx_t_21, 6, __pyx_v_band_list);
  __Pyx_GIVEREF(__pyx_v_band_list);
  __Pyx_INCREF(__pyx_v_block_list);
  PyTuple_SET_ITEM(__pyx_t_21, 7, __pyx_v_block_list);
  __Pyx_GIVEREF(__pyx_v_block_list);
  __Pyx_INCREF(__pyx_v_update_list);
  PyTuple_SET_ITEM(__pyx_t_21, 8, __pyx_v_update_list);
  __Pyx_GIVEREF(__pyx_v_update_list);
  __Pyx_INCREF(((PyObject *)__pyx_v_cache_dirty));
  PyTuple_SET_ITEM(__pyx_t_21, 9, ((PyObject *)__pyx_v_cache_dirty));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cache_dirty));
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache)), __pyx_t_21, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_v_block_cache = ((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":310
 *     #Process flux through the grid
 *     cdef deque[int] cells_to_process
 *     for cell in sink_cell_deque:             # <<<<<<<<<<<<<<
 *         cells_to_process.push_front(cell)
 *     cdef deque[int] cell_neighbor_to_process
 */
  __pyx_t_22 = __pyx_v_sink_cell_deque.begin();
  for (;;) {
    if (!(__pyx_t_22 != __pyx_v_sink_cell_deque.end())) break;
    __pyx_t_7 = *__pyx_t_22;
    ++__pyx_t_22;
    __pyx_v_cell = __pyx_t_7;

    /* "pygeoprocessing\routing\routing_core.pyx":311
 *     cdef deque[int] cells_to_process
 *     for cell in sink_cell_deque:
 *         cells_to_process.push_front(cell)             # <<<<<<<<<<<<<<
 *     cdef deque[int] cell_neighbor_to_process
 *     for _ in range(cells_to_process.size()):
 */
    __pyx_v_cells_to_process.push_front(__pyx_v_cell);

    /* "pygeoprocessing\routing\routing_core.pyx":310
 *     #Process flux through the grid
 *     cdef deque[int] cells_to_process
 *     for cell in sink_cell_deque:             # <<<<<<<<<<<<<<
 *         cells_to_process.push_front(cell)
 *     cdef deque[int] cell_neighbor_to_process
 */
  }

  /* "pygeoprocessing\routing\routing_core.pyx":313
 *         cells_to_process.push_front(cell)
 *     cdef deque[int] cell_neighbor_to_process
 *     for _ in range(cells_to_process.size()):             # <<<<<<<<<<<<<<
 *         cell_neighbor_to_process.push_front(0)
 * 
 */
  __pyx_t_23 = __pyx_v_cells_to_process.size();
  for (__pyx_t_24 = 0; __pyx_t_24 < __pyx_t_23; __pyx_t_24+=1) {
    __pyx_v__ = __pyx_t_24;

    /* "pygeoprocessing\routing\routing_core.pyx":314
 *     cdef deque[int] cell_neighbor_to_process
 *     for _ in range(cells_to_process.size()):
 *         cell_neighbor_to_process.push_front(0)             # <<<<<<<<<<<<<<
 * 
 *     #Diagonal offsets are based off the following index notation for neighbors
 */
    __pyx_v_cell_neighbor_to_process.push_front(0);
  }

  /* "pygeoprocessing\routing\routing_core.pyx":321
 *     #    5 6 7
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]             # <<<<<<<<<<<<<<
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 */
  __pyx_t_25[0] = 0;
  __pyx_t_25[1] = -1;
  __pyx_t_25[2] = -1;
  __pyx_t_25[3] = -1;
  __pyx_t_25[4] = 0;
  __pyx_t_25[5] = 1;
  __pyx_t_25[6] = 1;
  __pyx_t_25[7] = 1;
  __pyx_v_row_offsets = __pyx_t_25;

  /* "pygeoprocessing\routing\routing_core.pyx":322
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]             # <<<<<<<<<<<<<<
 * 
 *     cdef int *inflow_offsets = [4, 5, 6, 7, 0, 1, 2, 3]
 */
  __pyx_t_26[0] = 1;
  __pyx_t_26[1] = 1;
  __pyx_t_26[2] = 0;
  __pyx_t_26[3] = -1;
  __pyx_t_26[4] = -1;
  __pyx_t_26[5] = -1;
  __pyx_t_26[6] = 0;
  __pyx_t_26[7] = 1;
  __pyx_v_col_offsets = __pyx_t_26;

  /* "pygeoprocessing\routing\routing_core.pyx":324
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 *     cdef int *inflow_offsets = [4, 5, 6, 7, 0, 1, 2, 3]             # <<<<<<<<<<<<<<
 * 
 *     cdef int neighbor_direction
 */
  __pyx_t_27[0] = 4;
  __pyx_t_27[1] = 5;
  __pyx_t_27[2] = 6;
  __pyx_t_27[3] = 7;
  __pyx_t_27[4] = 0;
  __pyx_t_27[5] = 1;
  __pyx_t_27[6] = 2;
  __pyx_t_27[7] = 3;
  __pyx_v_inflow_offsets = __pyx_t_27;

  /* "pygeoprocessing\routing\routing_core.pyx":332
 *     cdef int current_neighbor_index
 *     cdef int current_index
 *     cdef int absorb_source = (absorption_mode == 'source_and_flux')             # <<<<<<<<<<<<<<
 * 
 *     cdef time_t last_time, current_time
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_absorption_mode, __pyx_n_s_source_and_flux, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_absorb_source = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":335
 * 
 *     cdef time_t last_time, current_time
 *     time(&last_time)             # <<<<<<<<<<<<<<
 *     while cells_to_process.size() > 0:
 *         time(&current_time)
 */
  time((&__pyx_v_last_time));

  /* "pygeoprocessing\routing\routing_core.pyx":336
 *     cdef time_t last_time, current_time
 *     time(&last_time)
 *     while cells_to_process.size() > 0:             # <<<<<<<<<<<<<<
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 */
  while (1) {
    __pyx_t_19 = ((__pyx_v_cells_to_process.size() > 0) != 0);
    if (!__pyx_t_19) break;

    /* "pygeoprocessing\routing\routing_core.pyx":337
 *     time(&last_time)
 *     while cells_to_process.size() > 0:
 *         time(&current_time)             # <<<<<<<<<<<<<<
 *         if current_time - last_time > 5.0:
 *             LOGGER.info('calculate transport cells_to_process.size() = %d' % (cells_to_process.size()))
 */
    time((&__pyx_v_current_time));

    /* "pygeoprocessing\routing\routing_core.pyx":338
 *     while cells_to_process.size() > 0:
 *         time(&current_time)
 *         if current_time - last_time > 5.0:             # <<<<<<<<<<<<<<
 *             LOGGER.info('calculate transport cells_to_process.size() = %d' % (cells_to_process.size()))
 *             last_time = current_time
 */
    __pyx_t_19 = (((__pyx_v_current_time - __pyx_v_last_time) > 5.0) != 0);
    if (__pyx_t_19) {

      /* "pygeoprocessing\routing\routing_core.pyx":339
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 *             LOGGER.info('calculate transport cells_to_process.size() = %d' % (cells_to_process.size()))             # <<<<<<<<<<<<<<
 *             last_time = current_time
 * 
 */
      __pyx_t_21 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_t_21 = __Pyx_PyInt_FromSize_t(__pyx_v_cells_to_process.size()); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_calculate_transport_cells_to_pro, __pyx_t_21); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_t_21 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_21)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_21);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_21) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_21); __Pyx_GIVEREF(__pyx_t_21); __pyx_t_21 = NULL;
        PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":340
 *         if current_time - last_time > 5.0:
 *             LOGGER.info('calculate transport cells_to_process.size() = %d' % (cells_to_process.size()))
 *             last_time = current_time             # <<<<<<<<<<<<<<
 * 
 *         current_index = cells_to_process.front()
 */
      __pyx_v_last_time = __pyx_v_current_time;
      goto __pyx_L12;
    }
    __pyx_L12:;

    /* "pygeoprocessing\routing\routing_core.pyx":342
 *             last_time = current_time
 * 
 *         current_index = cells_to_process.front()             # <<<<<<<<<<<<<<
 *         cells_to_process.pop_front()
 *         with cython.cdivision(True):
 */
    __pyx_v_current_index = __pyx_v_cells_to_process.front();

    /* "pygeoprocessing\routing\routing_core.pyx":343
 * 
 *         current_index = cells_to_process.front()
 *         cells_to_process.pop_front()             # <<<<<<<<<<<<<<
 *         with cython.cdivision(True):
 *             global_row = current_index / n_cols
 */
    __pyx_v_cells_to_process.pop_front();

    /* "pygeoprocessing\routing\routing_core.pyx":345
 *         cells_to_process.pop_front()
 *         with cython.cdivision(True):
 *             global_row = current_index / n_cols             # <<<<<<<<<<<<<<
 *             global_col = current_index % n_cols
 *         #see if we need to update the row cache
 */
    __pyx_v_global_row = (__pyx_v_current_index / __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":346
 *         with cython.cdivision(True):
 *             global_row = current_index / n_cols
 *             global_col = current_index % n_cols             # <<<<<<<<<<<<<<
 *         #see if we need to update the row cache
 *         block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)
 */
    __pyx_v_global_col = (__pyx_v_current_index % __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":348
 *             global_col = current_index % n_cols
 *         #see if we need to update the row cache
 *         block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)             # <<<<<<<<<<<<<<
 * 
 *         #Ensure we are working on a valid pixel, if not set everything to 0
 */
    ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_global_row, __pyx_v_global_col, (&__pyx_v_row_index), (&__pyx_v_col_index), (&__pyx_v_row_block_offset), (&__pyx_v_col_block_offset));

    /* "pygeoprocessing\routing\routing_core.pyx":351
 * 
 *         #Ensure we are working on a valid pixel, if not set everything to 0
 *         if source_block[row_index, col_index, row_block_offset, col_block_offset] == source_nodata:             # <<<<<<<<<<<<<<
 *             flux_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *             loss_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 */
    __pyx_t_7 = __pyx_v_row_index;
    __pyx_t_5 = __pyx_v_col_index;
    __pyx_t_28 = __pyx_v_row_block_offset;
    __pyx_t_29 = __pyx_v_col_block_offset;
    __pyx_t_19 = (((*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_source_block.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_source_block.diminfo[0].strides, __pyx_t_5, __pyx_pybuffernd_source_block.diminfo[1].strides, __pyx_t_28, __pyx_pybuffernd_source_block.diminfo[2].strides, __pyx_t_29, __pyx_pybuffernd_source_block.diminfo[3].strides)) == __pyx_v_source_nodata) != 0);
    if (__pyx_t_19) {

      /* "pygeoprocessing\routing\routing_core.pyx":352
 *         #Ensure we are working on a valid pixel, if not set everything to 0
 *         if source_block[row_index, col_index, row_block_offset, col_block_offset] == source_nodata:
 *             flux_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0             # <<<<<<<<<<<<<<
 *             loss_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *             cache_dirty[row_index, col_index] = 1
 */
      __pyx_t_30 = __pyx_v_row_index;
      __pyx_t_31 = __pyx_v_col_index;
      __pyx_t_32 = __pyx_v_row_block_offset;
      __pyx_t_33 = __pyx_v_col_block_offset;
      *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.buf, __pyx_t_30, __pyx_pybuffernd_flux_block.diminfo[0].strides, __pyx_t_31, __pyx_pybuffernd_flux_block.diminfo[1].strides, __pyx_t_32, __pyx_pybuffernd_flux_block.diminfo[2].strides, __pyx_t_33, __pyx_pybuffernd_flux_block.diminfo[3].strides) = 0.0;

      /* "pygeoprocessing\routing\routing_core.pyx":353
 *         if source_block[row_index, col_index, row_block_offset, col_block_offset] == source_nodata:
 *             flux_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *             loss_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0             # <<<<<<<<<<<<<<
 *             cache_dirty[row_index, col_index] = 1
 * 
 */
      __pyx_t_34 = __pyx_v_row_index;
      __pyx_t_35 = __pyx_v_col_index;
      __pyx_t_36 = __pyx_v_row_block_offset;
      __pyx_t_37 = __pyx_v_col_block_offset;
      *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.buf, __pyx_t_34, __pyx_pybuffernd_loss_block.diminfo[0].strides, __pyx_t_35, __pyx_pybuffernd_loss_block.diminfo[1].strides, __pyx_t_36, __pyx_pybuffernd_loss_block.diminfo[2].strides, __pyx_t_37, __pyx_pybuffernd_loss_block.diminfo[3].strides) = 0.0;

      /* "pygeoprocessing\routing\routing_core.pyx":354
 *             flux_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *             loss_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *             cache_dirty[row_index, col_index] = 1             # <<<<<<<<<<<<<<
 * 
 *         #We have real data that make the absorption array nodata sometimes
 */
      __pyx_t_38 = __pyx_v_row_index;
      __pyx_t_39 = __pyx_v_col_index;
      *__Pyx_BufPtrStrided2d(npy_int8 *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_39, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;
      goto __pyx_L13;
    }
    __pyx_L13:;

    /* "pygeoprocessing\routing\routing_core.pyx":359
 *         #right now the best thing to do is treat it as 0.0 so everything else
 *         #routes
 *         if absorption_rate_block[row_index, col_index, row_block_offset, col_block_offset] == absorption_rate_nodata:             # <<<<<<<<<<<<<<
 *             absorption_rate_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 * 
 */
    __pyx_t_40 = __pyx_v_row_index;
    __pyx_t_41 = __pyx_v_col_index;
    __pyx_t_42 = __pyx_v_row_block_offset;
    __pyx_t_43 = __pyx_v_col_block_offset;
    __pyx_t_19 = (((*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer.buf, __pyx_t_40, __pyx_pybuffernd_absorption_rate_block.diminfo[0].strides, __pyx_t_41, __pyx_pybuffernd_absorption_rate_block.diminfo[1].strides, __pyx_t_42, __pyx_pybuffernd_absorption_rate_block.diminfo[2].strides, __pyx_t_43, __pyx_pybuffernd_absorption_rate_block.diminfo[3].strides)) == __pyx_v_absorption_rate_nodata) != 0);
    if (__pyx_t_19) {

      /* "pygeoprocessing\routing\routing_core.pyx":360
 *         #routes
 *         if absorption_rate_block[row_index, col_index, row_block_offset, col_block_offset] == absorption_rate_nodata:
 *             absorption_rate_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0             # <<<<<<<<<<<<<<
 * 
 *         if flux_block[row_index, col_index, row_block_offset, col_block_offset] == transport_nodata:
 */
      __pyx_t_44 = __pyx_v_row_index;
      __pyx_t_45 = __pyx_v_col_index;
      __pyx_t_46 = __pyx_v_row_block_offset;
      __pyx_t_47 = __pyx_v_col_block_offset;
      *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer.buf, __pyx_t_44, __pyx_pybuffernd_absorption_rate_block.diminfo[0].strides, __pyx_t_45, __pyx_pybuffernd_absorption_rate_block.diminfo[1].strides, __pyx_t_46, __pyx_pybuffernd_absorption_rate_block.diminfo[2].strides, __pyx_t_47, __pyx_pybuffernd_absorption_rate_block.diminfo[3].strides) = 0.0;
      goto __pyx_L14;
    }
    __pyx_L14:;

    /* "pygeoprocessing\routing\routing_core.pyx":362
 *             absorption_rate_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 * 
 *         if flux_block[row_index, col_index, row_block_offset, col_block_offset] == transport_nodata:             # <<<<<<<<<<<<<<
 *             if stream_block[row_index, col_index, row_block_offset, col_block_offset] == 0:
 *                 flux_block[row_index, col_index, row_block_offset, col_block_offset] = (
 */
    __pyx_t_48 = __pyx_v_row_index;
    __pyx_t_49 = __pyx_v_col_index;
    __pyx_t_50 = __pyx_v_row_block_offset;
    __pyx_t_51 = __pyx_v_col_block_offset;
    __pyx_t_19 = (((*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.buf, __pyx_t_48, __pyx_pybuffernd_flux_block.diminfo[0].strides, __pyx_t_49, __pyx_pybuffernd_flux_block.diminfo[1].strides, __pyx_t_50, __pyx_pybuffernd_flux_block.diminfo[2].strides, __pyx_t_51, __pyx_pybuffernd_flux_block.diminfo[3].strides)) == __pyx_v_transport_nodata) != 0);
    if (__pyx_t_19) {

      /* "pygeoprocessing\routing\routing_core.pyx":363
 * 
 *         if flux_block[row_index, col_index, row_block_offset, col_block_offset] == transport_nodata:
 *             if stream_block[row_index, col_index, row_block_offset, col_block_offset] == 0:             # <<<<<<<<<<<<<<
 *                 flux_block[row_index, col_index, row_block_offset, col_block_offset] = (
 *                     source_block[row_index, col_index, row_block_offset, col_block_offset])
 */
      __pyx_t_52 = __pyx_v_row_index;
      __pyx_t_53 = __pyx_v_col_index;
      __pyx_t_54 = __pyx_v_row_block_offset;
      __pyx_t_55 = __pyx_v_col_block_offset;
      __pyx_t_19 = (((*__Pyx_BufPtrStrided4d(npy_int8 *, __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.buf, __pyx_t_52, __pyx_pybuffernd_stream_block.diminfo[0].strides, __pyx_t_53, __pyx_pybuffernd_stream_block.diminfo[1].strides, __pyx_t_54, __pyx_pybuffernd_stream_block.diminfo[2].strides, __pyx_t_55, __pyx_pybuffernd_stream_block.diminfo[3].strides)) == 0) != 0);
      if (__pyx_t_19) {

        /* "pygeoprocessing\routing\routing_core.pyx":365
 *             if stream_block[row_index, col_index, row_block_offset, col_block_offset] == 0:
 *                 flux_block[row_index, col_index, row_block_offset, col_block_offset] = (
 *                     source_block[row_index, col_index, row_block_offset, col_block_offset])             # <<<<<<<<<<<<<<
 *             else:
 *                 flux_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 */
        __pyx_t_56 = __pyx_v_row_index;
        __pyx_t_57 = __pyx_v_col_index;
        __pyx_t_58 = __pyx_v_row_block_offset;
        __pyx_t_59 = __pyx_v_col_block_offset;

        /* "pygeoprocessing\routing\routing_core.pyx":364
 *         if flux_block[row_index, col_index, row_block_offset, col_block_offset] == transport_nodata:
 *             if stream_block[row_index, col_index, row_block_offset, col_block_offset] == 0:
 *                 flux_block[row_index, col_index, row_block_offset, col_block_offset] = (             # <<<<<<<<<<<<<<
 *                     source_block[row_index, col_index, row_block_offset, col_block_offset])
 *             else:
 */
        __pyx_t_60 = __pyx_v_row_index;
        __pyx_t_61 = __pyx_v_col_index;
        __pyx_t_62 = __pyx_v_row_block_offset;
        __pyx_t_63 = __pyx_v_col_block_offset;
        *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.buf, __pyx_t_60, __pyx_pybuffernd_flux_block.diminfo[0].strides, __pyx_t_61, __pyx_pybuffernd_flux_block.diminfo[1].strides, __pyx_t_62, __pyx_pybuffernd_flux_block.diminfo[2].strides, __pyx_t_63, __pyx_pybuffernd_flux_block.diminfo[3].strides) = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_source_block.rcbuffer->pybuffer.buf, __pyx_t_56, __pyx_pybuffernd_source_block.diminfo[0].strides, __pyx_t_57, __pyx_pybuffernd_source_block.diminfo[1].strides, __pyx_t_58, __pyx_pybuffernd_source_block.diminfo[2].strides, __pyx_t_59, __pyx_pybuffernd_source_block.diminfo[3].strides));
        goto __pyx_L16;
      }
      /*else*/ {

        /* "pygeoprocessing\routing\routing_core.pyx":367
 *                     source_block[row_index, col_index, row_block_offset, col_block_offset])
 *             else:
 *                 flux_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0             # <<<<<<<<<<<<<<
 *             loss_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *             cache_dirty[row_index, col_index] = 1
 */
        __pyx_t_64 = __pyx_v_row_index;
        __pyx_t_65 = __pyx_v_col_index;
        __pyx_t_66 = __pyx_v_row_block_offset;
        __pyx_t_67 = __pyx_v_col_block_offset;
        *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.buf, __pyx_t_64, __pyx_pybuffernd_flux_block.diminfo[0].strides, __pyx_t_65, __pyx_pybuffernd_flux_block.diminfo[1].strides, __pyx_t_66, __pyx_pybuffernd_flux_block.diminfo[2].strides, __pyx_t_67, __pyx_pybuffernd_flux_block.diminfo[3].strides) = 0.0;
      }
      __pyx_L16:;

      /* "pygeoprocessing\routing\routing_core.pyx":368
 *             else:
 *                 flux_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *             loss_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0             # <<<<<<<<<<<<<<
 *             cache_dirty[row_index, col_index] = 1
 *             if absorb_source:
 */
      __pyx_t_68 = __pyx_v_row_index;
      __pyx_t_69 = __pyx_v_col_index;
      __pyx_t_70 = __pyx_v_row_block_offset;
      __pyx_t_71 = __pyx_v_col_block_offset;
      *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.buf, __pyx_t_68, __pyx_pybuffernd_loss_block.diminfo[0].strides, __pyx_t_69, __pyx_pybuffernd_loss_block.diminfo[1].strides, __pyx_t_70, __pyx_pybuffernd_loss_block.diminfo[2].strides, __pyx_t_71, __pyx_pybuffernd_loss_block.diminfo[3].strides) = 0.0;

      /* "pygeoprocessing\routing\routing_core.pyx":369
 *                 flux_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *             loss_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *             cache_dirty[row_index, col_index] = 1             # <<<<<<<<<<<<<<
 *             if absorb_source:
 *                 absorption_rate = absorption_rate_block[row_index, col_index, row_block_offset, col_block_offset]
 */
      __pyx_t_72 = __pyx_v_row_index;
      __pyx_t_73 = __pyx_v_col_index;
      *__Pyx_BufPtrStrided2d(npy_int8 *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_72, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_73, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;

      /* "pygeoprocessing\routing\routing_core.pyx":370
 *             loss_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *             cache_dirty[row_index, col_index] = 1
 *             if absorb_source:             # <<<<<<<<<<<<<<
 *                 absorption_rate = absorption_rate_block[row_index, col_index, row_block_offset, col_block_offset]
 *                 loss_block[row_index, col_index, row_block_offset, col_block_offset] = (
 */
      __pyx_t_19 = (__pyx_v_absorb_source != 0);
      if (__pyx_t_19) {

        /* "pygeoprocessing\routing\routing_core.pyx":371
 *             cache_dirty[row_index, col_index] = 1
 *             if absorb_source:
 *                 absorption_rate = absorption_rate_block[row_index, col_index, row_block_offset, col_block_offset]             # <<<<<<<<<<<<<<
 *                 loss_block[row_index, col_index, row_block_offset, col_block_offset] = (
 *                     absorption_rate * flux_block[row_index, col_index, row_block_offset, col_block_offset])
 */
        __pyx_t_74 = __pyx_v_row_index;
        __pyx_t_75 = __pyx_v_col_index;
        __pyx_t_76 = __pyx_v_row_block_offset;
        __pyx_t_77 = __pyx_v_col_block_offset;
        __pyx_v_absorption_rate = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer.buf, __pyx_t_74, __pyx_pybuffernd_absorption_rate_block.diminfo[0].strides, __pyx_t_75, __pyx_pybuffernd_absorption_rate_block.diminfo[1].strides, __pyx_t_76, __pyx_pybuffernd_absorption_rate_block.diminfo[2].strides, __pyx_t_77, __pyx_pybuffernd_absorption_rate_block.diminfo[3].strides));

        /* "pygeoprocessing\routing\routing_core.pyx":373
 *                 absorption_rate = absorption_rate_block[row_index, col_index, row_block_offset, col_block_offset]
 *                 loss_block[row_index, col_index, row_block_offset, col_block_offset] = (
 *                     absorption_rate * flux_block[row_index, col_index, row_block_offset, col_block_offset])             # <<<<<<<<<<<<<<
 *                 flux_block[row_index, col_index, row_block_offset, col_block_offset] *= (1 - absorption_rate)
 * 
 */
        __pyx_t_78 = __pyx_v_row_index;
        __pyx_t_79 = __pyx_v_col_index;
        __pyx_t_80 = __pyx_v_row_block_offset;
        __pyx_t_81 = __pyx_v_col_block_offset;

        /* "pygeoprocessing\routing\routing_core.pyx":372
 *             if absorb_source:
 *                 absorption_rate = absorption_rate_block[row_index, col_index, row_block_offset, col_block_offset]
 *                 loss_block[row_index, col_index, row_block_offset, col_block_offset] = (             # <<<<<<<<<<<<<<
 *                     absorption_rate * flux_block[row_index, col_index, row_block_offset, col_block_offset])
 *                 flux_block[row_index, col_index, row_block_offset, col_block_offset] *= (1 - absorption_rate)
 */
        __pyx_t_82 = __pyx_v_row_index;
        __pyx_t_83 = __pyx_v_col_index;
        __pyx_t_84 = __pyx_v_row_block_offset;
        __pyx_t_85 = __pyx_v_col_block_offset;
        *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.buf, __pyx_t_82, __pyx_pybuffernd_loss_block.diminfo[0].strides, __pyx_t_83, __pyx_pybuffernd_loss_block.diminfo[1].strides, __pyx_t_84, __pyx_pybuffernd_loss_block.diminfo[2].strides, __pyx_t_85, __pyx_pybuffernd_loss_block.diminfo[3].strides) = (__pyx_v_absorption_rate * (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.buf, __pyx_t_78, __pyx_pybuffernd_flux_block.diminfo[0].strides, __pyx_t_79, __pyx_pybuffernd_flux_block.diminfo[1].strides, __pyx_t_80, __pyx_pybuffernd_flux_block.diminfo[2].strides, __pyx_t_81, __pyx_pybuffernd_flux_block.diminfo[3].strides)));

        /* "pygeoprocessing\routing\routing_core.pyx":374
 *                 loss_block[row_index, col_index, row_block_offset, col_block_offset] = (
 *                     absorption_rate * flux_block[row_index, col_index, row_block_offset, col_block_offset])
 *                 flux_block[row_index, col_index, row_block_offset, col_block_offset] *= (1 - absorption_rate)             # <<<<<<<<<<<<<<
 * 
 *         current_neighbor_index = cell_neighbor_to_process.front()
 */
        __pyx_t_86 = __pyx_v_row_index;
        __pyx_t_87 = __pyx_v_col_index;
        __pyx_t_88 = __pyx_v_row_block_offset;
        __pyx_t_89 = __pyx_v_col_block_offset;
        *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.buf, __pyx_t_86, __pyx_pybuffernd_flux_block.diminfo[0].strides, __pyx_t_87, __pyx_pybuffernd_flux_block.diminfo[1].strides, __pyx_t_88, __pyx_pybuffernd_flux_block.diminfo[2].strides, __pyx_t_89, __pyx_pybuffernd_flux_block.diminfo[3].strides) *= (1.0 - __pyx_v_absorption_rate);
        goto __pyx_L17;
      }
      __pyx_L17:;
      goto __pyx_L15;
    }
    __pyx_L15:;

    /* "pygeoprocessing\routing\routing_core.pyx":376
 *                 flux_block[row_index, col_index, row_block_offset, col_block_offset] *= (1 - absorption_rate)
 * 
 *         current_neighbor_index = cell_neighbor_to_process.front()             # <<<<<<<<<<<<<<
 *         cell_neighbor_to_process.pop_front()
 *         for direction_index in xrange(current_neighbor_index, 8):
 */
    __pyx_v_current_neighbor_index = __pyx_v_cell_neighbor_to_process.front();

    /* "pygeoprocessing\routing\routing_core.pyx":377
 * 
 *         current_neighbor_index = cell_neighbor_to_process.front()
 *         cell_neighbor_to_process.pop_front()             # <<<<<<<<<<<<<<
 *         for direction_index in xrange(current_neighbor_index, 8):
 *             #get percent flow from neighbor to current cell
 */
    __pyx_v_cell_neighbor_to_process.pop_front();

    /* "pygeoprocessing\routing\routing_core.pyx":378
 *         current_neighbor_index = cell_neighbor_to_process.front()
 *         cell_neighbor_to_process.pop_front()
 *         for direction_index in xrange(current_neighbor_index, 8):             # <<<<<<<<<<<<<<
 *             #get percent flow from neighbor to current cell
 *             neighbor_row = global_row + row_offsets[direction_index]
 */
    for (__pyx_t_90 = __pyx_v_current_neighbor_index; __pyx_t_90 < 8; __pyx_t_90+=1) {
      __pyx_v_direction_index = __pyx_t_90;

      /* "pygeoprocessing\routing\routing_core.pyx":380
 *         for direction_index in xrange(current_neighbor_index, 8):
 *             #get percent flow from neighbor to current cell
 *             neighbor_row = global_row + row_offsets[direction_index]             # <<<<<<<<<<<<<<
 *             neighbor_col = global_col + col_offsets[direction_index]
 * 
 */
      __pyx_v_neighbor_row = (__pyx_v_global_row + (__pyx_v_row_offsets[__pyx_v_direction_index]));

      /* "pygeoprocessing\routing\routing_core.pyx":381
 *             #get percent flow from neighbor to current cell
 *             neighbor_row = global_row + row_offsets[direction_index]
 *             neighbor_col = global_col + col_offsets[direction_index]             # <<<<<<<<<<<<<<
 * 
 *             #See if neighbor out of bounds
 */
      __pyx_v_neighbor_col = (__pyx_v_global_col + (__pyx_v_col_offsets[__pyx_v_direction_index]));

      /* "pygeoprocessing\routing\routing_core.pyx":384
 * 
 *             #See if neighbor out of bounds
 *             if (neighbor_row < 0 or neighbor_row >= n_rows or neighbor_col < 0 or neighbor_col >= n_cols):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_91 = ((__pyx_v_neighbor_row < 0) != 0);
      if (!__pyx_t_91) {
      } else {
        __pyx_t_19 = __pyx_t_91;
        goto __pyx_L21_bool_binop_done;
      }
      __pyx_t_91 = ((__pyx_v_neighbor_row >= __pyx_v_n_rows) != 0);
      if (!__pyx_t_91) {
      } else {
        __pyx_t_19 = __pyx_t_91;
        goto __pyx_L21_bool_binop_done;
      }
      __pyx_t_91 = ((__pyx_v_neighbor_col < 0) != 0);
      if (!__pyx_t_91) {
      } else {
        __pyx_t_19 = __pyx_t_91;
        goto __pyx_L21_bool_binop_done;
      }
      __pyx_t_91 = ((__pyx_v_neighbor_col >= __pyx_v_n_cols) != 0);
      __pyx_t_19 = __pyx_t_91;
      __pyx_L21_bool_binop_done:;
      if (__pyx_t_19) {

        /* "pygeoprocessing\routing\routing_core.pyx":385
 *             #See if neighbor out of bounds
 *             if (neighbor_row < 0 or neighbor_row >= n_rows or neighbor_col < 0 or neighbor_col >= n_cols):
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             block_cache.update_cache(neighbor_row, neighbor_col, &neighbor_row_index, &neighbor_col_index, &neighbor_row_block_offset, &neighbor_col_block_offset)
 */
        goto __pyx_L18_continue;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":387
 *                 continue
 * 
 *             block_cache.update_cache(neighbor_row, neighbor_col, &neighbor_row_index, &neighbor_col_index, &neighbor_row_block_offset, &neighbor_col_block_offset)             # <<<<<<<<<<<<<<
 *             #if neighbor inflows
 *             neighbor_direction = outflow_direction_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset]
 */
      ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_neighbor_row, __pyx_v_neighbor_col, (&__pyx_v_neighbor_row_index), (&__pyx_v_neighbor_col_index), (&__pyx_v_neighbor_row_block_offset), (&__pyx_v_neighbor_col_block_offset));

      /* "pygeoprocessing\routing\routing_core.pyx":389
 *             block_cache.update_cache(neighbor_row, neighbor_col, &neighbor_row_index, &neighbor_col_index, &neighbor_row_block_offset, &neighbor_col_block_offset)
 *             #if neighbor inflows
 *             neighbor_direction = outflow_direction_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset]             # <<<<<<<<<<<<<<
 *             if neighbor_direction == outflow_direction_nodata:
 *                 continue
 */
      __pyx_t_92 = __pyx_v_neighbor_row_index;
      __pyx_t_93 = __pyx_v_neighbor_col_index;
      __pyx_t_94 = __pyx_v_neighbor_row_block_offset;
      __pyx_t_95 = __pyx_v_neighbor_col_block_offset;
      __pyx_v_neighbor_direction = (*__Pyx_BufPtrStrided4d(npy_int8 *, __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.buf, __pyx_t_92, __pyx_pybuffernd_outflow_direction_block.diminfo[0].strides, __pyx_t_93, __pyx_pybuffernd_outflow_direction_block.diminfo[1].strides, __pyx_t_94, __pyx_pybuffernd_outflow_direction_block.diminfo[2].strides, __pyx_t_95, __pyx_pybuffernd_outflow_direction_block.diminfo[3].strides));

      /* "pygeoprocessing\routing\routing_core.pyx":390
 *             #if neighbor inflows
 *             neighbor_direction = outflow_direction_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset]
 *             if neighbor_direction == outflow_direction_nodata:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_19 = ((__pyx_v_neighbor_direction == __pyx_v_outflow_direction_nodata) != 0);
      if (__pyx_t_19) {

        /* "pygeoprocessing\routing\routing_core.pyx":391
 *             neighbor_direction = outflow_direction_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset]
 *             if neighbor_direction == outflow_direction_nodata:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             #check if the cell flows directly, or is one index off
 */
        goto __pyx_L18_continue;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":394
 * 
 *             #check if the cell flows directly, or is one index off
 *             if (inflow_offsets[direction_index] != neighbor_direction and             # <<<<<<<<<<<<<<
 *                     ((inflow_offsets[direction_index] - 1) % 8) != neighbor_direction):
 *                 #then neighbor doesn't inflow into current cell
 */
      __pyx_t_91 = (((__pyx_v_inflow_offsets[__pyx_v_direction_index]) != __pyx_v_neighbor_direction) != 0);
      if (__pyx_t_91) {
      } else {
        __pyx_t_19 = __pyx_t_91;
        goto __pyx_L27_bool_binop_done;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":395
 *             #check if the cell flows directly, or is one index off
 *             if (inflow_offsets[direction_index] != neighbor_direction and
 *                     ((inflow_offsets[direction_index] - 1) % 8) != neighbor_direction):             # <<<<<<<<<<<<<<
 *                 #then neighbor doesn't inflow into current cell
 *                 continue
 */
      __pyx_t_91 = ((__Pyx_mod_long(((__pyx_v_inflow_offsets[__pyx_v_direction_index]) - 1), 8) != __pyx_v_neighbor_direction) != 0);
      __pyx_t_19 = __pyx_t_91;
      __pyx_L27_bool_binop_done:;
      if (__pyx_t_19) {

        /* "pygeoprocessing\routing\routing_core.pyx":397
 *                     ((inflow_offsets[direction_index] - 1) % 8) != neighbor_direction):
 *                 #then neighbor doesn't inflow into current cell
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             #Calculate the outflow weight
 */
        goto __pyx_L18_continue;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":400
 * 
 *             #Calculate the outflow weight
 *             outflow_weight = outflow_weights_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset]             # <<<<<<<<<<<<<<
 * 
 *             if ((inflow_offsets[direction_index] - 1) % 8) == neighbor_direction:
 */
      __pyx_t_96 = __pyx_v_neighbor_row_index;
      __pyx_t_97 = __pyx_v_neighbor_col_index;
      __pyx_t_98 = __pyx_v_neighbor_row_block_offset;
      __pyx_t_99 = __pyx_v_neighbor_col_block_offset;
      __pyx_v_outflow_weight = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.buf, __pyx_t_96, __pyx_pybuffernd_outflow_weights_block.diminfo[0].strides, __pyx_t_97, __pyx_pybuffernd_outflow_weights_block.diminfo[1].strides, __pyx_t_98, __pyx_pybuffernd_outflow_weights_block.diminfo[2].strides, __pyx_t_99, __pyx_pybuffernd_outflow_weights_block.diminfo[3].strides));

      /* "pygeoprocessing\routing\routing_core.pyx":402
 *             outflow_weight = outflow_weights_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset]
 * 
 *             if ((inflow_offsets[direction_index] - 1) % 8) == neighbor_direction:             # <<<<<<<<<<<<<<
 *                 outflow_weight = 1.0 - outflow_weight
 * 
 */
      __pyx_t_19 = ((__Pyx_mod_long(((__pyx_v_inflow_offsets[__pyx_v_direction_index]) - 1), 8) == __pyx_v_neighbor_direction) != 0);
      if (__pyx_t_19) {

        /* "pygeoprocessing\routing\routing_core.pyx":403
 * 
 *             if ((inflow_offsets[direction_index] - 1) % 8) == neighbor_direction:
 *                 outflow_weight = 1.0 - outflow_weight             # <<<<<<<<<<<<<<
 * 
 *             if outflow_weight <= 0.0:
 */
        __pyx_v_outflow_weight = (1.0 - __pyx_v_outflow_weight);
        goto __pyx_L29;
      }
      __pyx_L29:;

      /* "pygeoprocessing\routing\routing_core.pyx":405
 *                 outflow_weight = 1.0 - outflow_weight
 * 
 *             if outflow_weight <= 0.0:             # <<<<<<<<<<<<<<
 *                 continue
 *             in_flux = flux_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset]
 */
      __pyx_t_19 = ((__pyx_v_outflow_weight <= 0.0) != 0);
      if (__pyx_t_19) {

        /* "pygeoprocessing\routing\routing_core.pyx":406
 * 
 *             if outflow_weight <= 0.0:
 *                 continue             # <<<<<<<<<<<<<<
 *             in_flux = flux_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset]
 * 
 */
        goto __pyx_L18_continue;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":407
 *             if outflow_weight <= 0.0:
 *                 continue
 *             in_flux = flux_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset]             # <<<<<<<<<<<<<<
 * 
 *             if in_flux != transport_nodata:
 */
      __pyx_t_100 = __pyx_v_neighbor_row_index;
      __pyx_t_101 = __pyx_v_neighbor_col_index;
      __pyx_t_102 = __pyx_v_neighbor_row_block_offset;
      __pyx_t_103 = __pyx_v_neighbor_col_block_offset;
      __pyx_v_in_flux = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.buf, __pyx_t_100, __pyx_pybuffernd_flux_block.diminfo[0].strides, __pyx_t_101, __pyx_pybuffernd_flux_block.diminfo[1].strides, __pyx_t_102, __pyx_pybuffernd_flux_block.diminfo[2].strides, __pyx_t_103, __pyx_pybuffernd_flux_block.diminfo[3].strides));

      /* "pygeoprocessing\routing\routing_core.pyx":409
 *             in_flux = flux_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset]
 * 
 *             if in_flux != transport_nodata:             # <<<<<<<<<<<<<<
 *                 absorption_rate = absorption_rate_block[row_index, col_index, row_block_offset, col_block_offset]
 * 
 */
      __pyx_t_19 = ((__pyx_v_in_flux != __pyx_v_transport_nodata) != 0);
      if (__pyx_t_19) {

        /* "pygeoprocessing\routing\routing_core.pyx":410
 * 
 *             if in_flux != transport_nodata:
 *                 absorption_rate = absorption_rate_block[row_index, col_index, row_block_offset, col_block_offset]             # <<<<<<<<<<<<<<
 * 
 *                 #If it's not a stream, route the flux normally
 */
        __pyx_t_104 = __pyx_v_row_index;
        __pyx_t_105 = __pyx_v_col_index;
        __pyx_t_106 = __pyx_v_row_block_offset;
        __pyx_t_107 = __pyx_v_col_block_offset;
        __pyx_v_absorption_rate = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer.buf, __pyx_t_104, __pyx_pybuffernd_absorption_rate_block.diminfo[0].strides, __pyx_t_105, __pyx_pybuffernd_absorption_rate_block.diminfo[1].strides, __pyx_t_106, __pyx_pybuffernd_absorption_rate_block.diminfo[2].strides, __pyx_t_107, __pyx_pybuffernd_absorption_rate_block.diminfo[3].strides));

        /* "pygeoprocessing\routing\routing_core.pyx":413
 * 
 *                 #If it's not a stream, route the flux normally
 *                 if stream_block[row_index, col_index, row_block_offset, col_block_offset] == 0:             # <<<<<<<<<<<<<<
 *                     flux_block[row_index, col_index, row_block_offset, col_block_offset] += (
 *                         outflow_weight * in_flux * (1.0 - absorption_rate))
 */
        __pyx_t_108 = __pyx_v_row_index;
        __pyx_t_109 = __pyx_v_col_index;
        __pyx_t_110 = __pyx_v_row_block_offset;
        __pyx_t_111 = __pyx_v_col_block_offset;
        __pyx_t_19 = (((*__Pyx_BufPtrStrided4d(npy_int8 *, __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.buf, __pyx_t_108, __pyx_pybuffernd_stream_block.diminfo[0].strides, __pyx_t_109, __pyx_pybuffernd_stream_block.diminfo[1].strides, __pyx_t_110, __pyx_pybuffernd_stream_block.diminfo[2].strides, __pyx_t_111, __pyx_pybuffernd_stream_block.diminfo[3].strides)) == 0) != 0);
        if (__pyx_t_19) {

          /* "pygeoprocessing\routing\routing_core.pyx":414
 *                 #If it's not a stream, route the flux normally
 *                 if stream_block[row_index, col_index, row_block_offset, col_block_offset] == 0:
 *                     flux_block[row_index, col_index, row_block_offset, col_block_offset] += (             # <<<<<<<<<<<<<<
 *                         outflow_weight * in_flux * (1.0 - absorption_rate))
 * 
 */
          __pyx_t_112 = __pyx_v_row_index;
          __pyx_t_113 = __pyx_v_col_index;
          __pyx_t_114 = __pyx_v_row_block_offset;
          __pyx_t_115 = __pyx_v_col_block_offset;
          *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.buf, __pyx_t_112, __pyx_pybuffernd_flux_block.diminfo[0].strides, __pyx_t_113, __pyx_pybuffernd_flux_block.diminfo[1].strides, __pyx_t_114, __pyx_pybuffernd_flux_block.diminfo[2].strides, __pyx_t_115, __pyx_pybuffernd_flux_block.diminfo[3].strides) += ((__pyx_v_outflow_weight * __pyx_v_in_flux) * (1.0 - __pyx_v_absorption_rate));

          /* "pygeoprocessing\routing\routing_core.pyx":417
 *                         outflow_weight * in_flux * (1.0 - absorption_rate))
 * 
 *                     loss_block[row_index, col_index, row_block_offset, col_block_offset] += (             # <<<<<<<<<<<<<<
 *                         outflow_weight * in_flux * absorption_rate)
 *                 else:
 */
          __pyx_t_116 = __pyx_v_row_index;
          __pyx_t_117 = __pyx_v_col_index;
          __pyx_t_118 = __pyx_v_row_block_offset;
          __pyx_t_119 = __pyx_v_col_block_offset;
          *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.buf, __pyx_t_116, __pyx_pybuffernd_loss_block.diminfo[0].strides, __pyx_t_117, __pyx_pybuffernd_loss_block.diminfo[1].strides, __pyx_t_118, __pyx_pybuffernd_loss_block.diminfo[2].strides, __pyx_t_119, __pyx_pybuffernd_loss_block.diminfo[3].strides) += ((__pyx_v_outflow_weight * __pyx_v_in_flux) * __pyx_v_absorption_rate);
          goto __pyx_L32;
        }
        /*else*/ {

          /* "pygeoprocessing\routing\routing_core.pyx":422
 *                     #Otherwise if it is a stream, all flux routes to the outlet
 *                     #we don't want it absorbed later
 *                     flux_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0             # <<<<<<<<<<<<<<
 *                     loss_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *                 cache_dirty[row_index, col_index] = 1
 */
          __pyx_t_120 = __pyx_v_row_index;
          __pyx_t_121 = __pyx_v_col_index;
          __pyx_t_122 = __pyx_v_row_block_offset;
          __pyx_t_123 = __pyx_v_col_block_offset;
          *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flux_block.rcbuffer->pybuffer.buf, __pyx_t_120, __pyx_pybuffernd_flux_block.diminfo[0].strides, __pyx_t_121, __pyx_pybuffernd_flux_block.diminfo[1].strides, __pyx_t_122, __pyx_pybuffernd_flux_block.diminfo[2].strides, __pyx_t_123, __pyx_pybuffernd_flux_block.diminfo[3].strides) = 0.0;

          /* "pygeoprocessing\routing\routing_core.pyx":423
 *                     #we don't want it absorbed later
 *                     flux_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *                     loss_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0             # <<<<<<<<<<<<<<
 *                 cache_dirty[row_index, col_index] = 1
 *             else:
 */
          __pyx_t_124 = __pyx_v_row_index;
          __pyx_t_125 = __pyx_v_col_index;
          __pyx_t_126 = __pyx_v_row_block_offset;
          __pyx_t_127 = __pyx_v_col_block_offset;
          *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_loss_block.rcbuffer->pybuffer.buf, __pyx_t_124, __pyx_pybuffernd_loss_block.diminfo[0].strides, __pyx_t_125, __pyx_pybuffernd_loss_block.diminfo[1].strides, __pyx_t_126, __pyx_pybuffernd_loss_block.diminfo[2].strides, __pyx_t_127, __pyx_pybuffernd_loss_block.diminfo[3].strides) = 0.0;
        }
        __pyx_L32:;

        /* "pygeoprocessing\routing\routing_core.pyx":424
 *                     flux_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *                     loss_block[row_index, col_index, row_block_offset, col_block_offset] = 0.0
 *                 cache_dirty[row_index, col_index] = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 #we need to process the neighbor, remember where we were
 */
        __pyx_t_128 = __pyx_v_row_index;
        __pyx_t_129 = __pyx_v_col_index;
        *__Pyx_BufPtrStrided2d(npy_int8 *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_128, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_129, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;
        goto __pyx_L31;
      }
      /*else*/ {

        /* "pygeoprocessing\routing\routing_core.pyx":428
 *                 #we need to process the neighbor, remember where we were
 *                 #then add the neighbor to the process stack
 *                 cells_to_process.push_front(current_index)             # <<<<<<<<<<<<<<
 *                 cell_neighbor_to_process.push_front(direction_index)
 * 
 */
        __pyx_v_cells_to_process.push_front(__pyx_v_current_index);

        /* "pygeoprocessing\routing\routing_core.pyx":429
 *                 #then add the neighbor to the process stack
 *                 cells_to_process.push_front(current_index)
 *                 cell_neighbor_to_process.push_front(direction_index)             # <<<<<<<<<<<<<<
 * 
 *                 #Calculating the flat index for the neighbor and starting
 */
        __pyx_v_cell_neighbor_to_process.push_front(__pyx_v_direction_index);

        /* "pygeoprocessing\routing\routing_core.pyx":434
 *                 #at it's neighbor index of 0
 *                 #a global neighbor row needs to be calculated
 *                 cells_to_process.push_front(neighbor_row * n_cols + neighbor_col)             # <<<<<<<<<<<<<<
 *                 cell_neighbor_to_process.push_front(0)
 *                 break
 */
        __pyx_v_cells_to_process.push_front(((__pyx_v_neighbor_row * __pyx_v_n_cols) + __pyx_v_neighbor_col));

        /* "pygeoprocessing\routing\routing_core.pyx":435
 *                 #a global neighbor row needs to be calculated
 *                 cells_to_process.push_front(neighbor_row * n_cols + neighbor_col)
 *                 cell_neighbor_to_process.push_front(0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_cell_neighbor_to_process.push_front(0);

        /* "pygeoprocessing\routing\routing_core.pyx":436
 *                 cells_to_process.push_front(neighbor_row * n_cols + neighbor_col)
 *                 cell_neighbor_to_process.push_front(0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *     block_cache.flush_cache()
 */
        goto __pyx_L19_break;
      }
      __pyx_L31:;
      __pyx_L18_continue:;
    }
    __pyx_L19_break:;
  }

  /* "pygeoprocessing\routing\routing_core.pyx":438
 *                 break
 * 
 *     block_cache.flush_cache()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->flush_cache(__pyx_v_block_cache);

  /* "pygeoprocessing\routing\routing_core.pyx":177
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef calculate_transport(             # <<<<<<<<<<<<<<
 *         outflow_direction_uri, outflow_weights_uri, deque[int] &sink_cell_deque,
 *         source_uri, absorption_rate_uri, loss_uri, flux_uri, absorption_mode,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_21);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flux_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_loss_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_source_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stream_block.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.calculate_transport", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_absorption_rate_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flux_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_loss_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_source_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stream_block.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_outflow_direction_dataset);
  __Pyx_XDECREF(__pyx_v_outflow_direction_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_outflow_direction_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_outflow_weights_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_source_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_absorption_rate_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_loss_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_flux_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_stream_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_cache_dirty);
  __Pyx_XDECREF(__pyx_v_outflow_weights_dataset);
  __Pyx_XDECREF(__pyx_v_outflow_weights_band);
  __Pyx_XDECREF(__pyx_v_source_dataset);
  __Pyx_XDECREF(__pyx_v_source_band);
  __Pyx_XDECREF(__pyx_v_absorption_rate_dataset);
  __Pyx_XDECREF(__pyx_v_absorption_rate_band);
  __Pyx_XDECREF(__pyx_v_loss_dataset);
  __Pyx_XDECREF(__pyx_v_loss_band);
  __Pyx_XDECREF(__pyx_v_flux_dataset);
  __Pyx_XDECREF(__pyx_v_flux_band);
  __Pyx_XDECREF(__pyx_v_band_list);
  __Pyx_XDECREF(__pyx_v_block_list);
  __Pyx_XDECREF(__pyx_v_update_list);
  __Pyx_XDECREF(__pyx_v_stream_dataset);
  __Pyx_XDECREF(__pyx_v_stream_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_block_cache);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":444
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def calculate_flow_weights(             # <<<<<<<<<<<<<<
 *     flow_direction_uri, outflow_weights_uri, outflow_direction_uri):
 *     """This function calculates the flow weights from a d-infinity based
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_1calculate_flow_weights(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15pygeoprocessing_7routing_12routing_core_calculate_flow_weights[] = "This function calculates the flow weights from a d-infinity based\n        flow algorithm to assist in walking up the flow graph.\n\n        flow_direction_uri - uri to a flow direction GDAL dataset that's\n            used to calculate the flow graph\n        outflow_weights_uri - a uri to a float32 dataset that will be created\n            whose elements correspond to the percent outflow from the current\n            cell to its first counter-clockwise neighbor\n        outflow_direction_uri - a uri to a byte dataset that will indicate the\n            first counter clockwise outflow neighbor as an index from the\n            following diagram\n\n            3 2 1\n            4 x 0\n            5 6 7\n\n        returns nothing";
static PyMethodDef __pyx_mdef_15pygeoprocessing_7routing_12routing_core_1calculate_flow_weights = {"calculate_flow_weights", (PyCFunction)__pyx_pw_15pygeoprocessing_7routing_12routing_core_1calculate_flow_weights, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15pygeoprocessing_7routing_12routing_core_calculate_flow_weights};
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_1calculate_flow_weights(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_flow_direction_uri = 0;
  PyObject *__pyx_v_outflow_weights_uri = 0;
  PyObject *__pyx_v_outflow_direction_uri = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_flow_weights (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flow_direction_uri,&__pyx_n_s_outflow_weights_uri,&__pyx_n_s_outflow_direction_uri,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flow_direction_uri)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_outflow_weights_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculate_flow_weights", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_outflow_direction_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculate_flow_weights", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculate_flow_weights") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_flow_direction_uri = values[0];
    __pyx_v_outflow_weights_uri = values[1];
    __pyx_v_outflow_direction_uri = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculate_flow_weights", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.calculate_flow_weights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pygeoprocessing_7routing_12routing_core_calculate_flow_weights(__pyx_self, __pyx_v_flow_direction_uri, __pyx_v_outflow_weights_uri, __pyx_v_outflow_direction_uri);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_calculate_flow_weights(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_direction_uri, PyObject *__pyx_v_outflow_weights_uri, PyObject *__pyx_v_outflow_direction_uri) {
  time_t __pyx_v_start;
  PyObject *__pyx_v_flow_direction_dataset = NULL;
  double __pyx_v_flow_direction_nodata;
  PyObject *__pyx_v_flow_direction_band = NULL;
  int __pyx_v_block_col_size;
  int __pyx_v_block_row_size;
  PyArrayObject *__pyx_v_flow_direction_block = 0;
  int __pyx_v_n_cols;
  int __pyx_v_n_rows;
  int __pyx_v_outflow_direction_nodata;
  PyObject *__pyx_v_outflow_direction_dataset = NULL;
  PyObject *__pyx_v_outflow_direction_band = NULL;
  PyArrayObject *__pyx_v_outflow_direction_block = 0;
  double __pyx_v_outflow_weights_nodata;
  PyObject *__pyx_v_outflow_weights_dataset = NULL;
  PyObject *__pyx_v_outflow_weights_band = NULL;
  PyArrayObject *__pyx_v_outflow_weights_block = 0;
  int __pyx_v_global_row;
  int __pyx_v_global_col;
  int __pyx_v_global_block_row;
  int __pyx_v_global_block_col;
  int __pyx_v_row_index;
  int __pyx_v_col_index;
  int __pyx_v_row_block_offset;
  int __pyx_v_col_block_offset;
  PyArrayObject *__pyx_v_cache_dirty = 0;
  PyObject *__pyx_v_band_list = NULL;
  PyObject *__pyx_v_block_list = NULL;
  PyObject *__pyx_v_update_list = NULL;
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_block_cache = 0;
  int __pyx_v_n_neighbors;
  double __pyx_v_angle_to_neighbor[8];
  PyObject *__pyx_v_index = NULL;
  CYTHON_UNUSED int *__pyx_v_diagonal_offsets;
  int __pyx_v_neighbor_direction_index;
  double __pyx_v_flow_direction;
  double __pyx_v_flow_angle_to_neighbor;
  double __pyx_v_outflow_weight;
  time_t __pyx_v_last_time;
  time_t __pyx_v_current_time;
  int __pyx_v_found;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cache_dirty;
  __Pyx_Buffer __pyx_pybuffer_cache_dirty;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flow_direction_block;
  __Pyx_Buffer __pyx_pybuffer_flow_direction_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_outflow_direction_block;
  __Pyx_Buffer __pyx_pybuffer_outflow_direction_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_outflow_weights_block;
  __Pyx_Buffer __pyx_pybuffer_outflow_weights_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  PyArrayObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  Py_ssize_t __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  Py_ssize_t __pyx_t_18;
  int __pyx_t_19[8];
  long __pyx_t_20;
  int __pyx_t_21;
  long __pyx_t_22;
  int __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  int __pyx_t_26;
  long __pyx_t_27;
  int __pyx_t_28;
  int __pyx_t_29;
  int __pyx_t_30;
  int __pyx_t_31;
  int __pyx_t_32;
  int __pyx_t_33;
  int __pyx_t_34;
  int __pyx_t_35;
  int __pyx_t_36;
  int __pyx_t_37;
  int __pyx_t_38;
  int __pyx_t_39;
  int __pyx_t_40;
  int __pyx_t_41;
  int __pyx_t_42;
  int __pyx_t_43;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_flow_weights", 0);
  __pyx_pybuffer_flow_direction_block.pybuffer.buf = NULL;
  __pyx_pybuffer_flow_direction_block.refcount = 0;
  __pyx_pybuffernd_flow_direction_block.data = NULL;
  __pyx_pybuffernd_flow_direction_block.rcbuffer = &__pyx_pybuffer_flow_direction_block;
  __pyx_pybuffer_outflow_direction_block.pybuffer.buf = NULL;
  __pyx_pybuffer_outflow_direction_block.refcount = 0;
  __pyx_pybuffernd_outflow_direction_block.data = NULL;
  __pyx_pybuffernd_outflow_direction_block.rcbuffer = &__pyx_pybuffer_outflow_direction_block;
  __pyx_pybuffer_outflow_weights_block.pybuffer.buf = NULL;
  __pyx_pybuffer_outflow_weights_block.refcount = 0;
  __pyx_pybuffernd_outflow_weights_block.data = NULL;
  __pyx_pybuffernd_outflow_weights_block.rcbuffer = &__pyx_pybuffer_outflow_weights_block;
  __pyx_pybuffer_cache_dirty.pybuffer.buf = NULL;
  __pyx_pybuffer_cache_dirty.refcount = 0;
  __pyx_pybuffernd_cache_dirty.data = NULL;
  __pyx_pybuffernd_cache_dirty.rcbuffer = &__pyx_pybuffer_cache_dirty;

  /* "pygeoprocessing\routing\routing_core.pyx":465
 * 
 *     cdef time_t start
 *     time(&start)             # <<<<<<<<<<<<<<
 * 
 *     flow_direction_dataset = gdal.Open(flow_direction_uri)
 */
  time((&__pyx_v_start));

  /* "pygeoprocessing\routing\routing_core.pyx":467
 *     time(&start)
 * 
 *     flow_direction_dataset = gdal.Open(flow_direction_uri)             # <<<<<<<<<<<<<<
 *     cdef double flow_direction_nodata
 *     flow_direction_band = flow_direction_dataset.GetRasterBand(1)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Open); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_flow_direction_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_flow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_direction_dataset = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":469
 *     flow_direction_dataset = gdal.Open(flow_direction_uri)
 *     cdef double flow_direction_nodata
 *     flow_direction_band = flow_direction_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flow_direction_nodata = flow_direction_band.GetNoDataValue()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_direction_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_flow_direction_band = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":470
 *     cdef double flow_direction_nodata
 *     flow_direction_band = flow_direction_dataset.GetRasterBand(1)
 *     flow_direction_nodata = flow_direction_band.GetNoDataValue()             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_direction_band, __pyx_n_s_GetNoDataValue); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_direction_nodata = __pyx_t_5;

  /* "pygeoprocessing\routing\routing_core.pyx":473
 * 
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = flow_direction_band.GetBlockSize()             # <<<<<<<<<<<<<<
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_direction_block = numpy.empty(
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_direction_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_2), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_block_col_size = __pyx_t_7;
  __pyx_v_block_row_size = __pyx_t_8;

  /* "pygeoprocessing\routing\routing_core.pyx":475
 *     block_col_size, block_row_size = flow_direction_band.GetBlockSize()
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_direction_block = numpy.empty(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":476
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_direction_block = numpy.empty(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 * 
 *     #This is the array that's used to keep track of the connections of the
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":475
 *     block_col_size, block_row_size = flow_direction_band.GetBlockSize()
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_direction_block = numpy.empty(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 * 
 */
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);

  /* "pygeoprocessing\routing\routing_core.pyx":476
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_direction_block = numpy.empty(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 * 
 *     #This is the array that's used to keep track of the connections of the
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":475
 *     block_col_size, block_row_size = flow_direction_band.GetBlockSize()
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_direction_block = numpy.empty(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_flow_direction_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_flow_direction_block.diminfo[0].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flow_direction_block.diminfo[0].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flow_direction_block.diminfo[1].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flow_direction_block.diminfo[1].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_flow_direction_block.diminfo[2].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_flow_direction_block.diminfo[2].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_flow_direction_block.diminfo[3].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_flow_direction_block.diminfo[3].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_11 = 0;
  __pyx_v_flow_direction_block = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":481
 *     #current cell to those *inflowing* to the cell, thus the 8 directions
 *     cdef int n_cols, n_rows
 *     n_cols, n_rows = flow_direction_band.XSize, flow_direction_band.YSize             # <<<<<<<<<<<<<<
 * 
 *     cdef int outflow_direction_nodata = 9
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_direction_band, __pyx_n_s_XSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_direction_band, __pyx_n_s_YSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n_cols = __pyx_t_8;
  __pyx_v_n_rows = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":483
 *     n_cols, n_rows = flow_direction_band.XSize, flow_direction_band.YSize
 * 
 *     cdef int outflow_direction_nodata = 9             # <<<<<<<<<<<<<<
 *     outflow_direction_dataset = pygeoprocessing.new_raster_from_base(
 *         flow_direction_dataset, outflow_direction_uri, 'GTiff',
 */
  __pyx_v_outflow_direction_nodata = 9;

  /* "pygeoprocessing\routing\routing_core.pyx":484
 * 
 *     cdef int outflow_direction_nodata = 9
 *     outflow_direction_dataset = pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_direction_dataset, outflow_direction_uri, 'GTiff',
 *         outflow_direction_nodata, gdal.GDT_Byte, fill_value=outflow_direction_nodata)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":486
 *     outflow_direction_dataset = pygeoprocessing.new_raster_from_base(
 *         flow_direction_dataset, outflow_direction_uri, 'GTiff',
 *         outflow_direction_nodata, gdal.GDT_Byte, fill_value=outflow_direction_nodata)             # <<<<<<<<<<<<<<
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=4] outflow_direction_block = (
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_outflow_direction_nodata); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_GDT_Byte); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":484
 * 
 *     cdef int outflow_direction_nodata = 9
 *     outflow_direction_dataset = pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_direction_dataset, outflow_direction_uri, 'GTiff',
 *         outflow_direction_nodata, gdal.GDT_Byte, fill_value=outflow_direction_nodata)
 */
  __pyx_t_9 = PyTuple_New(5); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(__pyx_v_flow_direction_dataset);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_flow_direction_dataset);
  __Pyx_GIVEREF(__pyx_v_flow_direction_dataset);
  __Pyx_INCREF(__pyx_v_outflow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_outflow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_outflow_direction_uri);
  __Pyx_INCREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_n_s_GTiff);
  __Pyx_GIVEREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":486
 *     outflow_direction_dataset = pygeoprocessing.new_raster_from_base(
 *         flow_direction_dataset, outflow_direction_uri, 'GTiff',
 *         outflow_direction_nodata, gdal.GDT_Byte, fill_value=outflow_direction_nodata)             # <<<<<<<<<<<<<<
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=4] outflow_direction_block = (
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_outflow_direction_nodata); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_fill_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":484
 * 
 *     cdef int outflow_direction_nodata = 9
 *     outflow_direction_dataset = pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_direction_dataset, outflow_direction_uri, 'GTiff',
 *         outflow_direction_nodata, gdal.GDT_Byte, fill_value=outflow_direction_nodata)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_outflow_direction_dataset = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":487
 *         flow_direction_dataset, outflow_direction_uri, 'GTiff',
 *         outflow_direction_nodata, gdal.GDT_Byte, fill_value=outflow_direction_nodata)
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=4] outflow_direction_block = (
 *         numpy.empty((N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_outflow_direction_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_outflow_direction_band = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":489
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=4] outflow_direction_block = (
 *         numpy.empty((N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8))             # <<<<<<<<<<<<<<
 * 
 *     cdef double outflow_weights_nodata = -1.0
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_int8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_12 = ((PyArrayObject *)__pyx_t_9);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn_npy_byte, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_outflow_direction_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_outflow_direction_block.diminfo[0].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_outflow_direction_block.diminfo[0].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_outflow_direction_block.diminfo[1].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_outflow_direction_block.diminfo[1].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_outflow_direction_block.diminfo[2].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_outflow_direction_block.diminfo[2].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_outflow_direction_block.diminfo[3].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_outflow_direction_block.diminfo[3].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_12 = 0;
  __pyx_v_outflow_direction_block = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":491
 *         numpy.empty((N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8))
 * 
 *     cdef double outflow_weights_nodata = -1.0             # <<<<<<<<<<<<<<
 *     outflow_weights_dataset = pygeoprocessing.new_raster_from_base(
 *         flow_direction_dataset, outflow_weights_uri, 'GTiff',
 */
  __pyx_v_outflow_weights_nodata = -1.0;

  /* "pygeoprocessing\routing\routing_core.pyx":492
 * 
 *     cdef double outflow_weights_nodata = -1.0
 *     outflow_weights_dataset = pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_direction_dataset, outflow_weights_uri, 'GTiff',
 *         outflow_weights_nodata, gdal.GDT_Float32, fill_value=outflow_weights_nodata)
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":494
 *     outflow_weights_dataset = pygeoprocessing.new_raster_from_base(
 *         flow_direction_dataset, outflow_weights_uri, 'GTiff',
 *         outflow_weights_nodata, gdal.GDT_Float32, fill_value=outflow_weights_nodata)             # <<<<<<<<<<<<<<
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = (
 */
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_outflow_weights_nodata); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GDT_Float32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":492
 * 
 *     cdef double outflow_weights_nodata = -1.0
 *     outflow_weights_dataset = pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_direction_dataset, outflow_weights_uri, 'GTiff',
 *         outflow_weights_nodata, gdal.GDT_Float32, fill_value=outflow_weights_nodata)
 */
  __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_flow_direction_dataset);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_flow_direction_dataset);
  __Pyx_GIVEREF(__pyx_v_flow_direction_dataset);
  __Pyx_INCREF(__pyx_v_outflow_weights_uri);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_outflow_weights_uri);
  __Pyx_GIVEREF(__pyx_v_outflow_weights_uri);
  __Pyx_INCREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_GTiff);
  __Pyx_GIVEREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_9 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygeoprocessing\routing\routing_core.pyx":494
 *     outflow_weights_dataset = pygeoprocessing.new_raster_from_base(
 *         flow_direction_dataset, outflow_weights_uri, 'GTiff',
 *         outflow_weights_nodata, gdal.GDT_Float32, fill_value=outflow_weights_nodata)             # <<<<<<<<<<<<<<
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = (
 */
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_outflow_weights_nodata); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fill_value, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":492
 * 
 *     cdef double outflow_weights_nodata = -1.0
 *     outflow_weights_dataset = pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_direction_dataset, outflow_weights_uri, 'GTiff',
 *         outflow_weights_nodata, gdal.GDT_Float32, fill_value=outflow_weights_nodata)
 */
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_outflow_weights_dataset = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":495
 *         flow_direction_dataset, outflow_weights_uri, 'GTiff',
 *         outflow_weights_nodata, gdal.GDT_Float32, fill_value=outflow_weights_nodata)
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = (
 *         numpy.empty((N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32))
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_outflow_weights_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_outflow_weights_band = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":497
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = (
 *         numpy.empty((N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32))             # <<<<<<<<<<<<<<
 * 
 *     #center point of global index
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_outflow_weights_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_outflow_weights_block.diminfo[0].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_outflow_weights_block.diminfo[0].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_outflow_weights_block.diminfo[1].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_outflow_weights_block.diminfo[1].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_outflow_weights_block.diminfo[2].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_outflow_weights_block.diminfo[2].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_outflow_weights_block.diminfo[3].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_outflow_weights_block.diminfo[3].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_13 = 0;
  __pyx_v_outflow_weights_block = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":510
 * 
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":511
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)             # <<<<<<<<<<<<<<
 * 
 *     cache_dirty[:] = 0
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_2 = 0;
  __pyx_t_10 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":510
 * 
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)
 * 
 */
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);

  /* "pygeoprocessing\routing\routing_core.pyx":511
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)             # <<<<<<<<<<<<<<
 * 
 *     cache_dirty[:] = 0
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":510
 * 
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn_npy_int8, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_cache_dirty = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_cache_dirty.diminfo[0].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cache_dirty.diminfo[0].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cache_dirty.diminfo[1].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cache_dirty.diminfo[1].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_14 = 0;
  __pyx_v_cache_dirty = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":513
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)
 * 
 *     cache_dirty[:] = 0             # <<<<<<<<<<<<<<
 *     band_list = [flow_direction_band, outflow_direction_band, outflow_weights_band]
 *     block_list = [flow_direction_block, outflow_direction_block, outflow_weights_block]
 */
  if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_cache_dirty), __pyx_int_0, 0, 0, NULL, NULL, &__pyx_slice__16, 0, 0, 0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pygeoprocessing\routing\routing_core.pyx":514
 * 
 *     cache_dirty[:] = 0
 *     band_list = [flow_direction_band, outflow_direction_band, outflow_weights_band]             # <<<<<<<<<<<<<<
 *     block_list = [flow_direction_block, outflow_direction_block, outflow_weights_block]
 *     update_list = [False, True, True]
 */
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_flow_direction_band);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_flow_direction_band);
  __Pyx_GIVEREF(__pyx_v_flow_direction_band);
  __Pyx_INCREF(__pyx_v_outflow_direction_band);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_v_outflow_direction_band);
  __Pyx_GIVEREF(__pyx_v_outflow_direction_band);
  __Pyx_INCREF(__pyx_v_outflow_weights_band);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_v_outflow_weights_band);
  __Pyx_GIVEREF(__pyx_v_outflow_weights_band);
  __pyx_v_band_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":515
 *     cache_dirty[:] = 0
 *     band_list = [flow_direction_band, outflow_direction_band, outflow_weights_band]
 *     block_list = [flow_direction_block, outflow_direction_block, outflow_weights_block]             # <<<<<<<<<<<<<<
 *     update_list = [False, True, True]
 * 
 */
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_flow_direction_block));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_flow_direction_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_flow_direction_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_outflow_direction_block));
  PyList_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_outflow_direction_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_outflow_direction_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_outflow_weights_block));
  PyList_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_outflow_weights_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_outflow_weights_block));
  __pyx_v_block_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":516
 *     band_list = [flow_direction_band, outflow_direction_band, outflow_weights_band]
 *     block_list = [flow_direction_block, outflow_direction_block, outflow_weights_block]
 *     update_list = [False, True, True]             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_3, 0, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_True);
  PyList_SET_ITEM(__pyx_t_3, 1, Py_True);
  __Pyx_GIVEREF(Py_True);
  __Pyx_INCREF(Py_True);
  PyList_SET_ITEM(__pyx_t_3, 2, Py_True);
  __Pyx_GIVEREF(Py_True);
  __pyx_v_update_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":519
 * 
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size, block_col_size, band_list, block_list, update_list, cache_dirty)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_n_rows); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygeoprocessing\routing\routing_core.pyx":518
 *     update_list = [False, True, True]
 * 
 *     cdef BlockCache block_cache = BlockCache(             # <<<<<<<<<<<<<<
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size, block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 */
  __pyx_t_15 = PyTuple_New(10); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_15, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_15, 4, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_15, 5, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_band_list);
  PyTuple_SET_ITEM(__pyx_t_15, 6, __pyx_v_band_list);
  __Pyx_GIVEREF(__pyx_v_band_list);
  __Pyx_INCREF(__pyx_v_block_list);
  PyTuple_SET_ITEM(__pyx_t_15, 7, __pyx_v_block_list);
  __Pyx_GIVEREF(__pyx_v_block_list);
  __Pyx_INCREF(__pyx_v_update_list);
  PyTuple_SET_ITEM(__pyx_t_15, 8, __pyx_v_update_list);
  __Pyx_GIVEREF(__pyx_v_update_list);
  __Pyx_INCREF(((PyObject *)__pyx_v_cache_dirty));
  PyTuple_SET_ITEM(__pyx_t_15, 9, ((PyObject *)__pyx_v_cache_dirty));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cache_dirty));
  __pyx_t_3 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache)), __pyx_t_15, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_v_block_cache = ((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":524
 *     #The number of diagonal offsets defines the neighbors, angle between them
 *     #and the actual angle to point to the neighbor
 *     cdef int n_neighbors = 8             # <<<<<<<<<<<<<<
 *     cdef double angle_to_neighbor[8]
 *     for index in range(8):
 */
  __pyx_v_n_neighbors = 8;

  /* "pygeoprocessing\routing\routing_core.pyx":526
 *     cdef int n_neighbors = 8
 *     cdef double angle_to_neighbor[8]
 *     for index in range(8):             # <<<<<<<<<<<<<<
 *         angle_to_neighbor[index] = 2.0*PI*index/8.0
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_15 = __pyx_t_1; __Pyx_INCREF(__pyx_t_15); __pyx_t_16 = 0;
    __pyx_t_17 = NULL;
  } else {
    __pyx_t_16 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_17 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_17)) {
      if (likely(PyList_CheckExact(__pyx_t_15))) {
        if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_15)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_16); __Pyx_INCREF(__pyx_t_1); __pyx_t_16++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_15, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_16); __Pyx_INCREF(__pyx_t_1); __pyx_t_16++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_15, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_17(__pyx_t_15);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":527
 *     cdef double angle_to_neighbor[8]
 *     for index in range(8):
 *         angle_to_neighbor[index] = 2.0*PI*index/8.0             # <<<<<<<<<<<<<<
 * 
 *     #diagonal offsets index is 0, 1, 2, 3, 4, 5, 6, 7 from the figure above
 */
    __pyx_t_1 = PyFloat_FromDouble((2.0 * __pyx_v_15pygeoprocessing_7routing_12routing_core_PI)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_index); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_float_8_0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_18 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_18 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_angle_to_neighbor[__pyx_t_18]) = __pyx_t_5;

    /* "pygeoprocessing\routing\routing_core.pyx":526
 *     cdef int n_neighbors = 8
 *     cdef double angle_to_neighbor[8]
 *     for index in range(8):             # <<<<<<<<<<<<<<
 *         angle_to_neighbor[index] = 2.0*PI*index/8.0
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":530
 * 
 *     #diagonal offsets index is 0, 1, 2, 3, 4, 5, 6, 7 from the figure above
 *     cdef int *diagonal_offsets = [             # <<<<<<<<<<<<<<
 *         1, -n_cols+1, -n_cols, -n_cols-1, -1, n_cols-1, n_cols, n_cols+1]
 * 
 */
  __pyx_t_19[0] = 1;
  __pyx_t_19[1] = ((-__pyx_v_n_cols) + 1);
  __pyx_t_19[2] = (-__pyx_v_n_cols);
  __pyx_t_19[3] = ((-__pyx_v_n_cols) - 1);
  __pyx_t_19[4] = -1;
  __pyx_t_19[5] = (__pyx_v_n_cols - 1);
  __pyx_t_19[6] = __pyx_v_n_cols;
  __pyx_t_19[7] = (__pyx_v_n_cols + 1);
  __pyx_v_diagonal_offsets = __pyx_t_19;

  /* "pygeoprocessing\routing\routing_core.pyx":539
 * 
 *     cdef time_t last_time, current_time
 *     time(&last_time)             # <<<<<<<<<<<<<<
 *     for global_block_row in xrange(int(ceil(float(n_rows) / block_row_size))):
 *         time(&current_time)
 */
  time((&__pyx_v_last_time));

  /* "pygeoprocessing\routing\routing_core.pyx":540
 *     cdef time_t last_time, current_time
 *     time(&last_time)
 *     for global_block_row in xrange(int(ceil(float(n_rows) / block_row_size))):             # <<<<<<<<<<<<<<
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 */
  __pyx_t_15 = PyFloat_FromDouble(ceil((((double)__pyx_v_n_rows) / __pyx_v_block_row_size))); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_15);
  __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_20 = __Pyx_PyInt_As_long(__pyx_t_15); if (unlikely((__pyx_t_20 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_20; __pyx_t_7+=1) {
    __pyx_v_global_block_row = __pyx_t_7;

    /* "pygeoprocessing\routing\routing_core.pyx":541
 *     time(&last_time)
 *     for global_block_row in xrange(int(ceil(float(n_rows) / block_row_size))):
 *         time(&current_time)             # <<<<<<<<<<<<<<
 *         if current_time - last_time > 5.0:
 *             LOGGER.info("calculate_flow_weights %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 */
    time((&__pyx_v_current_time));

    /* "pygeoprocessing\routing\routing_core.pyx":542
 *     for global_block_row in xrange(int(ceil(float(n_rows) / block_row_size))):
 *         time(&current_time)
 *         if current_time - last_time > 5.0:             # <<<<<<<<<<<<<<
 *             LOGGER.info("calculate_flow_weights %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 *             last_time = current_time
 */
    __pyx_t_21 = (((__pyx_v_current_time - __pyx_v_last_time) > 5.0) != 0);
    if (__pyx_t_21) {

      /* "pygeoprocessing\routing\routing_core.pyx":543
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 *             LOGGER.info("calculate_flow_weights %.1f%% complete", (global_row + 1.0) / n_rows * 100)             # <<<<<<<<<<<<<<
 *             last_time = current_time
 *         for global_block_col in xrange(int(ceil(float(n_cols) / block_col_size))):
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyFloat_FromDouble((((__pyx_v_global_row + 1.0) / __pyx_v_n_rows) * 100.0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = NULL;
      __pyx_t_16 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_16 = 1;
        }
      }
      __pyx_t_10 = PyTuple_New(2+__pyx_t_16); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_4) {
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_calculate_flow_weights_1f_comple);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_16, __pyx_kp_s_calculate_flow_weights_1f_comple);
      __Pyx_GIVEREF(__pyx_kp_s_calculate_flow_weights_1f_comple);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_16, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":544
 *         if current_time - last_time > 5.0:
 *             LOGGER.info("calculate_flow_weights %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 *             last_time = current_time             # <<<<<<<<<<<<<<
 *         for global_block_col in xrange(int(ceil(float(n_cols) / block_col_size))):
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 */
      __pyx_v_last_time = __pyx_v_current_time;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "pygeoprocessing\routing\routing_core.pyx":545
 *             LOGGER.info("calculate_flow_weights %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 *             last_time = current_time
 *         for global_block_col in xrange(int(ceil(float(n_cols) / block_col_size))):             # <<<<<<<<<<<<<<
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):
 */
    __pyx_t_15 = PyFloat_FromDouble(ceil((((double)__pyx_v_n_cols) / __pyx_v_block_col_size))); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_15);
    __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_22 = __Pyx_PyInt_As_long(__pyx_t_15); if (unlikely((__pyx_t_22 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_22; __pyx_t_8+=1) {
      __pyx_v_global_block_col = __pyx_t_8;

      /* "pygeoprocessing\routing\routing_core.pyx":546
 *             last_time = current_time
 *         for global_block_col in xrange(int(ceil(float(n_cols) / block_col_size))):
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):             # <<<<<<<<<<<<<<
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):
 *                     block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)
 */
      __pyx_t_23 = __pyx_v_n_rows;
      __pyx_t_24 = ((__pyx_v_global_block_row + 1) * __pyx_v_block_row_size);
      if (((__pyx_t_23 < __pyx_t_24) != 0)) {
        __pyx_t_25 = __pyx_t_23;
      } else {
        __pyx_t_25 = __pyx_t_24;
      }
      __pyx_t_24 = __pyx_t_25;
      for (__pyx_t_23 = (__pyx_v_global_block_row * __pyx_v_block_row_size); __pyx_t_23 < __pyx_t_24; __pyx_t_23+=1) {
        __pyx_v_global_row = __pyx_t_23;

        /* "pygeoprocessing\routing\routing_core.pyx":547
 *         for global_block_col in xrange(int(ceil(float(n_cols) / block_col_size))):
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):             # <<<<<<<<<<<<<<
 *                     block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)
 *                     flow_direction = flow_direction_block[row_index, col_index, row_block_offset, col_block_offset]
 */
        __pyx_t_26 = __pyx_v_n_cols;
        __pyx_t_25 = ((__pyx_v_global_block_col + 1) * __pyx_v_block_col_size);
        if (((__pyx_t_26 < __pyx_t_25) != 0)) {
          __pyx_t_27 = __pyx_t_26;
        } else {
          __pyx_t_27 = __pyx_t_25;
        }
        __pyx_t_25 = __pyx_t_27;
        for (__pyx_t_26 = (__pyx_v_global_block_col * __pyx_v_block_col_size); __pyx_t_26 < __pyx_t_25; __pyx_t_26+=1) {
          __pyx_v_global_col = __pyx_t_26;

          /* "pygeoprocessing\routing\routing_core.pyx":548
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):
 *                     block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)             # <<<<<<<<<<<<<<
 *                     flow_direction = flow_direction_block[row_index, col_index, row_block_offset, col_block_offset]
 *                     #make sure the flow direction is defined, if not, skip this cell
 */
          ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_global_row, __pyx_v_global_col, (&__pyx_v_row_index), (&__pyx_v_col_index), (&__pyx_v_row_block_offset), (&__pyx_v_col_block_offset));

          /* "pygeoprocessing\routing\routing_core.pyx":549
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):
 *                     block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)
 *                     flow_direction = flow_direction_block[row_index, col_index, row_block_offset, col_block_offset]             # <<<<<<<<<<<<<<
 *                     #make sure the flow direction is defined, if not, skip this cell
 *                     if flow_direction == flow_direction_nodata:
 */
          __pyx_t_28 = __pyx_v_row_index;
          __pyx_t_29 = __pyx_v_col_index;
          __pyx_t_30 = __pyx_v_row_block_offset;
          __pyx_t_31 = __pyx_v_col_block_offset;
          __pyx_v_flow_direction = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_flow_direction_block.diminfo[0].strides, __pyx_t_29, __pyx_pybuffernd_flow_direction_block.diminfo[1].strides, __pyx_t_30, __pyx_pybuffernd_flow_direction_block.diminfo[2].strides, __pyx_t_31, __pyx_pybuffernd_flow_direction_block.diminfo[3].strides));

          /* "pygeoprocessing\routing\routing_core.pyx":551
 *                     flow_direction = flow_direction_block[row_index, col_index, row_block_offset, col_block_offset]
 *                     #make sure the flow direction is defined, if not, skip this cell
 *                     if flow_direction == flow_direction_nodata:             # <<<<<<<<<<<<<<
 *                         continue
 *                     found = False
 */
          __pyx_t_21 = ((__pyx_v_flow_direction == __pyx_v_flow_direction_nodata) != 0);
          if (__pyx_t_21) {

            /* "pygeoprocessing\routing\routing_core.pyx":552
 *                     #make sure the flow direction is defined, if not, skip this cell
 *                     if flow_direction == flow_direction_nodata:
 *                         continue             # <<<<<<<<<<<<<<
 *                     found = False
 *                     for neighbor_direction_index in range(n_neighbors):
 */
            goto __pyx_L14_continue;
          }

          /* "pygeoprocessing\routing\routing_core.pyx":553
 *                     if flow_direction == flow_direction_nodata:
 *                         continue
 *                     found = False             # <<<<<<<<<<<<<<
 *                     for neighbor_direction_index in range(n_neighbors):
 *                         flow_angle_to_neighbor = abs(angle_to_neighbor[neighbor_direction_index] - flow_direction)
 */
          __pyx_v_found = 0;

          /* "pygeoprocessing\routing\routing_core.pyx":554
 *                         continue
 *                     found = False
 *                     for neighbor_direction_index in range(n_neighbors):             # <<<<<<<<<<<<<<
 *                         flow_angle_to_neighbor = abs(angle_to_neighbor[neighbor_direction_index] - flow_direction)
 *                         if flow_angle_to_neighbor <= PI/4.0:
 */
          __pyx_t_32 = __pyx_v_n_neighbors;
          for (__pyx_t_33 = 0; __pyx_t_33 < __pyx_t_32; __pyx_t_33+=1) {
            __pyx_v_neighbor_direction_index = __pyx_t_33;

            /* "pygeoprocessing\routing\routing_core.pyx":555
 *                     found = False
 *                     for neighbor_direction_index in range(n_neighbors):
 *                         flow_angle_to_neighbor = abs(angle_to_neighbor[neighbor_direction_index] - flow_direction)             # <<<<<<<<<<<<<<
 *                         if flow_angle_to_neighbor <= PI/4.0:
 *                             found = True
 */
            __pyx_v_flow_angle_to_neighbor = fabs(((__pyx_v_angle_to_neighbor[__pyx_v_neighbor_direction_index]) - __pyx_v_flow_direction));

            /* "pygeoprocessing\routing\routing_core.pyx":556
 *                     for neighbor_direction_index in range(n_neighbors):
 *                         flow_angle_to_neighbor = abs(angle_to_neighbor[neighbor_direction_index] - flow_direction)
 *                         if flow_angle_to_neighbor <= PI/4.0:             # <<<<<<<<<<<<<<
 *                             found = True
 * 
 */
            __pyx_t_21 = ((__pyx_v_flow_angle_to_neighbor <= (__pyx_v_15pygeoprocessing_7routing_12routing_core_PI / 4.0)) != 0);
            if (__pyx_t_21) {

              /* "pygeoprocessing\routing\routing_core.pyx":557
 *                         flow_angle_to_neighbor = abs(angle_to_neighbor[neighbor_direction_index] - flow_direction)
 *                         if flow_angle_to_neighbor <= PI/4.0:
 *                             found = True             # <<<<<<<<<<<<<<
 * 
 *                             #Determine if the direction we're on is oriented at 90
 */
              __pyx_v_found = 1;

              /* "pygeoprocessing\routing\routing_core.pyx":562
 *                             #degrees or 45 degrees.  Given our orientation even number
 *                             #neighbor indexes are oriented 90 degrees and odd are 45
 *                             outflow_weight = 0.0             # <<<<<<<<<<<<<<
 * 
 *                             if neighbor_direction_index % 2 == 0:
 */
              __pyx_v_outflow_weight = 0.0;

              /* "pygeoprocessing\routing\routing_core.pyx":564
 *                             outflow_weight = 0.0
 * 
 *                             if neighbor_direction_index % 2 == 0:             # <<<<<<<<<<<<<<
 *                                 outflow_weight = 1.0 - tan(flow_angle_to_neighbor)
 *                             else:
 */
              __pyx_t_21 = (((__pyx_v_neighbor_direction_index % 2) == 0) != 0);
              if (__pyx_t_21) {

                /* "pygeoprocessing\routing\routing_core.pyx":565
 * 
 *                             if neighbor_direction_index % 2 == 0:
 *                                 outflow_weight = 1.0 - tan(flow_angle_to_neighbor)             # <<<<<<<<<<<<<<
 *                             else:
 *                                 outflow_weight = tan(PI/4.0 - flow_angle_to_neighbor)
 */
                __pyx_v_outflow_weight = (1.0 - tan(__pyx_v_flow_angle_to_neighbor));
                goto __pyx_L20;
              }
              /*else*/ {

                /* "pygeoprocessing\routing\routing_core.pyx":567
 *                                 outflow_weight = 1.0 - tan(flow_angle_to_neighbor)
 *                             else:
 *                                 outflow_weight = tan(PI/4.0 - flow_angle_to_neighbor)             # <<<<<<<<<<<<<<
 * 
 *                             # clamping the outflow weight in case it's too large or small
 */
                __pyx_v_outflow_weight = tan(((__pyx_v_15pygeoprocessing_7routing_12routing_core_PI / 4.0) - __pyx_v_flow_angle_to_neighbor));
              }
              __pyx_L20:;

              /* "pygeoprocessing\routing\routing_core.pyx":570
 * 
 *                             # clamping the outflow weight in case it's too large or small
 *                             if outflow_weight >= 1.0 - 1e-6:             # <<<<<<<<<<<<<<
 *                                 outflow_weight = 1.0
 *                             if outflow_weight <= 1e-6:
 */
              __pyx_t_21 = ((__pyx_v_outflow_weight >= (1.0 - 1e-6)) != 0);
              if (__pyx_t_21) {

                /* "pygeoprocessing\routing\routing_core.pyx":571
 *                             # clamping the outflow weight in case it's too large or small
 *                             if outflow_weight >= 1.0 - 1e-6:
 *                                 outflow_weight = 1.0             # <<<<<<<<<<<<<<
 *                             if outflow_weight <= 1e-6:
 *                                 outflow_weight = 1.0
 */
                __pyx_v_outflow_weight = 1.0;
                goto __pyx_L21;
              }
              __pyx_L21:;

              /* "pygeoprocessing\routing\routing_core.pyx":572
 *                             if outflow_weight >= 1.0 - 1e-6:
 *                                 outflow_weight = 1.0
 *                             if outflow_weight <= 1e-6:             # <<<<<<<<<<<<<<
 *                                 outflow_weight = 1.0
 *                                 neighbor_direction_index = (neighbor_direction_index + 1) % 8
 */
              __pyx_t_21 = ((__pyx_v_outflow_weight <= 1e-6) != 0);
              if (__pyx_t_21) {

                /* "pygeoprocessing\routing\routing_core.pyx":573
 *                                 outflow_weight = 1.0
 *                             if outflow_weight <= 1e-6:
 *                                 outflow_weight = 1.0             # <<<<<<<<<<<<<<
 *                                 neighbor_direction_index = (neighbor_direction_index + 1) % 8
 *                             outflow_direction_block[row_index, col_index, row_block_offset, col_block_offset] = neighbor_direction_index
 */
                __pyx_v_outflow_weight = 1.0;

                /* "pygeoprocessing\routing\routing_core.pyx":574
 *                             if outflow_weight <= 1e-6:
 *                                 outflow_weight = 1.0
 *                                 neighbor_direction_index = (neighbor_direction_index + 1) % 8             # <<<<<<<<<<<<<<
 *                             outflow_direction_block[row_index, col_index, row_block_offset, col_block_offset] = neighbor_direction_index
 *                             outflow_weights_block[row_index, col_index, row_block_offset, col_block_offset] = outflow_weight
 */
                __pyx_v_neighbor_direction_index = ((__pyx_v_neighbor_direction_index + 1) % 8);
                goto __pyx_L22;
              }
              __pyx_L22:;

              /* "pygeoprocessing\routing\routing_core.pyx":575
 *                                 outflow_weight = 1.0
 *                                 neighbor_direction_index = (neighbor_direction_index + 1) % 8
 *                             outflow_direction_block[row_index, col_index, row_block_offset, col_block_offset] = neighbor_direction_index             # <<<<<<<<<<<<<<
 *                             outflow_weights_block[row_index, col_index, row_block_offset, col_block_offset] = outflow_weight
 *                             cache_dirty[row_index, col_index] = 1
 */
              __pyx_t_34 = __pyx_v_row_index;
              __pyx_t_35 = __pyx_v_col_index;
              __pyx_t_36 = __pyx_v_row_block_offset;
              __pyx_t_37 = __pyx_v_col_block_offset;
              *__Pyx_BufPtrStrided4d(npy_byte *, __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.buf, __pyx_t_34, __pyx_pybuffernd_outflow_direction_block.diminfo[0].strides, __pyx_t_35, __pyx_pybuffernd_outflow_direction_block.diminfo[1].strides, __pyx_t_36, __pyx_pybuffernd_outflow_direction_block.diminfo[2].strides, __pyx_t_37, __pyx_pybuffernd_outflow_direction_block.diminfo[3].strides) = __pyx_v_neighbor_direction_index;

              /* "pygeoprocessing\routing\routing_core.pyx":576
 *                                 neighbor_direction_index = (neighbor_direction_index + 1) % 8
 *                             outflow_direction_block[row_index, col_index, row_block_offset, col_block_offset] = neighbor_direction_index
 *                             outflow_weights_block[row_index, col_index, row_block_offset, col_block_offset] = outflow_weight             # <<<<<<<<<<<<<<
 *                             cache_dirty[row_index, col_index] = 1
 * 
 */
              __pyx_t_38 = __pyx_v_row_index;
              __pyx_t_39 = __pyx_v_col_index;
              __pyx_t_40 = __pyx_v_row_block_offset;
              __pyx_t_41 = __pyx_v_col_block_offset;
              *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_outflow_weights_block.diminfo[0].strides, __pyx_t_39, __pyx_pybuffernd_outflow_weights_block.diminfo[1].strides, __pyx_t_40, __pyx_pybuffernd_outflow_weights_block.diminfo[2].strides, __pyx_t_41, __pyx_pybuffernd_outflow_weights_block.diminfo[3].strides) = __pyx_v_outflow_weight;

              /* "pygeoprocessing\routing\routing_core.pyx":577
 *                             outflow_direction_block[row_index, col_index, row_block_offset, col_block_offset] = neighbor_direction_index
 *                             outflow_weights_block[row_index, col_index, row_block_offset, col_block_offset] = outflow_weight
 *                             cache_dirty[row_index, col_index] = 1             # <<<<<<<<<<<<<<
 * 
 *                             #we found the outflow direction
 */
              __pyx_t_42 = __pyx_v_row_index;
              __pyx_t_43 = __pyx_v_col_index;
              *__Pyx_BufPtrStrided2d(npy_int8 *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_42, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_43, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;

              /* "pygeoprocessing\routing\routing_core.pyx":580
 * 
 *                             #we found the outflow direction
 *                             break             # <<<<<<<<<<<<<<
 *                     if not found:
 *                         LOGGER.warn('no flow direction found for %s %s' % \
 */
              goto __pyx_L18_break;
            }
          }
          __pyx_L18_break:;

          /* "pygeoprocessing\routing\routing_core.pyx":581
 *                             #we found the outflow direction
 *                             break
 *                     if not found:             # <<<<<<<<<<<<<<
 *                         LOGGER.warn('no flow direction found for %s %s' % \
 *                                          (row_index, col_index))
 */
          __pyx_t_21 = ((!(__pyx_v_found != 0)) != 0);
          if (__pyx_t_21) {

            /* "pygeoprocessing\routing\routing_core.pyx":582
 *                             break
 *                     if not found:
 *                         LOGGER.warn('no flow direction found for %s %s' % \             # <<<<<<<<<<<<<<
 *                                          (row_index, col_index))
 *     block_cache.flush_cache()
 */
            __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_warn); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "pygeoprocessing\routing\routing_core.pyx":583
 *                     if not found:
 *                         LOGGER.warn('no flow direction found for %s %s' % \
 *                                          (row_index, col_index))             # <<<<<<<<<<<<<<
 *     block_cache.flush_cache()
 * 
 */
            __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_row_index); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_col_index); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_4);
            PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_2 = 0;
            __pyx_t_1 = 0;

            /* "pygeoprocessing\routing\routing_core.pyx":582
 *                             break
 *                     if not found:
 *                         LOGGER.warn('no flow direction found for %s %s' % \             # <<<<<<<<<<<<<<
 *                                          (row_index, col_index))
 *     block_cache.flush_cache()
 */
            __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_no_flow_direction_found_for_s_s, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_10))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_10, function);
              }
            }
            if (!__pyx_t_4) {
              __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_1); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_GOTREF(__pyx_t_15);
            } else {
              __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_2);
              PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
              PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_1);
              __pyx_t_1 = 0;
              __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_2, NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            goto __pyx_L23;
          }
          __pyx_L23:;
          __pyx_L14_continue:;
        }
      }
    }
  }

  /* "pygeoprocessing\routing\routing_core.pyx":584
 *                         LOGGER.warn('no flow direction found for %s %s' % \
 *                                          (row_index, col_index))
 *     block_cache.flush_cache()             # <<<<<<<<<<<<<<
 * 
 * cdef struct Row_Col_Weight_Tuple:
 */
  ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->flush_cache(__pyx_v_block_cache);

  /* "pygeoprocessing\routing\routing_core.pyx":444
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def calculate_flow_weights(             # <<<<<<<<<<<<<<
 *     flow_direction_uri, outflow_weights_uri, outflow_direction_uri):
 *     """This function calculates the flow weights from a d-infinity based
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_15);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.calculate_flow_weights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_flow_direction_dataset);
  __Pyx_XDECREF(__pyx_v_flow_direction_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_direction_block);
  __Pyx_XDECREF(__pyx_v_outflow_direction_dataset);
  __Pyx_XDECREF(__pyx_v_outflow_direction_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_outflow_direction_block);
  __Pyx_XDECREF(__pyx_v_outflow_weights_dataset);
  __Pyx_XDECREF(__pyx_v_outflow_weights_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_outflow_weights_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_cache_dirty);
  __Pyx_XDECREF(__pyx_v_band_list);
  __Pyx_XDECREF(__pyx_v_block_list);
  __Pyx_XDECREF(__pyx_v_update_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_block_cache);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":592
 * 
 * 
 * def fill_pits(dem_uri, dem_out_uri):             # <<<<<<<<<<<<<<
 *     """This function fills regions in a DEM that don't drain to the edge
 *         of the dataset.  The resulting DEM will likely have plateaus where the
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_3fill_pits(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15pygeoprocessing_7routing_12routing_core_2fill_pits[] = "This function fills regions in a DEM that don't drain to the edge\n        of the dataset.  The resulting DEM will likely have plateaus where the\n        pits are filled.\n\n        dem_uri - the original dem URI\n        dem_out_uri - the original dem with pits raised to the highest drain\n            value\n\n        returns nothing";
static PyMethodDef __pyx_mdef_15pygeoprocessing_7routing_12routing_core_3fill_pits = {"fill_pits", (PyCFunction)__pyx_pw_15pygeoprocessing_7routing_12routing_core_3fill_pits, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15pygeoprocessing_7routing_12routing_core_2fill_pits};
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_3fill_pits(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dem_uri = 0;
  PyObject *__pyx_v_dem_out_uri = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_pits (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dem_uri,&__pyx_n_s_dem_out_uri,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dem_uri)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dem_out_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fill_pits", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_pits") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dem_uri = values[0];
    __pyx_v_dem_out_uri = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_pits", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.fill_pits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pygeoprocessing_7routing_12routing_core_2fill_pits(__pyx_self, __pyx_v_dem_uri, __pyx_v_dem_out_uri);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_2fill_pits(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_uri, PyObject *__pyx_v_dem_out_uri) {
  int *__pyx_v_row_offsets;
  int *__pyx_v_col_offsets;
  PyObject *__pyx_v_dem_ds = NULL;
  int __pyx_v_n_rows;
  int __pyx_v_n_cols;
  PyObject *__pyx_v_dem_band = NULL;
  PyObject *__pyx_v_raw_nodata_value = NULL;
  double __pyx_v_nodata_value;
  PyObject *__pyx_v_dem_out_ds = NULL;
  PyObject *__pyx_v_dem_out_band = NULL;
  int __pyx_v_row_index;
  int __pyx_v_col_index;
  int __pyx_v_neighbor_index;
  float __pyx_v_min_dem_value;
  float __pyx_v_cur_dem_value;
  float __pyx_v_neighbor_dem_value;
  int __pyx_v_pit_count;
  PyObject *__pyx_v_dem_out_array = NULL;
  PyArrayObject *__pyx_v_dem_array = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dem_array;
  __Pyx_Buffer __pyx_pybuffer_dem_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[8];
  int __pyx_t_2[8];
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  double __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  long __pyx_t_16;
  PyArrayObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  long __pyx_t_21;
  long __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  long __pyx_t_25;
  int __pyx_t_26;
  int __pyx_t_27;
  long __pyx_t_28;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fill_pits", 0);
  __pyx_pybuffer_dem_array.pybuffer.buf = NULL;
  __pyx_pybuffer_dem_array.refcount = 0;
  __pyx_pybuffernd_dem_array.data = NULL;
  __pyx_pybuffernd_dem_array.rcbuffer = &__pyx_pybuffer_dem_array;

  /* "pygeoprocessing\routing\routing_core.pyx":603
 *         returns nothing"""
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]             # <<<<<<<<<<<<<<
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 */
  __pyx_t_1[0] = 0;
  __pyx_t_1[1] = -1;
  __pyx_t_1[2] = -1;
  __pyx_t_1[3] = -1;
  __pyx_t_1[4] = 0;
  __pyx_t_1[5] = 1;
  __pyx_t_1[6] = 1;
  __pyx_t_1[7] = 1;
  __pyx_v_row_offsets = __pyx_t_1;

  /* "pygeoprocessing\routing\routing_core.pyx":604
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]             # <<<<<<<<<<<<<<
 * 
 *     dem_ds = gdal.Open(dem_uri, gdal.GA_ReadOnly)
 */
  __pyx_t_2[0] = 1;
  __pyx_t_2[1] = 1;
  __pyx_t_2[2] = 0;
  __pyx_t_2[3] = -1;
  __pyx_t_2[4] = -1;
  __pyx_t_2[5] = -1;
  __pyx_t_2[6] = 0;
  __pyx_t_2[7] = 1;
  __pyx_v_col_offsets = __pyx_t_2;

  /* "pygeoprocessing\routing\routing_core.pyx":606
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 *     dem_ds = gdal.Open(dem_uri, gdal.GA_ReadOnly)             # <<<<<<<<<<<<<<
 *     cdef int n_rows = dem_ds.RasterYSize
 *     cdef int n_cols = dem_ds.RasterXSize
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Open); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_GA_ReadOnly); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_INCREF(__pyx_v_dem_uri);
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_dem_uri);
  __Pyx_GIVEREF(__pyx_v_dem_uri);
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_dem_ds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":607
 * 
 *     dem_ds = gdal.Open(dem_uri, gdal.GA_ReadOnly)
 *     cdef int n_rows = dem_ds.RasterYSize             # <<<<<<<<<<<<<<
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_RasterYSize); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_n_rows = __pyx_t_9;

  /* "pygeoprocessing\routing\routing_core.pyx":608
 *     dem_ds = gdal.Open(dem_uri, gdal.GA_ReadOnly)
 *     cdef int n_rows = dem_ds.RasterYSize
 *     cdef int n_cols = dem_ds.RasterXSize             # <<<<<<<<<<<<<<
 * 
 *     dem_band = dem_ds.GetRasterBand(1)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_RasterXSize); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_n_cols = __pyx_t_9;

  /* "pygeoprocessing\routing\routing_core.pyx":610
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 *     dem_band = dem_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     #copy the dem to a different dataset so we know the type
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dem_band = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":613
 * 
 *     #copy the dem to a different dataset so we know the type
 *     dem_band = dem_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     raw_nodata_value = pygeoprocessing.get_nodata_from_uri(dem_uri)
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dem_band, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":614
 *     #copy the dem to a different dataset so we know the type
 *     dem_band = dem_ds.GetRasterBand(1)
 *     raw_nodata_value = pygeoprocessing.get_nodata_from_uri(dem_uri)             # <<<<<<<<<<<<<<
 * 
 *     cdef double nodata_value
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_dem_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_dem_uri);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_dem_uri);
    __Pyx_GIVEREF(__pyx_v_dem_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_raw_nodata_value = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":617
 * 
 *     cdef double nodata_value
 *     if raw_nodata_value is not None:             # <<<<<<<<<<<<<<
 *         nodata_value = raw_nodata_value
 *     else:
 */
  __pyx_t_10 = (__pyx_v_raw_nodata_value != Py_None);
  __pyx_t_11 = (__pyx_t_10 != 0);
  if (__pyx_t_11) {

    /* "pygeoprocessing\routing\routing_core.pyx":618
 *     cdef double nodata_value
 *     if raw_nodata_value is not None:
 *         nodata_value = raw_nodata_value             # <<<<<<<<<<<<<<
 *     else:
 *         LOGGER.warn("Nodata value not set, defaulting to -9999.9")
 */
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_raw_nodata_value); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_nodata_value = __pyx_t_12;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pygeoprocessing\routing\routing_core.pyx":620
 *         nodata_value = raw_nodata_value
 *     else:
 *         LOGGER.warn("Nodata value not set, defaulting to -9999.9")             # <<<<<<<<<<<<<<
 *         nodata_value = -9999.9
 *     pygeoprocessing.new_raster_from_base_uri(
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":621
 *     else:
 *         LOGGER.warn("Nodata value not set, defaulting to -9999.9")
 *         nodata_value = -9999.9             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base_uri(
 *         dem_uri, dem_out_uri, 'GTiff', nodata_value, gdal.GDT_Float32,
 */
    __pyx_v_nodata_value = -9999.9;
  }
  __pyx_L3:;

  /* "pygeoprocessing\routing\routing_core.pyx":622
 *         LOGGER.warn("Nodata value not set, defaulting to -9999.9")
 *         nodata_value = -9999.9
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         dem_uri, dem_out_uri, 'GTiff', nodata_value, gdal.GDT_Float32,
 *         INF)
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_new_raster_from_base_uri); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":623
 *         nodata_value = -9999.9
 *     pygeoprocessing.new_raster_from_base_uri(
 *         dem_uri, dem_out_uri, 'GTiff', nodata_value, gdal.GDT_Float32,             # <<<<<<<<<<<<<<
 *         INF)
 *     dem_out_ds = gdal.Open(dem_out_uri, gdal.GA_Update)
 */
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_nodata_value); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_GDT_Float32); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":624
 *     pygeoprocessing.new_raster_from_base_uri(
 *         dem_uri, dem_out_uri, 'GTiff', nodata_value, gdal.GDT_Float32,
 *         INF)             # <<<<<<<<<<<<<<
 *     dem_out_ds = gdal.Open(dem_out_uri, gdal.GA_Update)
 *     dem_out_band = dem_out_ds.GetRasterBand(1)
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_15pygeoprocessing_7routing_12routing_core_INF); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_13 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_14 = PyTuple_New(6+__pyx_t_7); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  if (__pyx_t_13) {
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13); __Pyx_GIVEREF(__pyx_t_13); __pyx_t_13 = NULL;
  }
  __Pyx_INCREF(__pyx_v_dem_uri);
  PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_7, __pyx_v_dem_uri);
  __Pyx_GIVEREF(__pyx_v_dem_uri);
  __Pyx_INCREF(__pyx_v_dem_out_uri);
  PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_7, __pyx_v_dem_out_uri);
  __Pyx_GIVEREF(__pyx_v_dem_out_uri);
  __Pyx_INCREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_7, __pyx_n_s_GTiff);
  __Pyx_GIVEREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_14, 3+__pyx_t_7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_14, 4+__pyx_t_7, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_14, 5+__pyx_t_7, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_8 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":625
 *         dem_uri, dem_out_uri, 'GTiff', nodata_value, gdal.GDT_Float32,
 *         INF)
 *     dem_out_ds = gdal.Open(dem_out_uri, gdal.GA_Update)             # <<<<<<<<<<<<<<
 *     dem_out_band = dem_out_ds.GetRasterBand(1)
 *     cdef int row_index, col_index, neighbor_index
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_Open); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_4 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (__pyx_t_6) {
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
  }
  __Pyx_INCREF(__pyx_v_dem_out_uri);
  PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_7, __pyx_v_dem_out_uri);
  __Pyx_GIVEREF(__pyx_v_dem_out_uri);
  PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_7, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_v_dem_out_ds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":626
 *         INF)
 *     dem_out_ds = gdal.Open(dem_out_uri, gdal.GA_Update)
 *     dem_out_band = dem_out_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int row_index, col_index, neighbor_index
 *     cdef float min_dem_value, cur_dem_value, neighbor_dem_value
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_out_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dem_out_band = __pyx_t_14;
  __pyx_t_14 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":629
 *     cdef int row_index, col_index, neighbor_index
 *     cdef float min_dem_value, cur_dem_value, neighbor_dem_value
 *     cdef int pit_count = 0             # <<<<<<<<<<<<<<
 * 
 *     for row_index in range(n_rows):
 */
  __pyx_v_pit_count = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":631
 *     cdef int pit_count = 0
 * 
 *     for row_index in range(n_rows):             # <<<<<<<<<<<<<<
 *         dem_out_array = dem_band.ReadAsArray(
 *             xoff=0, yoff=row_index, win_xsize=n_cols, win_ysize=1)
 */
  __pyx_t_9 = __pyx_v_n_rows;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_9; __pyx_t_15+=1) {
    __pyx_v_row_index = __pyx_t_15;

    /* "pygeoprocessing\routing\routing_core.pyx":632
 * 
 *     for row_index in range(n_rows):
 *         dem_out_array = dem_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             xoff=0, yoff=row_index, win_xsize=n_cols, win_ysize=1)
 *         dem_out_band.WriteArray(dem_out_array, xoff=0, yoff=row_index)
 */
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_xoff, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pygeoprocessing\routing\routing_core.pyx":633
 *     for row_index in range(n_rows):
 *         dem_out_array = dem_band.ReadAsArray(
 *             xoff=0, yoff=row_index, win_xsize=n_cols, win_ysize=1)             # <<<<<<<<<<<<<<
 *         dem_out_band.WriteArray(dem_out_array, xoff=0, yoff=row_index)
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_row_index); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_yoff, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_win_xsize, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_win_ysize, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pygeoprocessing\routing\routing_core.pyx":632
 * 
 *     for row_index in range(n_rows):
 *         dem_out_array = dem_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             xoff=0, yoff=row_index, win_xsize=n_cols, win_ysize=1)
 *         dem_out_band.WriteArray(dem_out_array, xoff=0, yoff=row_index)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_dem_out_array, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":634
 *         dem_out_array = dem_band.ReadAsArray(
 *             xoff=0, yoff=row_index, win_xsize=n_cols, win_ysize=1)
 *         dem_out_band.WriteArray(dem_out_array, xoff=0, yoff=row_index)             # <<<<<<<<<<<<<<
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=2] dem_array
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_out_band, __pyx_n_s_WriteArray); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_dem_out_array);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_dem_out_array);
    __Pyx_GIVEREF(__pyx_v_dem_out_array);
    __pyx_t_14 = PyDict_New(); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_xoff, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_row_index); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_yoff, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "pygeoprocessing\routing\routing_core.pyx":638
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=2] dem_array
 * 
 *     for row_index in range(1, n_rows - 1):             # <<<<<<<<<<<<<<
 *         #load 3 rows at a time
 *         dem_array = dem_out_band.ReadAsArray(
 */
  __pyx_t_16 = (__pyx_v_n_rows - 1);
  for (__pyx_t_9 = 1; __pyx_t_9 < __pyx_t_16; __pyx_t_9+=1) {
    __pyx_v_row_index = __pyx_t_9;

    /* "pygeoprocessing\routing\routing_core.pyx":640
 *     for row_index in range(1, n_rows - 1):
 *         #load 3 rows at a time
 *         dem_array = dem_out_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             xoff=0, yoff=row_index-1, win_xsize=n_cols, win_ysize=3)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_out_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_14 = PyDict_New(); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_xoff, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pygeoprocessing\routing\routing_core.pyx":641
 *         #load 3 rows at a time
 *         dem_array = dem_out_band.ReadAsArray(
 *             xoff=0, yoff=row_index-1, win_xsize=n_cols, win_ysize=3)             # <<<<<<<<<<<<<<
 * 
 *         for col_index in range(1, n_cols - 1):
 */
    __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_row_index - 1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_yoff, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_win_xsize, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_win_ysize, __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pygeoprocessing\routing\routing_core.pyx":640
 *     for row_index in range(1, n_rows - 1):
 *         #load 3 rows at a time
 *         dem_array = dem_out_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             xoff=0, yoff=row_index-1, win_xsize=n_cols, win_ysize=3)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_14); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_17 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_array.rcbuffer->pybuffer);
      __pyx_t_15 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dem_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_17, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_15 < 0)) {
        PyErr_Fetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dem_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_dem_array, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_18); Py_XDECREF(__pyx_t_19); Py_XDECREF(__pyx_t_20);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
        }
      }
      __pyx_pybuffernd_dem_array.diminfo[0].strides = __pyx_pybuffernd_dem_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dem_array.diminfo[0].shape = __pyx_pybuffernd_dem_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dem_array.diminfo[1].strides = __pyx_pybuffernd_dem_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dem_array.diminfo[1].shape = __pyx_pybuffernd_dem_array.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_17 = 0;
    __Pyx_XDECREF_SET(__pyx_v_dem_array, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":643
 *             xoff=0, yoff=row_index-1, win_xsize=n_cols, win_ysize=3)
 * 
 *         for col_index in range(1, n_cols - 1):             # <<<<<<<<<<<<<<
 *             min_dem_value = nodata_value
 *             cur_dem_value = dem_array[1, col_index]
 */
    __pyx_t_21 = (__pyx_v_n_cols - 1);
    for (__pyx_t_15 = 1; __pyx_t_15 < __pyx_t_21; __pyx_t_15+=1) {
      __pyx_v_col_index = __pyx_t_15;

      /* "pygeoprocessing\routing\routing_core.pyx":644
 * 
 *         for col_index in range(1, n_cols - 1):
 *             min_dem_value = nodata_value             # <<<<<<<<<<<<<<
 *             cur_dem_value = dem_array[1, col_index]
 *             if cur_dem_value == nodata_value:
 */
      __pyx_v_min_dem_value = __pyx_v_nodata_value;

      /* "pygeoprocessing\routing\routing_core.pyx":645
 *         for col_index in range(1, n_cols - 1):
 *             min_dem_value = nodata_value
 *             cur_dem_value = dem_array[1, col_index]             # <<<<<<<<<<<<<<
 *             if cur_dem_value == nodata_value:
 *                 continue
 */
      __pyx_t_22 = 1;
      __pyx_t_23 = __pyx_v_col_index;
      __pyx_t_24 = -1;
      if (__pyx_t_22 < 0) {
        __pyx_t_22 += __pyx_pybuffernd_dem_array.diminfo[0].shape;
        if (unlikely(__pyx_t_22 < 0)) __pyx_t_24 = 0;
      } else if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_dem_array.diminfo[0].shape)) __pyx_t_24 = 0;
      if (__pyx_t_23 < 0) {
        __pyx_t_23 += __pyx_pybuffernd_dem_array.diminfo[1].shape;
        if (unlikely(__pyx_t_23 < 0)) __pyx_t_24 = 1;
      } else if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_dem_array.diminfo[1].shape)) __pyx_t_24 = 1;
      if (unlikely(__pyx_t_24 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_24);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_cur_dem_value = (*__Pyx_BufPtrStrided2d(npy_float32 *, __pyx_pybuffernd_dem_array.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_dem_array.diminfo[0].strides, __pyx_t_23, __pyx_pybuffernd_dem_array.diminfo[1].strides));

      /* "pygeoprocessing\routing\routing_core.pyx":646
 *             min_dem_value = nodata_value
 *             cur_dem_value = dem_array[1, col_index]
 *             if cur_dem_value == nodata_value:             # <<<<<<<<<<<<<<
 *                 continue
 *             for neighbor_index in range(8):
 */
      __pyx_t_11 = ((__pyx_v_cur_dem_value == __pyx_v_nodata_value) != 0);
      if (__pyx_t_11) {

        /* "pygeoprocessing\routing\routing_core.pyx":647
 *             cur_dem_value = dem_array[1, col_index]
 *             if cur_dem_value == nodata_value:
 *                 continue             # <<<<<<<<<<<<<<
 *             for neighbor_index in range(8):
 *                 neighbor_dem_value = dem_array[
 */
        goto __pyx_L8_continue;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":648
 *             if cur_dem_value == nodata_value:
 *                 continue
 *             for neighbor_index in range(8):             # <<<<<<<<<<<<<<
 *                 neighbor_dem_value = dem_array[
 *                     1 + row_offsets[neighbor_index],
 */
      for (__pyx_t_24 = 0; __pyx_t_24 < 8; __pyx_t_24+=1) {
        __pyx_v_neighbor_index = __pyx_t_24;

        /* "pygeoprocessing\routing\routing_core.pyx":649
 *                 continue
 *             for neighbor_index in range(8):
 *                 neighbor_dem_value = dem_array[             # <<<<<<<<<<<<<<
 *                     1 + row_offsets[neighbor_index],
 *                     col_index + col_offsets[neighbor_index]]
 */
        __pyx_t_25 = (1 + (__pyx_v_row_offsets[__pyx_v_neighbor_index]));
        __pyx_t_26 = (__pyx_v_col_index + (__pyx_v_col_offsets[__pyx_v_neighbor_index]));
        __pyx_t_27 = -1;
        if (__pyx_t_25 < 0) {
          __pyx_t_25 += __pyx_pybuffernd_dem_array.diminfo[0].shape;
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_27 = 0;
        } else if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_dem_array.diminfo[0].shape)) __pyx_t_27 = 0;
        if (__pyx_t_26 < 0) {
          __pyx_t_26 += __pyx_pybuffernd_dem_array.diminfo[1].shape;
          if (unlikely(__pyx_t_26 < 0)) __pyx_t_27 = 1;
        } else if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_dem_array.diminfo[1].shape)) __pyx_t_27 = 1;
        if (unlikely(__pyx_t_27 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_27);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_neighbor_dem_value = (*__Pyx_BufPtrStrided2d(npy_float32 *, __pyx_pybuffernd_dem_array.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_dem_array.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_dem_array.diminfo[1].strides));

        /* "pygeoprocessing\routing\routing_core.pyx":652
 *                     1 + row_offsets[neighbor_index],
 *                     col_index + col_offsets[neighbor_index]]
 *                 if neighbor_dem_value == nodata_value:             # <<<<<<<<<<<<<<
 *                     continue
 *                 if (neighbor_dem_value < min_dem_value or
 */
        __pyx_t_11 = ((__pyx_v_neighbor_dem_value == __pyx_v_nodata_value) != 0);
        if (__pyx_t_11) {

          /* "pygeoprocessing\routing\routing_core.pyx":653
 *                     col_index + col_offsets[neighbor_index]]
 *                 if neighbor_dem_value == nodata_value:
 *                     continue             # <<<<<<<<<<<<<<
 *                 if (neighbor_dem_value < min_dem_value or
 *                     min_dem_value == nodata_value):
 */
          goto __pyx_L11_continue;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":654
 *                 if neighbor_dem_value == nodata_value:
 *                     continue
 *                 if (neighbor_dem_value < min_dem_value or             # <<<<<<<<<<<<<<
 *                     min_dem_value == nodata_value):
 *                     min_dem_value = neighbor_dem_value
 */
        __pyx_t_10 = ((__pyx_v_neighbor_dem_value < __pyx_v_min_dem_value) != 0);
        if (!__pyx_t_10) {
        } else {
          __pyx_t_11 = __pyx_t_10;
          goto __pyx_L15_bool_binop_done;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":655
 *                     continue
 *                 if (neighbor_dem_value < min_dem_value or
 *                     min_dem_value == nodata_value):             # <<<<<<<<<<<<<<
 *                     min_dem_value = neighbor_dem_value
 *             if min_dem_value > cur_dem_value:
 */
        __pyx_t_10 = ((__pyx_v_min_dem_value == __pyx_v_nodata_value) != 0);
        __pyx_t_11 = __pyx_t_10;
        __pyx_L15_bool_binop_done:;
        if (__pyx_t_11) {

          /* "pygeoprocessing\routing\routing_core.pyx":656
 *                 if (neighbor_dem_value < min_dem_value or
 *                     min_dem_value == nodata_value):
 *                     min_dem_value = neighbor_dem_value             # <<<<<<<<<<<<<<
 *             if min_dem_value > cur_dem_value:
 *                 #it's a pit, bump it up
 */
          __pyx_v_min_dem_value = __pyx_v_neighbor_dem_value;
          goto __pyx_L14;
        }
        __pyx_L14:;
        __pyx_L11_continue:;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":657
 *                     min_dem_value == nodata_value):
 *                     min_dem_value = neighbor_dem_value
 *             if min_dem_value > cur_dem_value:             # <<<<<<<<<<<<<<
 *                 #it's a pit, bump it up
 *                 dem_array[1, col_index] = min_dem_value
 */
      __pyx_t_11 = ((__pyx_v_min_dem_value > __pyx_v_cur_dem_value) != 0);
      if (__pyx_t_11) {

        /* "pygeoprocessing\routing\routing_core.pyx":659
 *             if min_dem_value > cur_dem_value:
 *                 #it's a pit, bump it up
 *                 dem_array[1, col_index] = min_dem_value             # <<<<<<<<<<<<<<
 *                 pit_count += 1
 * 
 */
        __pyx_t_28 = 1;
        __pyx_t_24 = __pyx_v_col_index;
        __pyx_t_27 = -1;
        if (__pyx_t_28 < 0) {
          __pyx_t_28 += __pyx_pybuffernd_dem_array.diminfo[0].shape;
          if (unlikely(__pyx_t_28 < 0)) __pyx_t_27 = 0;
        } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_dem_array.diminfo[0].shape)) __pyx_t_27 = 0;
        if (__pyx_t_24 < 0) {
          __pyx_t_24 += __pyx_pybuffernd_dem_array.diminfo[1].shape;
          if (unlikely(__pyx_t_24 < 0)) __pyx_t_27 = 1;
        } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_dem_array.diminfo[1].shape)) __pyx_t_27 = 1;
        if (unlikely(__pyx_t_27 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_27);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        *__Pyx_BufPtrStrided2d(npy_float32 *, __pyx_pybuffernd_dem_array.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_dem_array.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_dem_array.diminfo[1].strides) = __pyx_v_min_dem_value;

        /* "pygeoprocessing\routing\routing_core.pyx":660
 *                 #it's a pit, bump it up
 *                 dem_array[1, col_index] = min_dem_value
 *                 pit_count += 1             # <<<<<<<<<<<<<<
 * 
 *         dem_out_band.WriteArray(
 */
        __pyx_v_pit_count = (__pyx_v_pit_count + 1);
        goto __pyx_L17;
      }
      __pyx_L17:;
      __pyx_L8_continue:;
    }

    /* "pygeoprocessing\routing\routing_core.pyx":662
 *                 pit_count += 1
 * 
 *         dem_out_band.WriteArray(             # <<<<<<<<<<<<<<
 *             dem_array[1, :].reshape((1,n_cols)), xoff=0, yoff=row_index)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_out_band, __pyx_n_s_WriteArray); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pygeoprocessing\routing\routing_core.pyx":663
 * 
 *         dem_out_band.WriteArray(
 *             dem_array[1, :].reshape((1,n_cols)), xoff=0, yoff=row_index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = PyObject_GetItem(((PyObject *)__pyx_v_dem_array), __pyx_tuple__23); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_reshape); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_14);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":662
 *                 pit_count += 1
 * 
 *         dem_out_band.WriteArray(             # <<<<<<<<<<<<<<
 *             dem_array[1, :].reshape((1,n_cols)), xoff=0, yoff=row_index)
 * 
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_14);
    __pyx_t_14 = 0;
    __pyx_t_14 = PyDict_New(); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_xoff, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pygeoprocessing\routing\routing_core.pyx":663
 * 
 *         dem_out_band.WriteArray(
 *             dem_array[1, :].reshape((1,n_cols)), xoff=0, yoff=row_index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_row_index); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_yoff, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":662
 *                 pit_count += 1
 * 
 *         dem_out_band.WriteArray(             # <<<<<<<<<<<<<<
 *             dem_array[1, :].reshape((1,n_cols)), xoff=0, yoff=row_index)
 * 
 */
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_14); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }

  /* "pygeoprocessing\routing\routing_core.pyx":592
 * 
 * 
 * def fill_pits(dem_uri, dem_out_uri):             # <<<<<<<<<<<<<<
 *     """This function fills regions in a DEM that don't drain to the edge
 *         of the dataset.  The resulting DEM will likely have plateaus where the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.fill_pits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_dem_ds);
  __Pyx_XDECREF(__pyx_v_dem_band);
  __Pyx_XDECREF(__pyx_v_raw_nodata_value);
  __Pyx_XDECREF(__pyx_v_dem_out_ds);
  __Pyx_XDECREF(__pyx_v_dem_out_band);
  __Pyx_XDECREF(__pyx_v_dem_out_array);
  __Pyx_XDECREF((PyObject *)__pyx_v_dem_array);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":669
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def flow_direction_inf(dem_uri, flow_direction_uri):             # <<<<<<<<<<<<<<
 *     """Calculates the D-infinity flow algorithm.  The output is a float
 *         raster whose values range from 0 to 2pi.
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_5flow_direction_inf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15pygeoprocessing_7routing_12routing_core_4flow_direction_inf[] = "Calculates the D-infinity flow algorithm.  The output is a float\n        raster whose values range from 0 to 2pi.\n\n        Algorithm from: Tarboton, \"A new method for the determination of flow\n        directions and upslope areas in grid digital elevation models,\" Water\n        Resources Research, vol. 33, no. 2, pages 309 - 319, February 1997.\n\n        Also resolves flow directions in flat areas of DEM.\n\n        dem_uri (string) - (input) a uri to a single band GDAL Dataset with elevation values\n        flow_direction_uri - (input/output) a uri to an existing GDAL dataset with\n            of same as dem_uri.  Flow direction will be defined in regions that have\n            nodata values in them.  non-nodata values will be ignored.  This is so\n            this function can be used as a two pass filter for resolving flow directions\n            on a raw dem, then filling plateaus and doing another pass.\n\n       returns nothing";
static PyMethodDef __pyx_mdef_15pygeoprocessing_7routing_12routing_core_5flow_direction_inf = {"flow_direction_inf", (PyCFunction)__pyx_pw_15pygeoprocessing_7routing_12routing_core_5flow_direction_inf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15pygeoprocessing_7routing_12routing_core_4flow_direction_inf};
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_5flow_direction_inf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dem_uri = 0;
  PyObject *__pyx_v_flow_direction_uri = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flow_direction_inf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dem_uri,&__pyx_n_s_flow_direction_uri,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dem_uri)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flow_direction_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flow_direction_inf", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flow_direction_inf") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dem_uri = values[0];
    __pyx_v_flow_direction_uri = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flow_direction_inf", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.flow_direction_inf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pygeoprocessing_7routing_12routing_core_4flow_direction_inf(__pyx_self, __pyx_v_dem_uri, __pyx_v_flow_direction_uri);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_4flow_direction_inf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_uri, PyObject *__pyx_v_flow_direction_uri) {
  int __pyx_v_n_cols;
  int __pyx_v_n_rows;
  int __pyx_v_max_index;
  int __pyx_v_facet_index;
  double __pyx_v_e_0;
  double __pyx_v_e_1;
  double __pyx_v_e_2;
  double __pyx_v_s_1;
  double __pyx_v_s_2;
  double __pyx_v_d_1;
  double __pyx_v_d_2;
  double __pyx_v_flow_direction;
  double __pyx_v_slope;
  double __pyx_v_flow_direction_max_slope;
  double __pyx_v_slope_max;
  double __pyx_v_dem_nodata;
  PyObject *__pyx_v_dem_ds = NULL;
  PyObject *__pyx_v_dem_band = NULL;
  int *__pyx_v_e_0_offsets;
  int *__pyx_v_e_1_offsets;
  int *__pyx_v_e_2_offsets;
  int *__pyx_v_a_c;
  int *__pyx_v_a_f;
  CYTHON_UNUSED int *__pyx_v_row_offsets;
  CYTHON_UNUSED int *__pyx_v_col_offsets;
  double __pyx_v_max_r;
  float __pyx_v_flow_nodata;
  PyObject *__pyx_v_flow_direction_dataset = NULL;
  PyObject *__pyx_v_flow_band = NULL;
  int __pyx_v_block_row_size;
  int __pyx_v_block_col_size;
  int __pyx_v_global_row;
  int __pyx_v_global_col;
  int __pyx_v_e_0_row;
  int __pyx_v_e_0_col;
  int __pyx_v_e_1_row;
  int __pyx_v_e_1_col;
  int __pyx_v_e_2_row;
  int __pyx_v_e_2_col;
  int __pyx_v_e_0_row_index;
  int __pyx_v_e_0_col_index;
  int __pyx_v_e_0_row_block_offset;
  int __pyx_v_e_0_col_block_offset;
  int __pyx_v_e_1_row_index;
  int __pyx_v_e_1_col_index;
  int __pyx_v_e_1_row_block_offset;
  int __pyx_v_e_1_col_block_offset;
  int __pyx_v_e_2_row_index;
  int __pyx_v_e_2_col_index;
  int __pyx_v_e_2_row_block_offset;
  int __pyx_v_e_2_col_block_offset;
  int __pyx_v_global_block_row;
  int __pyx_v_global_block_col;
  PyArrayObject *__pyx_v_flow_block = 0;
  PyArrayObject *__pyx_v_dem_block = 0;
  PyObject *__pyx_v_band_list = NULL;
  PyObject *__pyx_v_block_list = NULL;
  PyObject *__pyx_v_update_list = NULL;
  PyArrayObject *__pyx_v_cache_dirty = 0;
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_block_cache = 0;
  int __pyx_v_n_global_block_rows;
  int __pyx_v_n_global_block_cols;
  time_t __pyx_v_last_time;
  time_t __pyx_v_current_time;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cache_dirty;
  __Pyx_Buffer __pyx_pybuffer_cache_dirty;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dem_block;
  __Pyx_Buffer __pyx_pybuffer_dem_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flow_block;
  __Pyx_Buffer __pyx_pybuffer_flow_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7[16];
  int __pyx_t_8[16];
  int __pyx_t_9[16];
  int __pyx_t_10[8];
  int __pyx_t_11[8];
  int __pyx_t_12[8];
  int __pyx_t_13[8];
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  int __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyArrayObject *__pyx_t_20 = NULL;
  PyArrayObject *__pyx_t_21 = NULL;
  PyArrayObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_t_24;
  int __pyx_t_25;
  int __pyx_t_26;
  long __pyx_t_27;
  long __pyx_t_28;
  int __pyx_t_29;
  long __pyx_t_30;
  int __pyx_t_31;
  int __pyx_t_32;
  int __pyx_t_33;
  int __pyx_t_34;
  int __pyx_t_35;
  int __pyx_t_36;
  int __pyx_t_37;
  int __pyx_t_38;
  int __pyx_t_39;
  int __pyx_t_40;
  int __pyx_t_41;
  int __pyx_t_42;
  int __pyx_t_43;
  int __pyx_t_44;
  int __pyx_t_45;
  int __pyx_t_46;
  int __pyx_t_47;
  int __pyx_t_48;
  int __pyx_t_49;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flow_direction_inf", 0);
  __pyx_pybuffer_flow_block.pybuffer.buf = NULL;
  __pyx_pybuffer_flow_block.refcount = 0;
  __pyx_pybuffernd_flow_block.data = NULL;
  __pyx_pybuffernd_flow_block.rcbuffer = &__pyx_pybuffer_flow_block;
  __pyx_pybuffer_dem_block.pybuffer.buf = NULL;
  __pyx_pybuffer_dem_block.refcount = 0;
  __pyx_pybuffernd_dem_block.data = NULL;
  __pyx_pybuffernd_dem_block.rcbuffer = &__pyx_pybuffer_dem_block;
  __pyx_pybuffer_cache_dirty.pybuffer.buf = NULL;
  __pyx_pybuffer_cache_dirty.refcount = 0;
  __pyx_pybuffernd_cache_dirty.data = NULL;
  __pyx_pybuffernd_cache_dirty.rcbuffer = &__pyx_pybuffer_cache_dirty;

  /* "pygeoprocessing\routing\routing_core.pyx":692
 *         flow_direction_max_slope, slope_max, nodata_flow
 * 
 *     cdef double dem_nodata = pygeoprocessing.get_nodata_from_uri(dem_uri)             # <<<<<<<<<<<<<<
 *     #if it is not set, set it to a traditional nodata value
 *     if dem_nodata == None:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_dem_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_dem_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_dem_uri);
    __Pyx_GIVEREF(__pyx_v_dem_uri);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dem_nodata = __pyx_t_5;

  /* "pygeoprocessing\routing\routing_core.pyx":694
 *     cdef double dem_nodata = pygeoprocessing.get_nodata_from_uri(dem_uri)
 *     #if it is not set, set it to a traditional nodata value
 *     if dem_nodata == None:             # <<<<<<<<<<<<<<
 *         dem_nodata = -9999
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_dem_nodata); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {

    /* "pygeoprocessing\routing\routing_core.pyx":695
 *     #if it is not set, set it to a traditional nodata value
 *     if dem_nodata == None:
 *         dem_nodata = -9999             # <<<<<<<<<<<<<<
 * 
 *     dem_ds = gdal.Open(dem_uri)
 */
    __pyx_v_dem_nodata = -9999.0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pygeoprocessing\routing\routing_core.pyx":697
 *         dem_nodata = -9999
 * 
 *     dem_ds = gdal.Open(dem_uri)             # <<<<<<<<<<<<<<
 *     dem_band = dem_ds.GetRasterBand(1)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Open); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_dem_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_dem_uri);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_dem_uri);
    __Pyx_GIVEREF(__pyx_v_dem_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_dem_ds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":698
 * 
 *     dem_ds = gdal.Open(dem_uri)
 *     dem_band = dem_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     #facet elevation and factors for slope and flow_direction calculations
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dem_band = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":704
 *     #THIS IS IMPORTANT:  The order is row (j), column (i), transposed to GDAL
 *     #convention.
 *     cdef int *e_0_offsets = [+0, +0,             # <<<<<<<<<<<<<<
 *                              +0, +0,
 *                              +0, +0,
 */
  __pyx_t_7[0] = 0;
  __pyx_t_7[1] = 0;
  __pyx_t_7[2] = 0;
  __pyx_t_7[3] = 0;
  __pyx_t_7[4] = 0;
  __pyx_t_7[5] = 0;
  __pyx_t_7[6] = 0;
  __pyx_t_7[7] = 0;
  __pyx_t_7[8] = 0;
  __pyx_t_7[9] = 0;
  __pyx_t_7[10] = 0;
  __pyx_t_7[11] = 0;
  __pyx_t_7[12] = 0;
  __pyx_t_7[13] = 0;
  __pyx_t_7[14] = 0;
  __pyx_t_7[15] = 0;
  __pyx_v_e_0_offsets = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":712
 *                              +0, +0,
 *                              +0, +0]
 *     cdef int *e_1_offsets = [+0, +1,             # <<<<<<<<<<<<<<
 *                              -1, +0,
 *                              -1, +0,
 */
  __pyx_t_8[0] = 0;
  __pyx_t_8[1] = 1;
  __pyx_t_8[2] = -1;
  __pyx_t_8[3] = 0;
  __pyx_t_8[4] = -1;
  __pyx_t_8[5] = 0;
  __pyx_t_8[6] = 0;
  __pyx_t_8[7] = -1;
  __pyx_t_8[8] = 0;
  __pyx_t_8[9] = -1;
  __pyx_t_8[10] = 1;
  __pyx_t_8[11] = 0;
  __pyx_t_8[12] = 1;
  __pyx_t_8[13] = 0;
  __pyx_t_8[14] = 0;
  __pyx_t_8[15] = 1;
  __pyx_v_e_1_offsets = __pyx_t_8;

  /* "pygeoprocessing\routing\routing_core.pyx":720
 *                              +1, +0,
 *                              +0, +1]
 *     cdef int *e_2_offsets = [-1, +1,             # <<<<<<<<<<<<<<
 *                              -1, +1,
 *                              -1, -1,
 */
  __pyx_t_9[0] = -1;
  __pyx_t_9[1] = 1;
  __pyx_t_9[2] = -1;
  __pyx_t_9[3] = 1;
  __pyx_t_9[4] = -1;
  __pyx_t_9[5] = -1;
  __pyx_t_9[6] = -1;
  __pyx_t_9[7] = -1;
  __pyx_t_9[8] = 1;
  __pyx_t_9[9] = -1;
  __pyx_t_9[10] = 1;
  __pyx_t_9[11] = -1;
  __pyx_t_9[12] = 1;
  __pyx_t_9[13] = 1;
  __pyx_t_9[14] = 1;
  __pyx_t_9[15] = 1;
  __pyx_v_e_2_offsets = __pyx_t_9;

  /* "pygeoprocessing\routing\routing_core.pyx":728
 *                              +1, +1,
 *                              +1, +1]
 *     cdef int *a_c = [0, 1, 1, 2, 2, 3, 3, 4]             # <<<<<<<<<<<<<<
 *     cdef int *a_f = [1, -1, 1, -1, 1, -1, 1, -1]
 * 
 */
  __pyx_t_10[0] = 0;
  __pyx_t_10[1] = 1;
  __pyx_t_10[2] = 1;
  __pyx_t_10[3] = 2;
  __pyx_t_10[4] = 2;
  __pyx_t_10[5] = 3;
  __pyx_t_10[6] = 3;
  __pyx_t_10[7] = 4;
  __pyx_v_a_c = __pyx_t_10;

  /* "pygeoprocessing\routing\routing_core.pyx":729
 *                              +1, +1]
 *     cdef int *a_c = [0, 1, 1, 2, 2, 3, 3, 4]
 *     cdef int *a_f = [1, -1, 1, -1, 1, -1, 1, -1]             # <<<<<<<<<<<<<<
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]
 */
  __pyx_t_11[0] = 1;
  __pyx_t_11[1] = -1;
  __pyx_t_11[2] = 1;
  __pyx_t_11[3] = -1;
  __pyx_t_11[4] = 1;
  __pyx_t_11[5] = -1;
  __pyx_t_11[6] = 1;
  __pyx_t_11[7] = -1;
  __pyx_v_a_f = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":731
 *     cdef int *a_f = [1, -1, 1, -1, 1, -1, 1, -1]
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]             # <<<<<<<<<<<<<<
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 */
  __pyx_t_12[0] = 0;
  __pyx_t_12[1] = -1;
  __pyx_t_12[2] = -1;
  __pyx_t_12[3] = -1;
  __pyx_t_12[4] = 0;
  __pyx_t_12[5] = 1;
  __pyx_t_12[6] = 1;
  __pyx_t_12[7] = 1;
  __pyx_v_row_offsets = __pyx_t_12;

  /* "pygeoprocessing\routing\routing_core.pyx":732
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]             # <<<<<<<<<<<<<<
 * 
 *     n_rows, n_cols = pygeoprocessing.get_row_col_from_uri(dem_uri)
 */
  __pyx_t_13[0] = 1;
  __pyx_t_13[1] = 1;
  __pyx_t_13[2] = 0;
  __pyx_t_13[3] = -1;
  __pyx_t_13[4] = -1;
  __pyx_t_13[5] = -1;
  __pyx_t_13[6] = 0;
  __pyx_t_13[7] = 1;
  __pyx_v_col_offsets = __pyx_t_13;

  /* "pygeoprocessing\routing\routing_core.pyx":734
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 *     n_rows, n_cols = pygeoprocessing.get_row_col_from_uri(dem_uri)             # <<<<<<<<<<<<<<
 *     d_1 = pygeoprocessing.get_cell_size_from_uri(dem_uri)
 *     d_2 = d_1
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_row_col_from_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_dem_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_dem_uri);
    PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_v_dem_uri);
    __Pyx_GIVEREF(__pyx_v_dem_uri);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
    PyObject* sequence = __pyx_t_4;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_14 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_14(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_1 = __pyx_t_14(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_3), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_14 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_14 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n_rows = __pyx_t_15;
  __pyx_v_n_cols = __pyx_t_16;

  /* "pygeoprocessing\routing\routing_core.pyx":735
 * 
 *     n_rows, n_cols = pygeoprocessing.get_row_col_from_uri(dem_uri)
 *     d_1 = pygeoprocessing.get_cell_size_from_uri(dem_uri)             # <<<<<<<<<<<<<<
 *     d_2 = d_1
 *     cdef double max_r = numpy.pi / 4.0
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_cell_size_from_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_dem_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_dem_uri);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_dem_uri);
    __Pyx_GIVEREF(__pyx_v_dem_uri);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_d_1 = __pyx_t_5;

  /* "pygeoprocessing\routing\routing_core.pyx":736
 *     n_rows, n_cols = pygeoprocessing.get_row_col_from_uri(dem_uri)
 *     d_1 = pygeoprocessing.get_cell_size_from_uri(dem_uri)
 *     d_2 = d_1             # <<<<<<<<<<<<<<
 *     cdef double max_r = numpy.pi / 4.0
 * 
 */
  __pyx_v_d_2 = __pyx_v_d_1;

  /* "pygeoprocessing\routing\routing_core.pyx":737
 *     d_1 = pygeoprocessing.get_cell_size_from_uri(dem_uri)
 *     d_2 = d_1
 *     cdef double max_r = numpy.pi / 4.0             # <<<<<<<<<<<<<<
 * 
 *     #Create a flow carray and respective dataset
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_pi); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_float_4_0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_max_r = __pyx_t_5;

  /* "pygeoprocessing\routing\routing_core.pyx":740
 * 
 *     #Create a flow carray and respective dataset
 *     cdef float flow_nodata = -9999             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base_uri(
 *         dem_uri, flow_direction_uri, 'GTiff', flow_nodata,
 */
  __pyx_v_flow_nodata = -9999.0;

  /* "pygeoprocessing\routing\routing_core.pyx":741
 *     #Create a flow carray and respective dataset
 *     cdef float flow_nodata = -9999
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         dem_uri, flow_direction_uri, 'GTiff', flow_nodata,
 *         gdal.GDT_Float32, fill_value=flow_nodata)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_new_raster_from_base_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":742
 *     cdef float flow_nodata = -9999
 *     pygeoprocessing.new_raster_from_base_uri(
 *         dem_uri, flow_direction_uri, 'GTiff', flow_nodata,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Float32, fill_value=flow_nodata)
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_flow_nodata); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":743
 *     pygeoprocessing.new_raster_from_base_uri(
 *         dem_uri, flow_direction_uri, 'GTiff', flow_nodata,
 *         gdal.GDT_Float32, fill_value=flow_nodata)             # <<<<<<<<<<<<<<
 * 
 *     flow_direction_dataset = gdal.Open(flow_direction_uri, gdal.GA_Update)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_GDT_Float32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":741
 *     #Create a flow carray and respective dataset
 *     cdef float flow_nodata = -9999
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         dem_uri, flow_direction_uri, 'GTiff', flow_nodata,
 *         gdal.GDT_Float32, fill_value=flow_nodata)
 */
  __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_dem_uri);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_dem_uri);
  __Pyx_GIVEREF(__pyx_v_dem_uri);
  __Pyx_INCREF(__pyx_v_flow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_flow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
  __Pyx_INCREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_n_s_GTiff);
  __Pyx_GIVEREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygeoprocessing\routing\routing_core.pyx":743
 *     pygeoprocessing.new_raster_from_base_uri(
 *         dem_uri, flow_direction_uri, 'GTiff', flow_nodata,
 *         gdal.GDT_Float32, fill_value=flow_nodata)             # <<<<<<<<<<<<<<
 * 
 *     flow_direction_dataset = gdal.Open(flow_direction_uri, gdal.GA_Update)
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_flow_nodata); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fill_value, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":741
 *     #Create a flow carray and respective dataset
 *     cdef float flow_nodata = -9999
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         dem_uri, flow_direction_uri, 'GTiff', flow_nodata,
 *         gdal.GDT_Float32, fill_value=flow_nodata)
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":745
 *         gdal.GDT_Float32, fill_value=flow_nodata)
 * 
 *     flow_direction_dataset = gdal.Open(flow_direction_uri, gdal.GA_Update)             # <<<<<<<<<<<<<<
 *     flow_band = flow_direction_dataset.GetRasterBand(1)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Open); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_17 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_17 = 1;
    }
  }
  __pyx_t_18 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  if (__pyx_t_1) {
    PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
  }
  __Pyx_INCREF(__pyx_v_flow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_17, __pyx_v_flow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_17, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_18, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_direction_dataset = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":746
 * 
 *     flow_direction_dataset = gdal.Open(flow_direction_uri, gdal.GA_Update)
 *     flow_band = flow_direction_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     #center point of global index
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_direction_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_flow_band = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":750
 *     #center point of global index
 *     cdef int block_row_size, block_col_size
 *     block_col_size, block_row_size = dem_band.GetBlockSize()             # <<<<<<<<<<<<<<
 *     cdef int global_row, global_col, e_0_row, e_0_col, e_1_row, e_1_col, e_2_row, e_2_col #index into the overall raster
 *     cdef int e_0_row_index, e_0_col_index #the index of the cache block
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_18 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_18) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_18); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_18 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_18 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_18);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_18 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_18);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_14 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_14(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L6_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_18 = __pyx_t_14(__pyx_t_2); if (unlikely(!__pyx_t_18)) goto __pyx_L6_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_18);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_2), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_14 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L7_unpacking_done;
    __pyx_L6_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_14 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L7_unpacking_done:;
  }
  __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_18); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_v_block_col_size = __pyx_t_16;
  __pyx_v_block_row_size = __pyx_t_15;

  /* "pygeoprocessing\routing\routing_core.pyx":767
 * 
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     #DEM block is a 64 bit float so it can capture the resolution of small DEM offsets
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":768
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     #DEM block is a 64 bit float so it can capture the resolution of small DEM offsets
 *     #from the plateau resolution algorithm.
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = PyTuple_New(4); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_19, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_19, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":767
 * 
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     #DEM block is a 64 bit float so it can capture the resolution of small DEM offsets
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  __pyx_t_19 = 0;
  __pyx_t_19 = PyDict_New(); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);

  /* "pygeoprocessing\routing\routing_core.pyx":768
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     #DEM block is a 64 bit float so it can capture the resolution of small DEM offsets
 *     #from the plateau resolution algorithm.
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_19, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":767
 * 
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     #DEM block is a 64 bit float so it can capture the resolution of small DEM offsets
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_1, __pyx_t_19); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_20 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_20, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_flow_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_flow_block.diminfo[0].strides = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flow_block.diminfo[0].shape = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flow_block.diminfo[1].strides = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flow_block.diminfo[1].shape = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_flow_block.diminfo[2].strides = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_flow_block.diminfo[2].shape = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_flow_block.diminfo[3].strides = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_flow_block.diminfo[3].shape = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_20 = 0;
  __pyx_v_flow_block = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":771
 *     #DEM block is a 64 bit float so it can capture the resolution of small DEM offsets
 *     #from the plateau resolution algorithm.
 *     cdef numpy.ndarray[numpy.npy_float64, ndim=4] dem_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *       (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float64)
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":772
 *     #from the plateau resolution algorithm.
 *     cdef numpy.ndarray[numpy.npy_float64, ndim=4] dem_block = numpy.zeros(
 *       (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float64)             # <<<<<<<<<<<<<<
 * 
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_18 = 0;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":771
 *     #DEM block is a 64 bit float so it can capture the resolution of small DEM offsets
 *     #from the plateau resolution algorithm.
 *     cdef numpy.ndarray[numpy.npy_float64, ndim=4] dem_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *       (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float64)
 * 
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygeoprocessing\routing\routing_core.pyx":772
 *     #from the plateau resolution algorithm.
 *     cdef numpy.ndarray[numpy.npy_float64, ndim=4] dem_block = numpy.zeros(
 *       (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float64)             # <<<<<<<<<<<<<<
 * 
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 */
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":771
 *     #DEM block is a 64 bit float so it can capture the resolution of small DEM offsets
 *     #from the plateau resolution algorithm.
 *     cdef numpy.ndarray[numpy.npy_float64, ndim=4] dem_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *       (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float64)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_21 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dem_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_21, &__Pyx_TypeInfo_nn_npy_float64, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_dem_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_dem_block.diminfo[0].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dem_block.diminfo[0].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dem_block.diminfo[1].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dem_block.diminfo[1].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_dem_block.diminfo[2].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_dem_block.diminfo[2].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_dem_block.diminfo[3].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_dem_block.diminfo[3].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_21 = 0;
  __pyx_v_dem_block = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":775
 * 
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 *     band_list = [dem_band, flow_band]             # <<<<<<<<<<<<<<
 *     block_list = [dem_block, flow_block]
 *     update_list = [False, True]
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_dem_band);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_dem_band);
  __Pyx_GIVEREF(__pyx_v_dem_band);
  __Pyx_INCREF(__pyx_v_flow_band);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_flow_band);
  __Pyx_GIVEREF(__pyx_v_flow_band);
  __pyx_v_band_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":776
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 *     band_list = [dem_band, flow_band]
 *     block_list = [dem_block, flow_block]             # <<<<<<<<<<<<<<
 *     update_list = [False, True]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_dem_block));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_dem_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_dem_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_flow_block));
  PyList_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_flow_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_flow_block));
  __pyx_v_block_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":777
 *     band_list = [dem_band, flow_band]
 *     block_list = [dem_block, flow_block]
 *     update_list = [False, True]             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_1, 0, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_True);
  PyList_SET_ITEM(__pyx_t_1, 1, Py_True);
  __Pyx_GIVEREF(Py_True);
  __pyx_v_update_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":778
 *     block_list = [dem_block, flow_block]
 *     update_list = [False, True]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  __pyx_t_19 = 0;
  __pyx_t_19 = PyDict_New(); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_byte); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_19, __pyx_n_s_dtype, __pyx_t_18) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_19); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (!(likely(((__pyx_t_18) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_18, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_22 = ((PyArrayObject *)__pyx_t_18);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer, (PyObject*)__pyx_t_22, &__Pyx_TypeInfo_nn_npy_byte, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_cache_dirty = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_cache_dirty.diminfo[0].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cache_dirty.diminfo[0].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cache_dirty.diminfo[1].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cache_dirty.diminfo[1].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_22 = 0;
  __pyx_v_cache_dirty = ((PyArrayObject *)__pyx_t_18);
  __pyx_t_18 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":781
 * 
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size, block_col_size, band_list, block_list, update_list, cache_dirty)             # <<<<<<<<<<<<<<
 * 
 *     cdef int row_offset, col_offset
 */
  __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_19 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n_rows); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":780
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 *     cdef BlockCache block_cache = BlockCache(             # <<<<<<<<<<<<<<
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size, block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 */
  __pyx_t_23 = PyTuple_New(10); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_23, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_23, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_23, 4, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_23, 5, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_band_list);
  PyTuple_SET_ITEM(__pyx_t_23, 6, __pyx_v_band_list);
  __Pyx_GIVEREF(__pyx_v_band_list);
  __Pyx_INCREF(__pyx_v_block_list);
  PyTuple_SET_ITEM(__pyx_t_23, 7, __pyx_v_block_list);
  __Pyx_GIVEREF(__pyx_v_block_list);
  __Pyx_INCREF(__pyx_v_update_list);
  PyTuple_SET_ITEM(__pyx_t_23, 8, __pyx_v_update_list);
  __Pyx_GIVEREF(__pyx_v_update_list);
  __Pyx_INCREF(((PyObject *)__pyx_v_cache_dirty));
  PyTuple_SET_ITEM(__pyx_t_23, 9, ((PyObject *)__pyx_v_cache_dirty));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cache_dirty));
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache)), __pyx_t_23, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_v_block_cache = ((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":785
 *     cdef int row_offset, col_offset
 * 
 *     cdef int n_global_block_rows = int(ceil(float(n_rows) / block_row_size))             # <<<<<<<<<<<<<<
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))
 *     cdef time_t last_time, current_time
 */
  __pyx_v_n_global_block_rows = ((int)ceil((((double)__pyx_v_n_rows) / __pyx_v_block_row_size)));

  /* "pygeoprocessing\routing\routing_core.pyx":786
 * 
 *     cdef int n_global_block_rows = int(ceil(float(n_rows) / block_row_size))
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))             # <<<<<<<<<<<<<<
 *     cdef time_t last_time, current_time
 *     cdef float current_flow
 */
  __pyx_v_n_global_block_cols = ((int)ceil((((double)__pyx_v_n_cols) / __pyx_v_block_col_size)));

  /* "pygeoprocessing\routing\routing_core.pyx":789
 *     cdef time_t last_time, current_time
 *     cdef float current_flow
 *     time(&last_time)             # <<<<<<<<<<<<<<
 *     #flow not defined on the edges, so just go 1 row in
 *     for global_block_row in xrange(n_global_block_rows):
 */
  time((&__pyx_v_last_time));

  /* "pygeoprocessing\routing\routing_core.pyx":791
 *     time(&last_time)
 *     #flow not defined on the edges, so just go 1 row in
 *     for global_block_row in xrange(n_global_block_rows):             # <<<<<<<<<<<<<<
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 */
  __pyx_t_15 = __pyx_v_n_global_block_rows;
  for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
    __pyx_v_global_block_row = __pyx_t_16;

    /* "pygeoprocessing\routing\routing_core.pyx":792
 *     #flow not defined on the edges, so just go 1 row in
 *     for global_block_row in xrange(n_global_block_rows):
 *         time(&current_time)             # <<<<<<<<<<<<<<
 *         if current_time - last_time > 5.0:
 *             LOGGER.info("flow_direction_inf %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 */
    time((&__pyx_v_current_time));

    /* "pygeoprocessing\routing\routing_core.pyx":793
 *     for global_block_row in xrange(n_global_block_rows):
 *         time(&current_time)
 *         if current_time - last_time > 5.0:             # <<<<<<<<<<<<<<
 *             LOGGER.info("flow_direction_inf %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 *             last_time = current_time
 */
    __pyx_t_6 = (((__pyx_v_current_time - __pyx_v_last_time) > 5.0) != 0);
    if (__pyx_t_6) {

      /* "pygeoprocessing\routing\routing_core.pyx":794
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 *             LOGGER.info("flow_direction_inf %.1f%% complete", (global_row + 1.0) / n_rows * 100)             # <<<<<<<<<<<<<<
 *             last_time = current_time
 *         for global_block_col in xrange(n_global_block_cols):
 */
      __pyx_t_23 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_23);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __pyx_t_23 = PyFloat_FromDouble((((__pyx_v_global_row + 1.0) / __pyx_v_n_rows) * 100.0)); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_23);
      __pyx_t_3 = NULL;
      __pyx_t_17 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_17 = 1;
        }
      }
      __pyx_t_2 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_3) {
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_flow_direction_inf_1f_complete);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_17, __pyx_kp_s_flow_direction_inf_1f_complete);
      __Pyx_GIVEREF(__pyx_kp_s_flow_direction_inf_1f_complete);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_17, __pyx_t_23);
      __Pyx_GIVEREF(__pyx_t_23);
      __pyx_t_23 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":795
 *         if current_time - last_time > 5.0:
 *             LOGGER.info("flow_direction_inf %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 *             last_time = current_time             # <<<<<<<<<<<<<<
 *         for global_block_col in xrange(n_global_block_cols):
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 */
      __pyx_v_last_time = __pyx_v_current_time;
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "pygeoprocessing\routing\routing_core.pyx":796
 *             LOGGER.info("flow_direction_inf %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 *             last_time = current_time
 *         for global_block_col in xrange(n_global_block_cols):             # <<<<<<<<<<<<<<
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):
 */
    __pyx_t_24 = __pyx_v_n_global_block_cols;
    for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_24; __pyx_t_25+=1) {
      __pyx_v_global_block_col = __pyx_t_25;

      /* "pygeoprocessing\routing\routing_core.pyx":797
 *             last_time = current_time
 *         for global_block_col in xrange(n_global_block_cols):
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):             # <<<<<<<<<<<<<<
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):
 *                     #is cache block not loaded?
 */
      __pyx_t_26 = __pyx_v_n_rows;
      __pyx_t_27 = ((__pyx_v_global_block_row + 1) * __pyx_v_block_row_size);
      if (((__pyx_t_26 < __pyx_t_27) != 0)) {
        __pyx_t_28 = __pyx_t_26;
      } else {
        __pyx_t_28 = __pyx_t_27;
      }
      __pyx_t_27 = __pyx_t_28;
      for (__pyx_t_26 = (__pyx_v_global_block_row * __pyx_v_block_row_size); __pyx_t_26 < __pyx_t_27; __pyx_t_26+=1) {
        __pyx_v_global_row = __pyx_t_26;

        /* "pygeoprocessing\routing\routing_core.pyx":798
 *         for global_block_col in xrange(n_global_block_cols):
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):             # <<<<<<<<<<<<<<
 *                     #is cache block not loaded?
 * 
 */
        __pyx_t_29 = __pyx_v_n_cols;
        __pyx_t_28 = ((__pyx_v_global_block_col + 1) * __pyx_v_block_col_size);
        if (((__pyx_t_29 < __pyx_t_28) != 0)) {
          __pyx_t_30 = __pyx_t_29;
        } else {
          __pyx_t_30 = __pyx_t_28;
        }
        __pyx_t_28 = __pyx_t_30;
        for (__pyx_t_29 = (__pyx_v_global_block_col * __pyx_v_block_col_size); __pyx_t_29 < __pyx_t_28; __pyx_t_29+=1) {
          __pyx_v_global_col = __pyx_t_29;

          /* "pygeoprocessing\routing\routing_core.pyx":801
 *                     #is cache block not loaded?
 * 
 *                     e_0_row = e_0_offsets[0] + global_row             # <<<<<<<<<<<<<<
 *                     e_0_col = e_0_offsets[1] + global_col
 * 
 */
          __pyx_v_e_0_row = ((__pyx_v_e_0_offsets[0]) + __pyx_v_global_row);

          /* "pygeoprocessing\routing\routing_core.pyx":802
 * 
 *                     e_0_row = e_0_offsets[0] + global_row
 *                     e_0_col = e_0_offsets[1] + global_col             # <<<<<<<<<<<<<<
 * 
 *                     block_cache.update_cache(e_0_row, e_0_col, &e_0_row_index, &e_0_col_index, &e_0_row_block_offset, &e_0_col_block_offset)
 */
          __pyx_v_e_0_col = ((__pyx_v_e_0_offsets[1]) + __pyx_v_global_col);

          /* "pygeoprocessing\routing\routing_core.pyx":804
 *                     e_0_col = e_0_offsets[1] + global_col
 * 
 *                     block_cache.update_cache(e_0_row, e_0_col, &e_0_row_index, &e_0_col_index, &e_0_row_block_offset, &e_0_col_block_offset)             # <<<<<<<<<<<<<<
 * 
 *                     e_0 = dem_block[e_0_row_index, e_0_col_index, e_0_row_block_offset, e_0_col_block_offset]
 */
          ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_e_0_row, __pyx_v_e_0_col, (&__pyx_v_e_0_row_index), (&__pyx_v_e_0_col_index), (&__pyx_v_e_0_row_block_offset), (&__pyx_v_e_0_col_block_offset));

          /* "pygeoprocessing\routing\routing_core.pyx":806
 *                     block_cache.update_cache(e_0_row, e_0_col, &e_0_row_index, &e_0_col_index, &e_0_row_block_offset, &e_0_col_block_offset)
 * 
 *                     e_0 = dem_block[e_0_row_index, e_0_col_index, e_0_row_block_offset, e_0_col_block_offset]             # <<<<<<<<<<<<<<
 *                     #skip if we're on a nodata pixel skip
 *                     if e_0 == dem_nodata:
 */
          __pyx_t_31 = __pyx_v_e_0_row_index;
          __pyx_t_32 = __pyx_v_e_0_col_index;
          __pyx_t_33 = __pyx_v_e_0_row_block_offset;
          __pyx_t_34 = __pyx_v_e_0_col_block_offset;
          __pyx_v_e_0 = (*__Pyx_BufPtrStrided4d(npy_float64 *, __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.buf, __pyx_t_31, __pyx_pybuffernd_dem_block.diminfo[0].strides, __pyx_t_32, __pyx_pybuffernd_dem_block.diminfo[1].strides, __pyx_t_33, __pyx_pybuffernd_dem_block.diminfo[2].strides, __pyx_t_34, __pyx_pybuffernd_dem_block.diminfo[3].strides));

          /* "pygeoprocessing\routing\routing_core.pyx":808
 *                     e_0 = dem_block[e_0_row_index, e_0_col_index, e_0_row_block_offset, e_0_col_block_offset]
 *                     #skip if we're on a nodata pixel skip
 *                     if e_0 == dem_nodata:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_6 = ((__pyx_v_e_0 == __pyx_v_dem_nodata) != 0);
          if (__pyx_t_6) {

            /* "pygeoprocessing\routing\routing_core.pyx":809
 *                     #skip if we're on a nodata pixel skip
 *                     if e_0 == dem_nodata:
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     #Calculate the flow flow_direction for each facet
 */
            goto __pyx_L15_continue;
          }

          /* "pygeoprocessing\routing\routing_core.pyx":812
 * 
 *                     #Calculate the flow flow_direction for each facet
 *                     slope_max = 0 #use this to keep track of the maximum down-slope             # <<<<<<<<<<<<<<
 *                     flow_direction_max_slope = 0 #flow direction on max downward slope
 *                     max_index = 0 #index to keep track of max slope facet
 */
          __pyx_v_slope_max = 0.0;

          /* "pygeoprocessing\routing\routing_core.pyx":813
 *                     #Calculate the flow flow_direction for each facet
 *                     slope_max = 0 #use this to keep track of the maximum down-slope
 *                     flow_direction_max_slope = 0 #flow direction on max downward slope             # <<<<<<<<<<<<<<
 *                     max_index = 0 #index to keep track of max slope facet
 * 
 */
          __pyx_v_flow_direction_max_slope = 0.0;

          /* "pygeoprocessing\routing\routing_core.pyx":814
 *                     slope_max = 0 #use this to keep track of the maximum down-slope
 *                     flow_direction_max_slope = 0 #flow direction on max downward slope
 *                     max_index = 0 #index to keep track of max slope facet             # <<<<<<<<<<<<<<
 * 
 *                     for facet_index in range(8):
 */
          __pyx_v_max_index = 0;

          /* "pygeoprocessing\routing\routing_core.pyx":816
 *                     max_index = 0 #index to keep track of max slope facet
 * 
 *                     for facet_index in range(8):             # <<<<<<<<<<<<<<
 *                         #This defines the three points the facet
 * 
 */
          for (__pyx_t_35 = 0; __pyx_t_35 < 8; __pyx_t_35+=1) {
            __pyx_v_facet_index = __pyx_t_35;

            /* "pygeoprocessing\routing\routing_core.pyx":819
 *                         #This defines the three points the facet
 * 
 *                         e_1_row = e_1_offsets[facet_index * 2 + 0] + global_row             # <<<<<<<<<<<<<<
 *                         e_1_col = e_1_offsets[facet_index * 2 + 1] + global_col
 *                         e_2_row = e_2_offsets[facet_index * 2 + 0] + global_row
 */
            __pyx_v_e_1_row = ((__pyx_v_e_1_offsets[((__pyx_v_facet_index * 2) + 0)]) + __pyx_v_global_row);

            /* "pygeoprocessing\routing\routing_core.pyx":820
 * 
 *                         e_1_row = e_1_offsets[facet_index * 2 + 0] + global_row
 *                         e_1_col = e_1_offsets[facet_index * 2 + 1] + global_col             # <<<<<<<<<<<<<<
 *                         e_2_row = e_2_offsets[facet_index * 2 + 0] + global_row
 *                         e_2_col = e_2_offsets[facet_index * 2 + 1] + global_col
 */
            __pyx_v_e_1_col = ((__pyx_v_e_1_offsets[((__pyx_v_facet_index * 2) + 1)]) + __pyx_v_global_col);

            /* "pygeoprocessing\routing\routing_core.pyx":821
 *                         e_1_row = e_1_offsets[facet_index * 2 + 0] + global_row
 *                         e_1_col = e_1_offsets[facet_index * 2 + 1] + global_col
 *                         e_2_row = e_2_offsets[facet_index * 2 + 0] + global_row             # <<<<<<<<<<<<<<
 *                         e_2_col = e_2_offsets[facet_index * 2 + 1] + global_col
 *                         #make sure one of the facets doesn't hang off the edge
 */
            __pyx_v_e_2_row = ((__pyx_v_e_2_offsets[((__pyx_v_facet_index * 2) + 0)]) + __pyx_v_global_row);

            /* "pygeoprocessing\routing\routing_core.pyx":822
 *                         e_1_col = e_1_offsets[facet_index * 2 + 1] + global_col
 *                         e_2_row = e_2_offsets[facet_index * 2 + 0] + global_row
 *                         e_2_col = e_2_offsets[facet_index * 2 + 1] + global_col             # <<<<<<<<<<<<<<
 *                         #make sure one of the facets doesn't hang off the edge
 *                         if (e_1_row < 0 or e_1_row >= n_rows or
 */
            __pyx_v_e_2_col = ((__pyx_v_e_2_offsets[((__pyx_v_facet_index * 2) + 1)]) + __pyx_v_global_col);

            /* "pygeoprocessing\routing\routing_core.pyx":824
 *                         e_2_col = e_2_offsets[facet_index * 2 + 1] + global_col
 *                         #make sure one of the facets doesn't hang off the edge
 *                         if (e_1_row < 0 or e_1_row >= n_rows or             # <<<<<<<<<<<<<<
 *                             e_2_row < 0 or e_2_row >= n_rows or
 *                             e_1_col < 0 or e_1_col >= n_cols or
 */
            __pyx_t_36 = ((__pyx_v_e_1_row < 0) != 0);
            if (!__pyx_t_36) {
            } else {
              __pyx_t_6 = __pyx_t_36;
              goto __pyx_L21_bool_binop_done;
            }
            __pyx_t_36 = ((__pyx_v_e_1_row >= __pyx_v_n_rows) != 0);
            if (!__pyx_t_36) {
            } else {
              __pyx_t_6 = __pyx_t_36;
              goto __pyx_L21_bool_binop_done;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":825
 *                         #make sure one of the facets doesn't hang off the edge
 *                         if (e_1_row < 0 or e_1_row >= n_rows or
 *                             e_2_row < 0 or e_2_row >= n_rows or             # <<<<<<<<<<<<<<
 *                             e_1_col < 0 or e_1_col >= n_cols or
 *                             e_2_col < 0 or e_2_col >= n_cols):
 */
            __pyx_t_36 = ((__pyx_v_e_2_row < 0) != 0);
            if (!__pyx_t_36) {
            } else {
              __pyx_t_6 = __pyx_t_36;
              goto __pyx_L21_bool_binop_done;
            }
            __pyx_t_36 = ((__pyx_v_e_2_row >= __pyx_v_n_rows) != 0);
            if (!__pyx_t_36) {
            } else {
              __pyx_t_6 = __pyx_t_36;
              goto __pyx_L21_bool_binop_done;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":826
 *                         if (e_1_row < 0 or e_1_row >= n_rows or
 *                             e_2_row < 0 or e_2_row >= n_rows or
 *                             e_1_col < 0 or e_1_col >= n_cols or             # <<<<<<<<<<<<<<
 *                             e_2_col < 0 or e_2_col >= n_cols):
 *                             continue
 */
            __pyx_t_36 = ((__pyx_v_e_1_col < 0) != 0);
            if (!__pyx_t_36) {
            } else {
              __pyx_t_6 = __pyx_t_36;
              goto __pyx_L21_bool_binop_done;
            }
            __pyx_t_36 = ((__pyx_v_e_1_col >= __pyx_v_n_cols) != 0);
            if (!__pyx_t_36) {
            } else {
              __pyx_t_6 = __pyx_t_36;
              goto __pyx_L21_bool_binop_done;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":827
 *                             e_2_row < 0 or e_2_row >= n_rows or
 *                             e_1_col < 0 or e_1_col >= n_cols or
 *                             e_2_col < 0 or e_2_col >= n_cols):             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            __pyx_t_36 = ((__pyx_v_e_2_col < 0) != 0);
            if (!__pyx_t_36) {
            } else {
              __pyx_t_6 = __pyx_t_36;
              goto __pyx_L21_bool_binop_done;
            }
            __pyx_t_36 = ((__pyx_v_e_2_col >= __pyx_v_n_cols) != 0);
            __pyx_t_6 = __pyx_t_36;
            __pyx_L21_bool_binop_done:;
            if (__pyx_t_6) {

              /* "pygeoprocessing\routing\routing_core.pyx":828
 *                             e_1_col < 0 or e_1_col >= n_cols or
 *                             e_2_col < 0 or e_2_col >= n_cols):
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         block_cache.update_cache(e_1_row, e_1_col, &e_1_row_index, &e_1_col_index, &e_1_row_block_offset, &e_1_col_block_offset)
 */
              goto __pyx_L18_continue;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":830
 *                             continue
 * 
 *                         block_cache.update_cache(e_1_row, e_1_col, &e_1_row_index, &e_1_col_index, &e_1_row_block_offset, &e_1_col_block_offset)             # <<<<<<<<<<<<<<
 *                         block_cache.update_cache(e_2_row, e_2_col, &e_2_row_index, &e_2_col_index, &e_2_row_block_offset, &e_2_col_block_offset)
 * 
 */
            ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_e_1_row, __pyx_v_e_1_col, (&__pyx_v_e_1_row_index), (&__pyx_v_e_1_col_index), (&__pyx_v_e_1_row_block_offset), (&__pyx_v_e_1_col_block_offset));

            /* "pygeoprocessing\routing\routing_core.pyx":831
 * 
 *                         block_cache.update_cache(e_1_row, e_1_col, &e_1_row_index, &e_1_col_index, &e_1_row_block_offset, &e_1_col_block_offset)
 *                         block_cache.update_cache(e_2_row, e_2_col, &e_2_row_index, &e_2_col_index, &e_2_row_block_offset, &e_2_col_block_offset)             # <<<<<<<<<<<<<<
 * 
 *                         e_1 = dem_block[e_1_row_index, e_1_col_index, e_1_row_block_offset, e_1_col_block_offset]
 */
            ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_e_2_row, __pyx_v_e_2_col, (&__pyx_v_e_2_row_index), (&__pyx_v_e_2_col_index), (&__pyx_v_e_2_row_block_offset), (&__pyx_v_e_2_col_block_offset));

            /* "pygeoprocessing\routing\routing_core.pyx":833
 *                         block_cache.update_cache(e_2_row, e_2_col, &e_2_row_index, &e_2_col_index, &e_2_row_block_offset, &e_2_col_block_offset)
 * 
 *                         e_1 = dem_block[e_1_row_index, e_1_col_index, e_1_row_block_offset, e_1_col_block_offset]             # <<<<<<<<<<<<<<
 *                         e_2 = dem_block[e_2_row_index, e_2_col_index, e_2_row_block_offset, e_2_col_block_offset]
 * 
 */
            __pyx_t_37 = __pyx_v_e_1_row_index;
            __pyx_t_38 = __pyx_v_e_1_col_index;
            __pyx_t_39 = __pyx_v_e_1_row_block_offset;
            __pyx_t_40 = __pyx_v_e_1_col_block_offset;
            __pyx_v_e_1 = (*__Pyx_BufPtrStrided4d(npy_float64 *, __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.buf, __pyx_t_37, __pyx_pybuffernd_dem_block.diminfo[0].strides, __pyx_t_38, __pyx_pybuffernd_dem_block.diminfo[1].strides, __pyx_t_39, __pyx_pybuffernd_dem_block.diminfo[2].strides, __pyx_t_40, __pyx_pybuffernd_dem_block.diminfo[3].strides));

            /* "pygeoprocessing\routing\routing_core.pyx":834
 * 
 *                         e_1 = dem_block[e_1_row_index, e_1_col_index, e_1_row_block_offset, e_1_col_block_offset]
 *                         e_2 = dem_block[e_2_row_index, e_2_col_index, e_2_row_block_offset, e_2_col_block_offset]             # <<<<<<<<<<<<<<
 * 
 *                         if e_1 == dem_nodata and e_2 == dem_nodata:
 */
            __pyx_t_41 = __pyx_v_e_2_row_index;
            __pyx_t_42 = __pyx_v_e_2_col_index;
            __pyx_t_43 = __pyx_v_e_2_row_block_offset;
            __pyx_t_44 = __pyx_v_e_2_col_block_offset;
            __pyx_v_e_2 = (*__Pyx_BufPtrStrided4d(npy_float64 *, __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.buf, __pyx_t_41, __pyx_pybuffernd_dem_block.diminfo[0].strides, __pyx_t_42, __pyx_pybuffernd_dem_block.diminfo[1].strides, __pyx_t_43, __pyx_pybuffernd_dem_block.diminfo[2].strides, __pyx_t_44, __pyx_pybuffernd_dem_block.diminfo[3].strides));

            /* "pygeoprocessing\routing\routing_core.pyx":836
 *                         e_2 = dem_block[e_2_row_index, e_2_col_index, e_2_row_block_offset, e_2_col_block_offset]
 * 
 *                         if e_1 == dem_nodata and e_2 == dem_nodata:             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            __pyx_t_36 = ((__pyx_v_e_1 == __pyx_v_dem_nodata) != 0);
            if (__pyx_t_36) {
            } else {
              __pyx_t_6 = __pyx_t_36;
              goto __pyx_L30_bool_binop_done;
            }
            __pyx_t_36 = ((__pyx_v_e_2 == __pyx_v_dem_nodata) != 0);
            __pyx_t_6 = __pyx_t_36;
            __pyx_L30_bool_binop_done:;
            if (__pyx_t_6) {

              /* "pygeoprocessing\routing\routing_core.pyx":837
 * 
 *                         if e_1 == dem_nodata and e_2 == dem_nodata:
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         #s_1 is slope along straight edge
 */
              goto __pyx_L18_continue;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":840
 * 
 *                         #s_1 is slope along straight edge
 *                         s_1 = (e_0 - e_1) / d_1 #Eqn 1             # <<<<<<<<<<<<<<
 *                         #slope along diagonal edge
 *                         s_2 = (e_1 - e_2) / d_2 #Eqn 2
 */
            __pyx_v_s_1 = ((__pyx_v_e_0 - __pyx_v_e_1) / __pyx_v_d_1);

            /* "pygeoprocessing\routing\routing_core.pyx":842
 *                         s_1 = (e_0 - e_1) / d_1 #Eqn 1
 *                         #slope along diagonal edge
 *                         s_2 = (e_1 - e_2) / d_2 #Eqn 2             # <<<<<<<<<<<<<<
 * 
 *                         #can't calculate flow direction if one of the facets is nodata
 */
            __pyx_v_s_2 = ((__pyx_v_e_1 - __pyx_v_e_2) / __pyx_v_d_2);

            /* "pygeoprocessing\routing\routing_core.pyx":845
 * 
 *                         #can't calculate flow direction if one of the facets is nodata
 *                         if e_1 == dem_nodata or e_2 == dem_nodata:             # <<<<<<<<<<<<<<
 *                             #calc max slope here
 *                             if e_1 != dem_nodata and facet_index % 2 == 0 and e_1 < e_0:
 */
            __pyx_t_36 = ((__pyx_v_e_1 == __pyx_v_dem_nodata) != 0);
            if (!__pyx_t_36) {
            } else {
              __pyx_t_6 = __pyx_t_36;
              goto __pyx_L33_bool_binop_done;
            }
            __pyx_t_36 = ((__pyx_v_e_2 == __pyx_v_dem_nodata) != 0);
            __pyx_t_6 = __pyx_t_36;
            __pyx_L33_bool_binop_done:;
            if (__pyx_t_6) {

              /* "pygeoprocessing\routing\routing_core.pyx":847
 *                         if e_1 == dem_nodata or e_2 == dem_nodata:
 *                             #calc max slope here
 *                             if e_1 != dem_nodata and facet_index % 2 == 0 and e_1 < e_0:             # <<<<<<<<<<<<<<
 *                                 #straight line to next pixel
 *                                 slope = s_1
 */
              __pyx_t_36 = ((__pyx_v_e_1 != __pyx_v_dem_nodata) != 0);
              if (__pyx_t_36) {
              } else {
                __pyx_t_6 = __pyx_t_36;
                goto __pyx_L36_bool_binop_done;
              }
              __pyx_t_36 = (((__pyx_v_facet_index % 2) == 0) != 0);
              if (__pyx_t_36) {
              } else {
                __pyx_t_6 = __pyx_t_36;
                goto __pyx_L36_bool_binop_done;
              }
              __pyx_t_36 = ((__pyx_v_e_1 < __pyx_v_e_0) != 0);
              __pyx_t_6 = __pyx_t_36;
              __pyx_L36_bool_binop_done:;
              if (__pyx_t_6) {

                /* "pygeoprocessing\routing\routing_core.pyx":849
 *                             if e_1 != dem_nodata and facet_index % 2 == 0 and e_1 < e_0:
 *                                 #straight line to next pixel
 *                                 slope = s_1             # <<<<<<<<<<<<<<
 *                                 flow_direction = 0
 *                             elif e_2 != dem_nodata and facet_index % 2 == 1 and e_2 < e_0:
 */
                __pyx_v_slope = __pyx_v_s_1;

                /* "pygeoprocessing\routing\routing_core.pyx":850
 *                                 #straight line to next pixel
 *                                 slope = s_1
 *                                 flow_direction = 0             # <<<<<<<<<<<<<<
 *                             elif e_2 != dem_nodata and facet_index % 2 == 1 and e_2 < e_0:
 *                                 #diagonal line to next pixel
 */
                __pyx_v_flow_direction = 0.0;
                goto __pyx_L35;
              }

              /* "pygeoprocessing\routing\routing_core.pyx":851
 *                                 slope = s_1
 *                                 flow_direction = 0
 *                             elif e_2 != dem_nodata and facet_index % 2 == 1 and e_2 < e_0:             # <<<<<<<<<<<<<<
 *                                 #diagonal line to next pixel
 *                                 slope = (e_0 - e_2) / sqrt(d_1 **2 + d_2 ** 2)
 */
              __pyx_t_36 = ((__pyx_v_e_2 != __pyx_v_dem_nodata) != 0);
              if (__pyx_t_36) {
              } else {
                __pyx_t_6 = __pyx_t_36;
                goto __pyx_L39_bool_binop_done;
              }
              __pyx_t_36 = (((__pyx_v_facet_index % 2) == 1) != 0);
              if (__pyx_t_36) {
              } else {
                __pyx_t_6 = __pyx_t_36;
                goto __pyx_L39_bool_binop_done;
              }
              __pyx_t_36 = ((__pyx_v_e_2 < __pyx_v_e_0) != 0);
              __pyx_t_6 = __pyx_t_36;
              __pyx_L39_bool_binop_done:;
              if (__pyx_t_6) {

                /* "pygeoprocessing\routing\routing_core.pyx":853
 *                             elif e_2 != dem_nodata and facet_index % 2 == 1 and e_2 < e_0:
 *                                 #diagonal line to next pixel
 *                                 slope = (e_0 - e_2) / sqrt(d_1 **2 + d_2 ** 2)             # <<<<<<<<<<<<<<
 *                                 flow_direction = max_r
 *                             else:
 */
                __pyx_v_slope = ((__pyx_v_e_0 - __pyx_v_e_2) / sqrt((pow(__pyx_v_d_1, 2.0) + pow(__pyx_v_d_2, 2.0))));

                /* "pygeoprocessing\routing\routing_core.pyx":854
 *                                 #diagonal line to next pixel
 *                                 slope = (e_0 - e_2) / sqrt(d_1 **2 + d_2 ** 2)
 *                                 flow_direction = max_r             # <<<<<<<<<<<<<<
 *                             else:
 *                                 continue
 */
                __pyx_v_flow_direction = __pyx_v_max_r;
                goto __pyx_L35;
              }
              /*else*/ {

                /* "pygeoprocessing\routing\routing_core.pyx":856
 *                                 flow_direction = max_r
 *                             else:
 *                                 continue             # <<<<<<<<<<<<<<
 *                         else:
 *                             #both facets are defined, this is the core of
 */
                goto __pyx_L18_continue;
              }
              __pyx_L35:;
              goto __pyx_L32;
            }
            /*else*/ {

              /* "pygeoprocessing\routing\routing_core.pyx":860
 *                             #both facets are defined, this is the core of
 *                             #d-infinity algorithm
 *                             flow_direction = atan2(s_2, s_1) #Eqn 3             # <<<<<<<<<<<<<<
 * 
 *                             if flow_direction < 0: #Eqn 4
 */
              __pyx_v_flow_direction = atan2(__pyx_v_s_2, __pyx_v_s_1);

              /* "pygeoprocessing\routing\routing_core.pyx":862
 *                             flow_direction = atan2(s_2, s_1) #Eqn 3
 * 
 *                             if flow_direction < 0: #Eqn 4             # <<<<<<<<<<<<<<
 *                                 #If the flow direction goes off one side, set flow
 *                                 #direction to that side and the slope to the straight line
 */
              __pyx_t_6 = ((__pyx_v_flow_direction < 0.0) != 0);
              if (__pyx_t_6) {

                /* "pygeoprocessing\routing\routing_core.pyx":866
 *                                 #direction to that side and the slope to the straight line
 *                                 #distance slope
 *                                 flow_direction = 0             # <<<<<<<<<<<<<<
 *                                 slope = s_1
 *                             elif flow_direction > max_r: #Eqn 5
 */
                __pyx_v_flow_direction = 0.0;

                /* "pygeoprocessing\routing\routing_core.pyx":867
 *                                 #distance slope
 *                                 flow_direction = 0
 *                                 slope = s_1             # <<<<<<<<<<<<<<
 *                             elif flow_direction > max_r: #Eqn 5
 *                                 #If the flow direciton goes off the diagonal side, figure
 */
                __pyx_v_slope = __pyx_v_s_1;
                goto __pyx_L42;
              }

              /* "pygeoprocessing\routing\routing_core.pyx":868
 *                                 flow_direction = 0
 *                                 slope = s_1
 *                             elif flow_direction > max_r: #Eqn 5             # <<<<<<<<<<<<<<
 *                                 #If the flow direciton goes off the diagonal side, figure
 *                                 #out what its value is and
 */
              __pyx_t_6 = ((__pyx_v_flow_direction > __pyx_v_max_r) != 0);
              if (__pyx_t_6) {

                /* "pygeoprocessing\routing\routing_core.pyx":871
 *                                 #If the flow direciton goes off the diagonal side, figure
 *                                 #out what its value is and
 *                                 flow_direction = max_r             # <<<<<<<<<<<<<<
 *                                 slope = (e_0 - e_2) / sqrt(d_1 ** 2 + d_2 ** 2)
 *                             else:
 */
                __pyx_v_flow_direction = __pyx_v_max_r;

                /* "pygeoprocessing\routing\routing_core.pyx":872
 *                                 #out what its value is and
 *                                 flow_direction = max_r
 *                                 slope = (e_0 - e_2) / sqrt(d_1 ** 2 + d_2 ** 2)             # <<<<<<<<<<<<<<
 *                             else:
 *                                 slope = sqrt(s_1 ** 2 + s_2 ** 2) #Eqn 3
 */
                __pyx_v_slope = ((__pyx_v_e_0 - __pyx_v_e_2) / sqrt((pow(__pyx_v_d_1, 2.0) + pow(__pyx_v_d_2, 2.0))));
                goto __pyx_L42;
              }
              /*else*/ {

                /* "pygeoprocessing\routing\routing_core.pyx":874
 *                                 slope = (e_0 - e_2) / sqrt(d_1 ** 2 + d_2 ** 2)
 *                             else:
 *                                 slope = sqrt(s_1 ** 2 + s_2 ** 2) #Eqn 3             # <<<<<<<<<<<<<<
 * 
 *                         #update the maxes depending on the results above
 */
                __pyx_v_slope = sqrt((pow(__pyx_v_s_1, 2.0) + pow(__pyx_v_s_2, 2.0)));
              }
              __pyx_L42:;
            }
            __pyx_L32:;

            /* "pygeoprocessing\routing\routing_core.pyx":877
 * 
 *                         #update the maxes depending on the results above
 *                         if slope > slope_max:             # <<<<<<<<<<<<<<
 *                             flow_direction_max_slope = flow_direction
 *                             slope_max = slope
 */
            __pyx_t_6 = ((__pyx_v_slope > __pyx_v_slope_max) != 0);
            if (__pyx_t_6) {

              /* "pygeoprocessing\routing\routing_core.pyx":878
 *                         #update the maxes depending on the results above
 *                         if slope > slope_max:
 *                             flow_direction_max_slope = flow_direction             # <<<<<<<<<<<<<<
 *                             slope_max = slope
 *                             max_index = facet_index
 */
              __pyx_v_flow_direction_max_slope = __pyx_v_flow_direction;

              /* "pygeoprocessing\routing\routing_core.pyx":879
 *                         if slope > slope_max:
 *                             flow_direction_max_slope = flow_direction
 *                             slope_max = slope             # <<<<<<<<<<<<<<
 *                             max_index = facet_index
 * 
 */
              __pyx_v_slope_max = __pyx_v_slope;

              /* "pygeoprocessing\routing\routing_core.pyx":880
 *                             flow_direction_max_slope = flow_direction
 *                             slope_max = slope
 *                             max_index = facet_index             # <<<<<<<<<<<<<<
 * 
 *                     #if there's a downward slope, save the flow direction
 */
              __pyx_v_max_index = __pyx_v_facet_index;
              goto __pyx_L43;
            }
            __pyx_L43:;
            __pyx_L18_continue:;
          }

          /* "pygeoprocessing\routing\routing_core.pyx":883
 * 
 *                     #if there's a downward slope, save the flow direction
 *                     if slope_max > 0:             # <<<<<<<<<<<<<<
 *                         flow_block[e_0_row_index, e_0_col_index, e_0_row_block_offset, e_0_col_block_offset] = (
 *                             a_f[max_index] * flow_direction_max_slope +
 */
          __pyx_t_6 = ((__pyx_v_slope_max > 0.0) != 0);
          if (__pyx_t_6) {

            /* "pygeoprocessing\routing\routing_core.pyx":884
 *                     #if there's a downward slope, save the flow direction
 *                     if slope_max > 0:
 *                         flow_block[e_0_row_index, e_0_col_index, e_0_row_block_offset, e_0_col_block_offset] = (             # <<<<<<<<<<<<<<
 *                             a_f[max_index] * flow_direction_max_slope +
 *                             a_c[max_index] * PI / 2.0)
 */
            __pyx_t_35 = __pyx_v_e_0_row_index;
            __pyx_t_45 = __pyx_v_e_0_col_index;
            __pyx_t_46 = __pyx_v_e_0_row_block_offset;
            __pyx_t_47 = __pyx_v_e_0_col_block_offset;
            *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.buf, __pyx_t_35, __pyx_pybuffernd_flow_block.diminfo[0].strides, __pyx_t_45, __pyx_pybuffernd_flow_block.diminfo[1].strides, __pyx_t_46, __pyx_pybuffernd_flow_block.diminfo[2].strides, __pyx_t_47, __pyx_pybuffernd_flow_block.diminfo[3].strides) = (((__pyx_v_a_f[__pyx_v_max_index]) * __pyx_v_flow_direction_max_slope) + (((__pyx_v_a_c[__pyx_v_max_index]) * __pyx_v_15pygeoprocessing_7routing_12routing_core_PI) / 2.0));

            /* "pygeoprocessing\routing\routing_core.pyx":887
 *                             a_f[max_index] * flow_direction_max_slope +
 *                             a_c[max_index] * PI / 2.0)
 *                         cache_dirty[e_0_row_index, e_0_col_index] = 1             # <<<<<<<<<<<<<<
 * 
 *     block_cache.flush_cache()
 */
            __pyx_t_48 = __pyx_v_e_0_row_index;
            __pyx_t_49 = __pyx_v_e_0_col_index;
            *__Pyx_BufPtrStrided2d(npy_byte *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_48, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_49, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;
            goto __pyx_L44;
          }
          __pyx_L44:;
          __pyx_L15_continue:;
        }
      }
    }
  }

  /* "pygeoprocessing\routing\routing_core.pyx":889
 *                         cache_dirty[e_0_row_index, e_0_col_index] = 1
 * 
 *     block_cache.flush_cache()             # <<<<<<<<<<<<<<
 *     flow_band = None
 *     gdal.Dataset.__swig_destroy__(flow_direction_dataset)
 */
  ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->flush_cache(__pyx_v_block_cache);

  /* "pygeoprocessing\routing\routing_core.pyx":890
 * 
 *     block_cache.flush_cache()
 *     flow_band = None             # <<<<<<<<<<<<<<
 *     gdal.Dataset.__swig_destroy__(flow_direction_dataset)
 *     flow_direction_dataset = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_flow_band, Py_None);

  /* "pygeoprocessing\routing\routing_core.pyx":891
 *     block_cache.flush_cache()
 *     flow_band = None
 *     gdal.Dataset.__swig_destroy__(flow_direction_dataset)             # <<<<<<<<<<<<<<
 *     flow_direction_dataset = None
 *     pygeoprocessing.calculate_raster_stats_uri(flow_direction_uri)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Dataset); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_swig_destroy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_flow_direction_dataset); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_23 = PyTuple_New(1+1); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_23);
    PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_dataset);
    PyTuple_SET_ITEM(__pyx_t_23, 0+1, __pyx_v_flow_direction_dataset);
    __Pyx_GIVEREF(__pyx_v_flow_direction_dataset);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_23, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":892
 *     flow_band = None
 *     gdal.Dataset.__swig_destroy__(flow_direction_dataset)
 *     flow_direction_dataset = None             # <<<<<<<<<<<<<<
 *     pygeoprocessing.calculate_raster_stats_uri(flow_direction_uri)
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_flow_direction_dataset, Py_None);

  /* "pygeoprocessing\routing\routing_core.pyx":893
 *     gdal.Dataset.__swig_destroy__(flow_direction_dataset)
 *     flow_direction_dataset = None
 *     pygeoprocessing.calculate_raster_stats_uri(flow_direction_uri)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_calculate_raster_stats_uri); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_23))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_23);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_23, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_v_flow_direction_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_flow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":669
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def flow_direction_inf(dem_uri, flow_direction_uri):             # <<<<<<<<<<<<<<
 *     """Calculates the D-infinity flow algorithm.  The output is a float
 *         raster whose values range from 0 to 2pi.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_23);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_block.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.flow_direction_inf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_block.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_dem_ds);
  __Pyx_XDECREF(__pyx_v_dem_band);
  __Pyx_XDECREF(__pyx_v_flow_direction_dataset);
  __Pyx_XDECREF(__pyx_v_flow_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_dem_block);
  __Pyx_XDECREF(__pyx_v_band_list);
  __Pyx_XDECREF(__pyx_v_block_list);
  __Pyx_XDECREF(__pyx_v_update_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_cache_dirty);
  __Pyx_XDECREF((PyObject *)__pyx_v_block_cache);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":899
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def distance_to_stream(             # <<<<<<<<<<<<<<
 *         flow_direction_uri, stream_uri, distance_uri, factor_uri=None):
 *     """This function calculates the flow downhill distance to the stream layers
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_7distance_to_stream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15pygeoprocessing_7routing_12routing_core_6distance_to_stream[] = "This function calculates the flow downhill distance to the stream layers\n\n        Args:\n            flow_direction_uri (string) - (input) a path to a raster with\n                d-infinity flow directions.\n            stream_uri (string) - (input) a raster where 1 indicates a stream\n                all other values ignored must be same dimensions and projection\n                as flow_direction_uri.\n            distance_uri (string) - (output) a path to the output raster that\n                will be created as same dimensions as the input rasters where\n                each pixel is in linear units the drainage from that point to a\n                stream.\n            factor_uri (string) - (optional input) a floating point raster that\n                is used to multiply the stepsize by for each current pixel,\n                useful for some models to calculate a user defined downstream\n                factor.\n\n        Returns:\n            nothing";
static PyMethodDef __pyx_mdef_15pygeoprocessing_7routing_12routing_core_7distance_to_stream = {"distance_to_stream", (PyCFunction)__pyx_pw_15pygeoprocessing_7routing_12routing_core_7distance_to_stream, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15pygeoprocessing_7routing_12routing_core_6distance_to_stream};
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_7distance_to_stream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_flow_direction_uri = 0;
  PyObject *__pyx_v_stream_uri = 0;
  PyObject *__pyx_v_distance_uri = 0;
  PyObject *__pyx_v_factor_uri = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance_to_stream (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flow_direction_uri,&__pyx_n_s_stream_uri,&__pyx_n_s_distance_uri,&__pyx_n_s_factor_uri,0};
    PyObject* values[4] = {0,0,0,0};

    /* "pygeoprocessing\routing\routing_core.pyx":900
 * @cython.cdivision(True)
 * def distance_to_stream(
 *         flow_direction_uri, stream_uri, distance_uri, factor_uri=None):             # <<<<<<<<<<<<<<
 *     """This function calculates the flow downhill distance to the stream layers
 * 
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flow_direction_uri)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stream_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance_to_stream", 0, 3, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_distance_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance_to_stream", 0, 3, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_factor_uri);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distance_to_stream") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_flow_direction_uri = values[0];
    __pyx_v_stream_uri = values[1];
    __pyx_v_distance_uri = values[2];
    __pyx_v_factor_uri = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance_to_stream", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.distance_to_stream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pygeoprocessing_7routing_12routing_core_6distance_to_stream(__pyx_self, __pyx_v_flow_direction_uri, __pyx_v_stream_uri, __pyx_v_distance_uri, __pyx_v_factor_uri);

  /* "pygeoprocessing\routing\routing_core.pyx":899
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def distance_to_stream(             # <<<<<<<<<<<<<<
 *         flow_direction_uri, stream_uri, distance_uri, factor_uri=None):
 *     """This function calculates the flow downhill distance to the stream layers
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_6distance_to_stream(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_direction_uri, PyObject *__pyx_v_stream_uri, PyObject *__pyx_v_distance_uri, PyObject *__pyx_v_factor_uri) {
  float __pyx_v_distance_nodata;
  float __pyx_v_processed_cell_nodata;
  PyObject *__pyx_v_processed_cell_uri = NULL;
  PyObject *__pyx_v_processed_cell_ds = NULL;
  PyObject *__pyx_v_processed_cell_band = NULL;
  int *__pyx_v_row_offsets;
  int *__pyx_v_col_offsets;
  int *__pyx_v_inflow_offsets;
  int __pyx_v_n_rows;
  int __pyx_v_n_cols;
  int __pyx_v_INF;
  std::deque<int>  __pyx_v_visit_stack;
  PyObject *__pyx_v_stream_ds = NULL;
  PyObject *__pyx_v_stream_band = NULL;
  float __pyx_v_stream_nodata;
  float __pyx_v_cell_size;
  PyObject *__pyx_v_distance_ds = NULL;
  PyObject *__pyx_v_distance_band = NULL;
  PyObject *__pyx_v_outflow_weights_uri = NULL;
  PyObject *__pyx_v_outflow_direction_uri = NULL;
  PyObject *__pyx_v_outflow_weights_ds = NULL;
  PyObject *__pyx_v_outflow_weights_band = NULL;
  CYTHON_UNUSED float __pyx_v_outflow_weights_nodata;
  PyObject *__pyx_v_outflow_direction_ds = NULL;
  PyObject *__pyx_v_outflow_direction_band = NULL;
  int __pyx_v_outflow_direction_nodata;
  int __pyx_v_block_col_size;
  int __pyx_v_block_row_size;
  int __pyx_v_n_global_block_rows;
  int __pyx_v_n_global_block_cols;
  PyArrayObject *__pyx_v_stream_block = 0;
  PyArrayObject *__pyx_v_outflow_direction_block = 0;
  PyArrayObject *__pyx_v_outflow_weights_block = 0;
  PyArrayObject *__pyx_v_distance_block = 0;
  PyArrayObject *__pyx_v_processed_cell_block = 0;
  PyObject *__pyx_v_band_list = NULL;
  PyObject *__pyx_v_block_list = NULL;
  PyObject *__pyx_v_update_list = NULL;
  PyArrayObject *__pyx_v_factor_block = 0;
  int __pyx_v_factor_exists;
  PyObject *__pyx_v_factor_ds = NULL;
  PyObject *__pyx_v_factor_band = NULL;
  PyArrayObject *__pyx_v_cache_dirty = 0;
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_block_cache = 0;
  int __pyx_v_global_row;
  int __pyx_v_global_col;
  int __pyx_v_row_index;
  int __pyx_v_col_index;
  int __pyx_v_row_block_offset;
  int __pyx_v_col_block_offset;
  int __pyx_v_global_block_row;
  int __pyx_v_global_block_col;
  int __pyx_v_neighbor_row;
  int __pyx_v_neighbor_col;
  int __pyx_v_neighbor_row_index;
  int __pyx_v_neighbor_col_index;
  int __pyx_v_neighbor_row_block_offset;
  int __pyx_v_neighbor_col_block_offset;
  int __pyx_v_flat_index;
  std::set<int>  __pyx_v_cells_in_queue;
  time_t __pyx_v_last_time;
  time_t __pyx_v_current_time;
  int __pyx_v_neighbor_outflow_direction;
  int __pyx_v_neighbor_index;
  int __pyx_v_outflow_direction;
  float __pyx_v_neighbor_outflow_weight;
  float __pyx_v_current_distance;
  float __pyx_v_outflow_weight;
  float __pyx_v_neighbor_distance;
  float __pyx_v_step_size;
  float __pyx_v_factor;
  int __pyx_v_it_flows_here;
  float __pyx_v_current_stream;
  CYTHON_UNUSED int __pyx_v_pushed_current;
  int __pyx_v_update_downstream;
  int __pyx_v_neighbor_flat_index;
  PyObject *__pyx_v_dataset = NULL;
  PyObject *__pyx_v_dataset_uri = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cache_dirty;
  __Pyx_Buffer __pyx_pybuffer_cache_dirty;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_distance_block;
  __Pyx_Buffer __pyx_pybuffer_distance_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_factor_block;
  __Pyx_Buffer __pyx_pybuffer_factor_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_outflow_direction_block;
  __Pyx_Buffer __pyx_pybuffer_outflow_direction_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_outflow_weights_block;
  __Pyx_Buffer __pyx_pybuffer_outflow_weights_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_processed_cell_block;
  __Pyx_Buffer __pyx_pybuffer_processed_cell_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stream_block;
  __Pyx_Buffer __pyx_pybuffer_stream_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8[8];
  int __pyx_t_9[8];
  int __pyx_t_10[8];
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  float __pyx_t_14;
  PyArrayObject *__pyx_t_15 = NULL;
  PyArrayObject *__pyx_t_16 = NULL;
  PyArrayObject *__pyx_t_17 = NULL;
  PyArrayObject *__pyx_t_18 = NULL;
  PyArrayObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyArrayObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  int __pyx_t_25;
  PyArrayObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  int __pyx_t_28;
  int __pyx_t_29;
  int __pyx_t_30;
  long __pyx_t_31;
  long __pyx_t_32;
  int __pyx_t_33;
  long __pyx_t_34;
  int __pyx_t_35;
  int __pyx_t_36;
  int __pyx_t_37;
  int __pyx_t_38;
  int __pyx_t_39;
  int __pyx_t_40;
  int __pyx_t_41;
  int __pyx_t_42;
  int __pyx_t_43;
  int __pyx_t_44;
  int __pyx_t_45;
  int __pyx_t_46;
  int __pyx_t_47;
  int __pyx_t_48;
  int __pyx_t_49;
  int __pyx_t_50;
  int __pyx_t_51;
  int __pyx_t_52;
  int __pyx_t_53;
  int __pyx_t_54;
  int __pyx_t_55;
  int __pyx_t_56;
  int __pyx_t_57;
  int __pyx_t_58;
  int __pyx_t_59;
  int __pyx_t_60;
  int __pyx_t_61;
  int __pyx_t_62;
  int __pyx_t_63;
  int __pyx_t_64;
  int __pyx_t_65;
  int __pyx_t_66;
  int __pyx_t_67;
  int __pyx_t_68;
  int __pyx_t_69;
  int __pyx_t_70;
  int __pyx_t_71;
  int __pyx_t_72;
  int __pyx_t_73;
  int __pyx_t_74;
  int __pyx_t_75;
  int __pyx_t_76;
  int __pyx_t_77;
  int __pyx_t_78;
  int __pyx_t_79;
  int __pyx_t_80;
  int __pyx_t_81;
  int __pyx_t_82;
  int __pyx_t_83;
  int __pyx_t_84;
  int __pyx_t_85;
  int __pyx_t_86;
  int __pyx_t_87;
  int __pyx_t_88;
  int __pyx_t_89;
  int __pyx_t_90;
  int __pyx_t_91;
  int __pyx_t_92;
  int __pyx_t_93;
  int __pyx_t_94;
  int __pyx_t_95;
  int __pyx_t_96;
  int __pyx_t_97;
  int __pyx_t_98;
  int __pyx_t_99;
  int __pyx_t_100;
  int __pyx_t_101;
  int __pyx_t_102;
  int __pyx_t_103;
  int __pyx_t_104;
  int __pyx_t_105;
  int __pyx_t_106;
  int __pyx_t_107;
  int __pyx_t_108;
  int __pyx_t_109;
  int __pyx_t_110;
  int __pyx_t_111;
  int __pyx_t_112;
  int __pyx_t_113;
  int __pyx_t_114;
  int __pyx_t_115;
  int __pyx_t_116;
  int __pyx_t_117;
  int __pyx_t_118;
  int __pyx_t_119;
  int __pyx_t_120;
  int __pyx_t_121;
  int __pyx_t_122;
  int __pyx_t_123;
  int __pyx_t_124;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance_to_stream", 0);
  __pyx_pybuffer_stream_block.pybuffer.buf = NULL;
  __pyx_pybuffer_stream_block.refcount = 0;
  __pyx_pybuffernd_stream_block.data = NULL;
  __pyx_pybuffernd_stream_block.rcbuffer = &__pyx_pybuffer_stream_block;
  __pyx_pybuffer_outflow_direction_block.pybuffer.buf = NULL;
  __pyx_pybuffer_outflow_direction_block.refcount = 0;
  __pyx_pybuffernd_outflow_direction_block.data = NULL;
  __pyx_pybuffernd_outflow_direction_block.rcbuffer = &__pyx_pybuffer_outflow_direction_block;
  __pyx_pybuffer_outflow_weights_block.pybuffer.buf = NULL;
  __pyx_pybuffer_outflow_weights_block.refcount = 0;
  __pyx_pybuffernd_outflow_weights_block.data = NULL;
  __pyx_pybuffernd_outflow_weights_block.rcbuffer = &__pyx_pybuffer_outflow_weights_block;
  __pyx_pybuffer_distance_block.pybuffer.buf = NULL;
  __pyx_pybuffer_distance_block.refcount = 0;
  __pyx_pybuffernd_distance_block.data = NULL;
  __pyx_pybuffernd_distance_block.rcbuffer = &__pyx_pybuffer_distance_block;
  __pyx_pybuffer_processed_cell_block.pybuffer.buf = NULL;
  __pyx_pybuffer_processed_cell_block.refcount = 0;
  __pyx_pybuffernd_processed_cell_block.data = NULL;
  __pyx_pybuffernd_processed_cell_block.rcbuffer = &__pyx_pybuffer_processed_cell_block;
  __pyx_pybuffer_factor_block.pybuffer.buf = NULL;
  __pyx_pybuffer_factor_block.refcount = 0;
  __pyx_pybuffernd_factor_block.data = NULL;
  __pyx_pybuffernd_factor_block.rcbuffer = &__pyx_pybuffer_factor_block;
  __pyx_pybuffer_cache_dirty.pybuffer.buf = NULL;
  __pyx_pybuffer_cache_dirty.refcount = 0;
  __pyx_pybuffernd_cache_dirty.data = NULL;
  __pyx_pybuffernd_cache_dirty.rcbuffer = &__pyx_pybuffer_cache_dirty;

  /* "pygeoprocessing\routing\routing_core.pyx":921
 *             nothing"""
 * 
 *     cdef float distance_nodata = -9999             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base_uri(
 *         flow_direction_uri, distance_uri, 'GTiff', distance_nodata,
 */
  __pyx_v_distance_nodata = -9999.0;

  /* "pygeoprocessing\routing\routing_core.pyx":922
 * 
 *     cdef float distance_nodata = -9999
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri, distance_uri, 'GTiff', distance_nodata,
 *         gdal.GDT_Float32, fill_value=distance_nodata)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_new_raster_from_base_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":923
 *     cdef float distance_nodata = -9999
 *     pygeoprocessing.new_raster_from_base_uri(
 *         flow_direction_uri, distance_uri, 'GTiff', distance_nodata,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Float32, fill_value=distance_nodata)
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_distance_nodata); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygeoprocessing\routing\routing_core.pyx":924
 *     pygeoprocessing.new_raster_from_base_uri(
 *         flow_direction_uri, distance_uri, 'GTiff', distance_nodata,
 *         gdal.GDT_Float32, fill_value=distance_nodata)             # <<<<<<<<<<<<<<
 * 
 *     cdef float processed_cell_nodata = 127
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_GDT_Float32); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":922
 * 
 *     cdef float distance_nodata = -9999
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri, distance_uri, 'GTiff', distance_nodata,
 *         gdal.GDT_Float32, fill_value=distance_nodata)
 */
  __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_flow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_flow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
  __Pyx_INCREF(__pyx_v_distance_uri);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_distance_uri);
  __Pyx_GIVEREF(__pyx_v_distance_uri);
  __Pyx_INCREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_n_s_GTiff);
  __Pyx_GIVEREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":924
 *     pygeoprocessing.new_raster_from_base_uri(
 *         flow_direction_uri, distance_uri, 'GTiff', distance_nodata,
 *         gdal.GDT_Float32, fill_value=distance_nodata)             # <<<<<<<<<<<<<<
 * 
 *     cdef float processed_cell_nodata = 127
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_distance_nodata); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_fill_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":922
 * 
 *     cdef float distance_nodata = -9999
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri, distance_uri, 'GTiff', distance_nodata,
 *         gdal.GDT_Float32, fill_value=distance_nodata)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":926
 *         gdal.GDT_Float32, fill_value=distance_nodata)
 * 
 *     cdef float processed_cell_nodata = 127             # <<<<<<<<<<<<<<
 *     processed_cell_uri = (
 *         os.path.join(os.path.dirname(flow_direction_uri), 'processed_cell.tif'))
 */
  __pyx_v_processed_cell_nodata = 127.0;

  /* "pygeoprocessing\routing\routing_core.pyx":928
 *     cdef float processed_cell_nodata = 127
 *     processed_cell_uri = (
 *         os.path.join(os.path.dirname(flow_direction_uri), 'processed_cell.tif'))             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base_uri(
 *         distance_uri, processed_cell_uri, 'GTiff', processed_cell_nodata,
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_dirname); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_flow_direction_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_flow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_2) {
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
  }
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_processed_cell_tif);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_kp_s_processed_cell_tif);
  __Pyx_GIVEREF(__pyx_kp_s_processed_cell_tif);
  __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_processed_cell_uri = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":929
 *     processed_cell_uri = (
 *         os.path.join(os.path.dirname(flow_direction_uri), 'processed_cell.tif'))
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         distance_uri, processed_cell_uri, 'GTiff', processed_cell_nodata,
 *         gdal.GDT_Byte, fill_value=0)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_new_raster_from_base_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":930
 *         os.path.join(os.path.dirname(flow_direction_uri), 'processed_cell.tif'))
 *     pygeoprocessing.new_raster_from_base_uri(
 *         distance_uri, processed_cell_uri, 'GTiff', processed_cell_nodata,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Byte, fill_value=0)
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_processed_cell_nodata); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygeoprocessing\routing\routing_core.pyx":931
 *     pygeoprocessing.new_raster_from_base_uri(
 *         distance_uri, processed_cell_uri, 'GTiff', processed_cell_nodata,
 *         gdal.GDT_Byte, fill_value=0)             # <<<<<<<<<<<<<<
 * 
 *     processed_cell_ds = gdal.Open(processed_cell_uri, gdal.GA_Update)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_GDT_Byte); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":929
 *     processed_cell_uri = (
 *         os.path.join(os.path.dirname(flow_direction_uri), 'processed_cell.tif'))
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         distance_uri, processed_cell_uri, 'GTiff', processed_cell_nodata,
 *         gdal.GDT_Byte, fill_value=0)
 */
  __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_distance_uri);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_distance_uri);
  __Pyx_GIVEREF(__pyx_v_distance_uri);
  __Pyx_INCREF(__pyx_v_processed_cell_uri);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_processed_cell_uri);
  __Pyx_GIVEREF(__pyx_v_processed_cell_uri);
  __Pyx_INCREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_n_s_GTiff);
  __Pyx_GIVEREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_fill_value, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":933
 *         gdal.GDT_Byte, fill_value=0)
 * 
 *     processed_cell_ds = gdal.Open(processed_cell_uri, gdal.GA_Update)             # <<<<<<<<<<<<<<
 *     processed_cell_band = processed_cell_ds.GetRasterBand(1)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Open); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_2 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (__pyx_t_3) {
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_processed_cell_uri);
  PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_7, __pyx_v_processed_cell_uri);
  __Pyx_GIVEREF(__pyx_v_processed_cell_uri);
  PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_7, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_processed_cell_ds = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":934
 * 
 *     processed_cell_ds = gdal.Open(processed_cell_uri, gdal.GA_Update)
 *     processed_cell_band = processed_cell_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_processed_cell_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_processed_cell_band = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":936
 *     processed_cell_band = processed_cell_ds.GetRasterBand(1)
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]             # <<<<<<<<<<<<<<
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]
 *     cdef int *inflow_offsets = [4, 5, 6, 7, 0, 1, 2, 3]
 */
  __pyx_t_8[0] = 0;
  __pyx_t_8[1] = -1;
  __pyx_t_8[2] = -1;
  __pyx_t_8[3] = -1;
  __pyx_t_8[4] = 0;
  __pyx_t_8[5] = 1;
  __pyx_t_8[6] = 1;
  __pyx_t_8[7] = 1;
  __pyx_v_row_offsets = __pyx_t_8;

  /* "pygeoprocessing\routing\routing_core.pyx":937
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]             # <<<<<<<<<<<<<<
 *     cdef int *inflow_offsets = [4, 5, 6, 7, 0, 1, 2, 3]
 * 
 */
  __pyx_t_9[0] = 1;
  __pyx_t_9[1] = 1;
  __pyx_t_9[2] = 0;
  __pyx_t_9[3] = -1;
  __pyx_t_9[4] = -1;
  __pyx_t_9[5] = -1;
  __pyx_t_9[6] = 0;
  __pyx_t_9[7] = 1;
  __pyx_v_col_offsets = __pyx_t_9;

  /* "pygeoprocessing\routing\routing_core.pyx":938
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]
 *     cdef int *inflow_offsets = [4, 5, 6, 7, 0, 1, 2, 3]             # <<<<<<<<<<<<<<
 * 
 *     cdef int n_rows, n_cols
 */
  __pyx_t_10[0] = 4;
  __pyx_t_10[1] = 5;
  __pyx_t_10[2] = 6;
  __pyx_t_10[3] = 7;
  __pyx_t_10[4] = 0;
  __pyx_t_10[5] = 1;
  __pyx_t_10[6] = 2;
  __pyx_t_10[7] = 3;
  __pyx_v_inflow_offsets = __pyx_t_10;

  /* "pygeoprocessing\routing\routing_core.pyx":941
 * 
 *     cdef int n_rows, n_cols
 *     n_rows, n_cols = pygeoprocessing.get_row_col_from_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri)
 *     cdef int INF = n_rows + n_cols
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_row_col_from_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":942
 *     cdef int n_rows, n_cols
 *     n_rows, n_cols = pygeoprocessing.get_row_col_from_uri(
 *         flow_direction_uri)             # <<<<<<<<<<<<<<
 *     cdef int INF = n_rows + n_cols
 * 
 */
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_flow_direction_uri); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_flow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
    PyObject* sequence = __pyx_t_6;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_1 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = Py_TYPE(__pyx_t_1)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_11(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_4 = __pyx_t_11(__pyx_t_1); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_1), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = NULL;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }

  /* "pygeoprocessing\routing\routing_core.pyx":941
 * 
 *     cdef int n_rows, n_cols
 *     n_rows, n_cols = pygeoprocessing.get_row_col_from_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri)
 *     cdef int INF = n_rows + n_cols
 */
  __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_n_rows = __pyx_t_12;
  __pyx_v_n_cols = __pyx_t_13;

  /* "pygeoprocessing\routing\routing_core.pyx":943
 *     n_rows, n_cols = pygeoprocessing.get_row_col_from_uri(
 *         flow_direction_uri)
 *     cdef int INF = n_rows + n_cols             # <<<<<<<<<<<<<<
 * 
 *     cdef deque[int] visit_stack
 */
  __pyx_v_INF = (__pyx_v_n_rows + __pyx_v_n_cols);

  /* "pygeoprocessing\routing\routing_core.pyx":947
 *     cdef deque[int] visit_stack
 * 
 *     stream_ds = gdal.Open(stream_uri)             # <<<<<<<<<<<<<<
 *     stream_band = stream_ds.GetRasterBand(1)
 *     cdef float stream_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Open); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_stream_uri); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_stream_uri);
    PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_v_stream_uri);
    __Pyx_GIVEREF(__pyx_v_stream_uri);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_stream_ds = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":948
 * 
 *     stream_ds = gdal.Open(stream_uri)
 *     stream_band = stream_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef float stream_nodata = pygeoprocessing.get_nodata_from_uri(
 *         stream_uri)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_stream_band = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":949
 *     stream_ds = gdal.Open(stream_uri)
 *     stream_band = stream_ds.GetRasterBand(1)
 *     cdef float stream_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         stream_uri)
 *     cdef float cell_size = pygeoprocessing.get_cell_size_from_uri(stream_uri)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":950
 *     stream_band = stream_ds.GetRasterBand(1)
 *     cdef float stream_nodata = pygeoprocessing.get_nodata_from_uri(
 *         stream_uri)             # <<<<<<<<<<<<<<
 *     cdef float cell_size = pygeoprocessing.get_cell_size_from_uri(stream_uri)
 * 
 */
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_stream_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_v_stream_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_stream_uri);
    __Pyx_GIVEREF(__pyx_v_stream_uri);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":949
 *     stream_ds = gdal.Open(stream_uri)
 *     stream_band = stream_ds.GetRasterBand(1)
 *     cdef float stream_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         stream_uri)
 *     cdef float cell_size = pygeoprocessing.get_cell_size_from_uri(stream_uri)
 */
  __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_stream_nodata = __pyx_t_14;

  /* "pygeoprocessing\routing\routing_core.pyx":951
 *     cdef float stream_nodata = pygeoprocessing.get_nodata_from_uri(
 *         stream_uri)
 *     cdef float cell_size = pygeoprocessing.get_cell_size_from_uri(stream_uri)             # <<<<<<<<<<<<<<
 * 
 *     distance_ds = gdal.Open(distance_uri, gdal.GA_Update)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_cell_size_from_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_stream_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_stream_uri);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_stream_uri);
    __Pyx_GIVEREF(__pyx_v_stream_uri);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_cell_size = __pyx_t_14;

  /* "pygeoprocessing\routing\routing_core.pyx":953
 *     cdef float cell_size = pygeoprocessing.get_cell_size_from_uri(stream_uri)
 * 
 *     distance_ds = gdal.Open(distance_uri, gdal.GA_Update)             # <<<<<<<<<<<<<<
 *     distance_band = distance_ds.GetRasterBand(1)
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Open); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_3 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_INCREF(__pyx_v_distance_uri);
  PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_7, __pyx_v_distance_uri);
  __Pyx_GIVEREF(__pyx_v_distance_uri);
  PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_7, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_distance_ds = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":954
 * 
 *     distance_ds = gdal.Open(distance_uri, gdal.GA_Update)
 *     distance_band = distance_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     outflow_weights_uri = pygeoprocessing.temporary_filename()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_distance_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_distance_band = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":956
 *     distance_band = distance_ds.GetRasterBand(1)
 * 
 *     outflow_weights_uri = pygeoprocessing.temporary_filename()             # <<<<<<<<<<<<<<
 *     outflow_direction_uri = pygeoprocessing.temporary_filename()
 *     calculate_flow_weights(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_temporary_filename); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_outflow_weights_uri = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":957
 * 
 *     outflow_weights_uri = pygeoprocessing.temporary_filename()
 *     outflow_direction_uri = pygeoprocessing.temporary_filename()             # <<<<<<<<<<<<<<
 *     calculate_flow_weights(
 *         flow_direction_uri, outflow_weights_uri, outflow_direction_uri)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_temporary_filename); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_outflow_direction_uri = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":958
 *     outflow_weights_uri = pygeoprocessing.temporary_filename()
 *     outflow_direction_uri = pygeoprocessing.temporary_filename()
 *     calculate_flow_weights(             # <<<<<<<<<<<<<<
 *         flow_direction_uri, outflow_weights_uri, outflow_direction_uri)
 *     outflow_weights_ds = gdal.Open(outflow_weights_uri)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_calculate_flow_weights); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pygeoprocessing\routing\routing_core.pyx":959
 *     outflow_direction_uri = pygeoprocessing.temporary_filename()
 *     calculate_flow_weights(
 *         flow_direction_uri, outflow_weights_uri, outflow_direction_uri)             # <<<<<<<<<<<<<<
 *     outflow_weights_ds = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_ds.GetRasterBand(1)
 */
  __pyx_t_3 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_1 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__pyx_t_3) {
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_flow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_7, __pyx_v_flow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
  __Pyx_INCREF(__pyx_v_outflow_weights_uri);
  PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_7, __pyx_v_outflow_weights_uri);
  __Pyx_GIVEREF(__pyx_v_outflow_weights_uri);
  __Pyx_INCREF(__pyx_v_outflow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_7, __pyx_v_outflow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_outflow_direction_uri);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":960
 *     calculate_flow_weights(
 *         flow_direction_uri, outflow_weights_uri, outflow_direction_uri)
 *     outflow_weights_ds = gdal.Open(outflow_weights_uri)             # <<<<<<<<<<<<<<
 *     outflow_weights_band = outflow_weights_ds.GetRasterBand(1)
 *     cdef float outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 960; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Open); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 960; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_outflow_weights_uri); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 960; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 960; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_outflow_weights_uri);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_outflow_weights_uri);
    __Pyx_GIVEREF(__pyx_v_outflow_weights_uri);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 960; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_outflow_weights_ds = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":961
 *         flow_direction_uri, outflow_weights_uri, outflow_direction_uri)
 *     outflow_weights_ds = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef float outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_weights_uri)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_outflow_weights_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_outflow_weights_band = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":962
 *     outflow_weights_ds = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_ds.GetRasterBand(1)
 *     cdef float outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         outflow_weights_uri)
 *     outflow_direction_ds = gdal.Open(outflow_direction_uri)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":963
 *     outflow_weights_band = outflow_weights_ds.GetRasterBand(1)
 *     cdef float outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_weights_uri)             # <<<<<<<<<<<<<<
 *     outflow_direction_ds = gdal.Open(outflow_direction_uri)
 *     outflow_direction_band = outflow_direction_ds.GetRasterBand(1)
 */
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_outflow_weights_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_v_outflow_weights_uri);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_outflow_weights_uri);
    __Pyx_GIVEREF(__pyx_v_outflow_weights_uri);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":962
 *     outflow_weights_ds = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_ds.GetRasterBand(1)
 *     cdef float outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         outflow_weights_uri)
 *     outflow_direction_ds = gdal.Open(outflow_direction_uri)
 */
  __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_outflow_weights_nodata = __pyx_t_14;

  /* "pygeoprocessing\routing\routing_core.pyx":964
 *     cdef float outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_weights_uri)
 *     outflow_direction_ds = gdal.Open(outflow_direction_uri)             # <<<<<<<<<<<<<<
 *     outflow_direction_band = outflow_direction_ds.GetRasterBand(1)
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Open); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_outflow_direction_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_outflow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_outflow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_outflow_direction_uri);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_outflow_direction_ds = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":965
 *         outflow_weights_uri)
 *     outflow_direction_ds = gdal.Open(outflow_direction_uri)
 *     outflow_direction_band = outflow_direction_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_direction_uri)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_outflow_direction_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_outflow_direction_band = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":966
 *     outflow_direction_ds = gdal.Open(outflow_direction_uri)
 *     outflow_direction_band = outflow_direction_ds.GetRasterBand(1)
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         outflow_direction_uri)
 *     cdef int block_col_size, block_row_size
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":967
 *     outflow_direction_band = outflow_direction_ds.GetRasterBand(1)
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_direction_uri)             # <<<<<<<<<<<<<<
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = stream_band.GetBlockSize()
 */
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_outflow_direction_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_outflow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_outflow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_outflow_direction_uri);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":966
 *     outflow_direction_ds = gdal.Open(outflow_direction_uri)
 *     outflow_direction_band = outflow_direction_ds.GetRasterBand(1)
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         outflow_direction_uri)
 *     cdef int block_col_size, block_row_size
 */
  __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_outflow_direction_nodata = __pyx_t_13;

  /* "pygeoprocessing\routing\routing_core.pyx":969
 *         outflow_direction_uri)
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = stream_band.GetBlockSize()             # <<<<<<<<<<<<<<
 *     cdef int n_global_block_rows = int(ceil(float(n_rows) / block_row_size))
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = Py_TYPE(__pyx_t_1)->tp_iternext;
    index = 0; __pyx_t_6 = __pyx_t_11(__pyx_t_1); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_6);
    index = 1; __pyx_t_3 = __pyx_t_11(__pyx_t_1); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_1), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = NULL;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L6_unpacking_done:;
  }
  __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_block_col_size = __pyx_t_13;
  __pyx_v_block_row_size = __pyx_t_12;

  /* "pygeoprocessing\routing\routing_core.pyx":970
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = stream_band.GetBlockSize()
 *     cdef int n_global_block_rows = int(ceil(float(n_rows) / block_row_size))             # <<<<<<<<<<<<<<
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))
 * 
 */
  __pyx_v_n_global_block_rows = ((int)ceil((((double)__pyx_v_n_rows) / __pyx_v_block_row_size)));

  /* "pygeoprocessing\routing\routing_core.pyx":971
 *     block_col_size, block_row_size = stream_band.GetBlockSize()
 *     cdef int n_global_block_rows = int(ceil(float(n_rows) / block_row_size))
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))             # <<<<<<<<<<<<<<
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] stream_block = numpy.zeros(
 */
  __pyx_v_n_global_block_cols = ((int)ceil((((double)__pyx_v_n_cols) / __pyx_v_block_col_size)));

  /* "pygeoprocessing\routing\routing_core.pyx":973
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] stream_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":974
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] stream_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = (
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_6 = 0;
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":973
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] stream_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "pygeoprocessing\routing\routing_core.pyx":975
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] stream_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = (
 *         numpy.zeros(
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":973
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] stream_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stream_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_stream_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_stream_block.diminfo[0].strides = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stream_block.diminfo[0].shape = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_stream_block.diminfo[1].strides = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_stream_block.diminfo[1].shape = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_stream_block.diminfo[2].strides = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_stream_block.diminfo[2].shape = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_stream_block.diminfo[3].strides = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_stream_block.diminfo[3].shape = __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_15 = 0;
  __pyx_v_stream_block = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":977
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int8))
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":978
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = (
 *         numpy.zeros(
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *             dtype=numpy.int8))
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = (
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_6 = 0;
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":977
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int8))
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pygeoprocessing\routing\routing_core.pyx":979
 *         numpy.zeros(
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int8))             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = (
 *         numpy.zeros(
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":977
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int8))
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_16 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn_npy_int8, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_outflow_direction_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_outflow_direction_block.diminfo[0].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_outflow_direction_block.diminfo[0].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_outflow_direction_block.diminfo[1].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_outflow_direction_block.diminfo[1].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_outflow_direction_block.diminfo[2].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_outflow_direction_block.diminfo[2].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_outflow_direction_block.diminfo[3].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_outflow_direction_block.diminfo[3].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_16 = 0;
  __pyx_v_outflow_direction_block = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":981
 *             dtype=numpy.int8))
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.float32))
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":982
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = (
 *         numpy.zeros(
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *             dtype=numpy.float32))
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] distance_block = numpy.zeros(
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":981
 *             dtype=numpy.int8))
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.float32))
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);

  /* "pygeoprocessing\routing\routing_core.pyx":983
 *         numpy.zeros(
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.float32))             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] distance_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":981
 *             dtype=numpy.int8))
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.float32))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_17 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_17, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_outflow_weights_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_outflow_weights_block.diminfo[0].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_outflow_weights_block.diminfo[0].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_outflow_weights_block.diminfo[1].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_outflow_weights_block.diminfo[1].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_outflow_weights_block.diminfo[2].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_outflow_weights_block.diminfo[2].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_outflow_weights_block.diminfo[3].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_outflow_weights_block.diminfo[3].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_17 = 0;
  __pyx_v_outflow_weights_block = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":984
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.float32))
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] distance_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":985
 *             dtype=numpy.float32))
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] distance_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] processed_cell_block = (
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":984
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.float32))
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] distance_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":986
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] distance_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] processed_cell_block = (
 *         numpy.zeros(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":984
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.float32))
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] distance_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_18 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_distance_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_18, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_distance_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_distance_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_distance_block.diminfo[0].strides = __pyx_pybuffernd_distance_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_distance_block.diminfo[0].shape = __pyx_pybuffernd_distance_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_distance_block.diminfo[1].strides = __pyx_pybuffernd_distance_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_distance_block.diminfo[1].shape = __pyx_pybuffernd_distance_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_distance_block.diminfo[2].strides = __pyx_pybuffernd_distance_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_distance_block.diminfo[2].shape = __pyx_pybuffernd_distance_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_distance_block.diminfo[3].strides = __pyx_pybuffernd_distance_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_distance_block.diminfo[3].shape = __pyx_pybuffernd_distance_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_18 = 0;
  __pyx_v_distance_block = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":988
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] processed_cell_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int8))
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":989
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] processed_cell_block = (
 *         numpy.zeros(
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *             dtype=numpy.int8))
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":988
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] processed_cell_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int8))
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygeoprocessing\routing\routing_core.pyx":990
 *         numpy.zeros(
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int8))             # <<<<<<<<<<<<<<
 * 
 *     band_list = [stream_band, outflow_direction_band, outflow_weights_band,
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":988
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] processed_cell_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int8))
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_19 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_19, &__Pyx_TypeInfo_nn_npy_int8, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_processed_cell_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_processed_cell_block.diminfo[0].strides = __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_processed_cell_block.diminfo[0].shape = __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_processed_cell_block.diminfo[1].strides = __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_processed_cell_block.diminfo[1].shape = __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_processed_cell_block.diminfo[2].strides = __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_processed_cell_block.diminfo[2].shape = __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_processed_cell_block.diminfo[3].strides = __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_processed_cell_block.diminfo[3].shape = __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_19 = 0;
  __pyx_v_processed_cell_block = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":992
 *             dtype=numpy.int8))
 * 
 *     band_list = [stream_band, outflow_direction_band, outflow_weights_band,             # <<<<<<<<<<<<<<
 *                  distance_band, processed_cell_band]
 *     block_list = [stream_block, outflow_direction_block, outflow_weights_block,
 */
  __pyx_t_5 = PyList_New(5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_stream_band);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_v_stream_band);
  __Pyx_GIVEREF(__pyx_v_stream_band);
  __Pyx_INCREF(__pyx_v_outflow_direction_band);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_v_outflow_direction_band);
  __Pyx_GIVEREF(__pyx_v_outflow_direction_band);
  __Pyx_INCREF(__pyx_v_outflow_weights_band);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_v_outflow_weights_band);
  __Pyx_GIVEREF(__pyx_v_outflow_weights_band);
  __Pyx_INCREF(__pyx_v_distance_band);
  PyList_SET_ITEM(__pyx_t_5, 3, __pyx_v_distance_band);
  __Pyx_GIVEREF(__pyx_v_distance_band);
  __Pyx_INCREF(__pyx_v_processed_cell_band);
  PyList_SET_ITEM(__pyx_t_5, 4, __pyx_v_processed_cell_band);
  __Pyx_GIVEREF(__pyx_v_processed_cell_band);
  __pyx_v_band_list = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":994
 *     band_list = [stream_band, outflow_direction_band, outflow_weights_band,
 *                  distance_band, processed_cell_band]
 *     block_list = [stream_block, outflow_direction_block, outflow_weights_block,             # <<<<<<<<<<<<<<
 *                   distance_block, processed_cell_block]
 *     update_list = [False, False, False, True, True]
 */
  __pyx_t_5 = PyList_New(5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_stream_block));
  PyList_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_stream_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_stream_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_outflow_direction_block));
  PyList_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_outflow_direction_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_outflow_direction_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_outflow_weights_block));
  PyList_SET_ITEM(__pyx_t_5, 2, ((PyObject *)__pyx_v_outflow_weights_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_outflow_weights_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_distance_block));
  PyList_SET_ITEM(__pyx_t_5, 3, ((PyObject *)__pyx_v_distance_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_distance_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_processed_cell_block));
  PyList_SET_ITEM(__pyx_t_5, 4, ((PyObject *)__pyx_v_processed_cell_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_processed_cell_block));
  __pyx_v_block_list = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":996
 *     block_list = [stream_block, outflow_direction_block, outflow_weights_block,
 *                   distance_block, processed_cell_block]
 *     update_list = [False, False, False, True, True]             # <<<<<<<<<<<<<<
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] factor_block
 */
  __pyx_t_5 = PyList_New(5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_5, 0, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_5, 1, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_5, 2, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_True);
  PyList_SET_ITEM(__pyx_t_5, 3, Py_True);
  __Pyx_GIVEREF(Py_True);
  __Pyx_INCREF(Py_True);
  PyList_SET_ITEM(__pyx_t_5, 4, Py_True);
  __Pyx_GIVEREF(Py_True);
  __pyx_v_update_list = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":999
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] factor_block
 *     cdef int factor_exists = (factor_uri != None)             # <<<<<<<<<<<<<<
 *     if factor_exists:
 *         factor_block = numpy.zeros(
 */
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_factor_uri, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_factor_exists = __pyx_t_12;

  /* "pygeoprocessing\routing\routing_core.pyx":1000
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] factor_block
 *     cdef int factor_exists = (factor_uri != None)
 *     if factor_exists:             # <<<<<<<<<<<<<<
 *         factor_block = numpy.zeros(
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 */
  __pyx_t_20 = (__pyx_v_factor_exists != 0);
  if (__pyx_t_20) {

    /* "pygeoprocessing\routing\routing_core.pyx":1001
 *     cdef int factor_exists = (factor_uri != None)
 *     if factor_exists:
 *         factor_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.float32)
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":1002
 *     if factor_exists:
 *         factor_block = numpy.zeros(
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *             dtype=numpy.float32)
 *         factor_ds = gdal.Open(factor_uri)
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":1001
 *     cdef int factor_exists = (factor_uri != None)
 *     if factor_exists:
 *         factor_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.float32)
 */
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pygeoprocessing\routing\routing_core.pyx":1003
 *         factor_block = numpy.zeros(
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *         factor_ds = gdal.Open(factor_uri)
 *         factor_band = factor_ds.GetRasterBand(1)
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":1001
 *     cdef int factor_exists = (factor_uri != None)
 *     if factor_exists:
 *         factor_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.float32)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_21 = ((PyArrayObject *)__pyx_t_2);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_factor_block.rcbuffer->pybuffer);
      __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_factor_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_21, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack);
      if (unlikely(__pyx_t_12 < 0)) {
        PyErr_Fetch(&__pyx_t_22, &__pyx_t_23, &__pyx_t_24);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_factor_block.rcbuffer->pybuffer, (PyObject*)__pyx_v_factor_block, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_22); Py_XDECREF(__pyx_t_23); Py_XDECREF(__pyx_t_24);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_22, __pyx_t_23, __pyx_t_24);
        }
      }
      __pyx_pybuffernd_factor_block.diminfo[0].strides = __pyx_pybuffernd_factor_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_factor_block.diminfo[0].shape = __pyx_pybuffernd_factor_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_factor_block.diminfo[1].strides = __pyx_pybuffernd_factor_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_factor_block.diminfo[1].shape = __pyx_pybuffernd_factor_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_factor_block.diminfo[2].strides = __pyx_pybuffernd_factor_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_factor_block.diminfo[2].shape = __pyx_pybuffernd_factor_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_factor_block.diminfo[3].strides = __pyx_pybuffernd_factor_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_factor_block.diminfo[3].shape = __pyx_pybuffernd_factor_block.rcbuffer->pybuffer.shape[3];
      if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_21 = 0;
    __pyx_v_factor_block = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":1004
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.float32)
 *         factor_ds = gdal.Open(factor_uri)             # <<<<<<<<<<<<<<
 *         factor_band = factor_ds.GetRasterBand(1)
 *         band_list.append(factor_band)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Open); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_factor_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_factor_uri);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_v_factor_uri);
      __Pyx_GIVEREF(__pyx_v_factor_uri);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_factor_ds = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":1005
 *             dtype=numpy.float32)
 *         factor_ds = gdal.Open(factor_uri)
 *         factor_band = factor_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *         band_list.append(factor_band)
 *         block_list.append(factor_block)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_factor_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_factor_band = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":1006
 *         factor_ds = gdal.Open(factor_uri)
 *         factor_band = factor_ds.GetRasterBand(1)
 *         band_list.append(factor_band)             # <<<<<<<<<<<<<<
 *         block_list.append(factor_block)
 *         update_list.append(False)
 */
    __pyx_t_25 = __Pyx_PyList_Append(__pyx_v_band_list, __pyx_v_factor_band); if (unlikely(__pyx_t_25 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pygeoprocessing\routing\routing_core.pyx":1007
 *         factor_band = factor_ds.GetRasterBand(1)
 *         band_list.append(factor_band)
 *         block_list.append(factor_block)             # <<<<<<<<<<<<<<
 *         update_list.append(False)
 * 
 */
    __pyx_t_25 = __Pyx_PyList_Append(__pyx_v_block_list, ((PyObject *)__pyx_v_factor_block)); if (unlikely(__pyx_t_25 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pygeoprocessing\routing\routing_core.pyx":1008
 *         band_list.append(factor_band)
 *         block_list.append(factor_block)
 *         update_list.append(False)             # <<<<<<<<<<<<<<
 * 
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = (
 */
    __pyx_t_25 = __Pyx_PyList_Append(__pyx_v_update_list, Py_False); if (unlikely(__pyx_t_25 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "pygeoprocessing\routing\routing_core.pyx":1011
 * 
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = (
 *         numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte))             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_6 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_byte); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_26 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer, (PyObject*)__pyx_t_26, &__Pyx_TypeInfo_nn_npy_byte, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_cache_dirty = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_cache_dirty.diminfo[0].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cache_dirty.diminfo[0].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cache_dirty.diminfo[1].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cache_dirty.diminfo[1].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_26 = 0;
  __pyx_v_cache_dirty = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1014
 * 
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,             # <<<<<<<<<<<<<<
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n_rows); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);

  /* "pygeoprocessing\routing\routing_core.pyx":1015
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)             # <<<<<<<<<<<<<<
 * 
 *     #center point of global index
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "pygeoprocessing\routing\routing_core.pyx":1013
 *         numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte))
 * 
 *     cdef BlockCache block_cache = BlockCache(             # <<<<<<<<<<<<<<
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 */
  __pyx_t_27 = PyTuple_New(10); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_27, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_27, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_27, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_27, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_27, 5, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_band_list);
  PyTuple_SET_ITEM(__pyx_t_27, 6, __pyx_v_band_list);
  __Pyx_GIVEREF(__pyx_v_band_list);
  __Pyx_INCREF(__pyx_v_block_list);
  PyTuple_SET_ITEM(__pyx_t_27, 7, __pyx_v_block_list);
  __Pyx_GIVEREF(__pyx_v_block_list);
  __Pyx_INCREF(__pyx_v_update_list);
  PyTuple_SET_ITEM(__pyx_t_27, 8, __pyx_v_update_list);
  __Pyx_GIVEREF(__pyx_v_update_list);
  __Pyx_INCREF(((PyObject *)__pyx_v_cache_dirty));
  PyTuple_SET_ITEM(__pyx_t_27, 9, ((PyObject *)__pyx_v_cache_dirty));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cache_dirty));
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache)), __pyx_t_27, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_v_block_cache = ((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1035
 *     #build up the stream pixel indexes as starting seed points for the search
 *     cdef time_t last_time, current_time
 *     time(&last_time)             # <<<<<<<<<<<<<<
 *     for global_block_row in xrange(n_global_block_rows):
 *         time(&current_time)
 */
  time((&__pyx_v_last_time));

  /* "pygeoprocessing\routing\routing_core.pyx":1036
 *     cdef time_t last_time, current_time
 *     time(&last_time)
 *     for global_block_row in xrange(n_global_block_rows):             # <<<<<<<<<<<<<<
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 */
  __pyx_t_12 = __pyx_v_n_global_block_rows;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_global_block_row = __pyx_t_13;

    /* "pygeoprocessing\routing\routing_core.pyx":1037
 *     time(&last_time)
 *     for global_block_row in xrange(n_global_block_rows):
 *         time(&current_time)             # <<<<<<<<<<<<<<
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(
 */
    time((&__pyx_v_current_time));

    /* "pygeoprocessing\routing\routing_core.pyx":1038
 *     for global_block_row in xrange(n_global_block_rows):
 *         time(&current_time)
 *         if current_time - last_time > 5.0:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 "find_sinks %.1f%% complete",
 */
    __pyx_t_20 = (((__pyx_v_current_time - __pyx_v_last_time) > 5.0) != 0);
    if (__pyx_t_20) {

      /* "pygeoprocessing\routing\routing_core.pyx":1039
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 "find_sinks %.1f%% complete",
 *                 (global_block_row + 1.0) / n_global_block_rows * 100)
 */
      __pyx_t_27 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_27);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_27, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":1041
 *             LOGGER.info(
 *                 "find_sinks %.1f%% complete",
 *                 (global_block_row + 1.0) / n_global_block_rows * 100)             # <<<<<<<<<<<<<<
 *             last_time = current_time
 *         for global_block_col in xrange(n_global_block_cols):
 */
      __pyx_t_27 = PyFloat_FromDouble((((__pyx_v_global_block_row + 1.0) / __pyx_v_n_global_block_rows) * 100.0)); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_27);
      __pyx_t_2 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      __pyx_t_1 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_2) {
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_find_sinks_1f_complete);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_7, __pyx_kp_s_find_sinks_1f_complete);
      __Pyx_GIVEREF(__pyx_kp_s_find_sinks_1f_complete);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_7, __pyx_t_27);
      __Pyx_GIVEREF(__pyx_t_27);
      __pyx_t_27 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":1042
 *                 "find_sinks %.1f%% complete",
 *                 (global_block_row + 1.0) / n_global_block_rows * 100)
 *             last_time = current_time             # <<<<<<<<<<<<<<
 *         for global_block_col in xrange(n_global_block_cols):
 *             for global_row in xrange(
 */
      __pyx_v_last_time = __pyx_v_current_time;
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "pygeoprocessing\routing\routing_core.pyx":1043
 *                 (global_block_row + 1.0) / n_global_block_rows * 100)
 *             last_time = current_time
 *         for global_block_col in xrange(n_global_block_cols):             # <<<<<<<<<<<<<<
 *             for global_row in xrange(
 *                     global_block_row*block_row_size,
 */
    __pyx_t_28 = __pyx_v_n_global_block_cols;
    for (__pyx_t_29 = 0; __pyx_t_29 < __pyx_t_28; __pyx_t_29+=1) {
      __pyx_v_global_block_col = __pyx_t_29;

      /* "pygeoprocessing\routing\routing_core.pyx":1046
 *             for global_row in xrange(
 *                     global_block_row*block_row_size,
 *                     min((global_block_row+1)*block_row_size, n_rows)):             # <<<<<<<<<<<<<<
 *                 for global_col in xrange(
 *                         global_block_col*block_col_size,
 */
      __pyx_t_30 = __pyx_v_n_rows;
      __pyx_t_31 = ((__pyx_v_global_block_row + 1) * __pyx_v_block_row_size);
      if (((__pyx_t_30 < __pyx_t_31) != 0)) {
        __pyx_t_32 = __pyx_t_30;
      } else {
        __pyx_t_32 = __pyx_t_31;
      }
      __pyx_t_31 = __pyx_t_32;

      /* "pygeoprocessing\routing\routing_core.pyx":1045
 *         for global_block_col in xrange(n_global_block_cols):
 *             for global_row in xrange(
 *                     global_block_row*block_row_size,             # <<<<<<<<<<<<<<
 *                     min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(
 */
      for (__pyx_t_30 = (__pyx_v_global_block_row * __pyx_v_block_row_size); __pyx_t_30 < __pyx_t_31; __pyx_t_30+=1) {
        __pyx_v_global_row = __pyx_t_30;

        /* "pygeoprocessing\routing\routing_core.pyx":1049
 *                 for global_col in xrange(
 *                         global_block_col*block_col_size,
 *                         min((global_block_col+1)*block_col_size, n_cols)):             # <<<<<<<<<<<<<<
 *                     block_cache.update_cache(
 *                         global_row, global_col, &row_index, &col_index,
 */
        __pyx_t_33 = __pyx_v_n_cols;
        __pyx_t_32 = ((__pyx_v_global_block_col + 1) * __pyx_v_block_col_size);
        if (((__pyx_t_33 < __pyx_t_32) != 0)) {
          __pyx_t_34 = __pyx_t_33;
        } else {
          __pyx_t_34 = __pyx_t_32;
        }
        __pyx_t_32 = __pyx_t_34;

        /* "pygeoprocessing\routing\routing_core.pyx":1048
 *                     min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(
 *                         global_block_col*block_col_size,             # <<<<<<<<<<<<<<
 *                         min((global_block_col+1)*block_col_size, n_cols)):
 *                     block_cache.update_cache(
 */
        for (__pyx_t_33 = (__pyx_v_global_block_col * __pyx_v_block_col_size); __pyx_t_33 < __pyx_t_32; __pyx_t_33+=1) {
          __pyx_v_global_col = __pyx_t_33;

          /* "pygeoprocessing\routing\routing_core.pyx":1050
 *                         global_block_col*block_col_size,
 *                         min((global_block_col+1)*block_col_size, n_cols)):
 *                     block_cache.update_cache(             # <<<<<<<<<<<<<<
 *                         global_row, global_col, &row_index, &col_index,
 *                         &row_block_offset, &col_block_offset)
 */
          ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_global_row, __pyx_v_global_col, (&__pyx_v_row_index), (&__pyx_v_col_index), (&__pyx_v_row_block_offset), (&__pyx_v_col_block_offset));

          /* "pygeoprocessing\routing\routing_core.pyx":1053
 *                         global_row, global_col, &row_index, &col_index,
 *                         &row_block_offset, &col_block_offset)
 *                     if stream_block[             # <<<<<<<<<<<<<<
 *                             row_index, col_index, row_block_offset,
 *                             col_block_offset] == 1:
 */
          __pyx_t_35 = __pyx_v_row_index;
          __pyx_t_36 = __pyx_v_col_index;
          __pyx_t_37 = __pyx_v_row_block_offset;
          __pyx_t_38 = __pyx_v_col_block_offset;

          /* "pygeoprocessing\routing\routing_core.pyx":1055
 *                     if stream_block[
 *                             row_index, col_index, row_block_offset,
 *                             col_block_offset] == 1:             # <<<<<<<<<<<<<<
 *                         flat_index = global_row * n_cols + global_col
 *                         visit_stack.push_front(global_row * n_cols + global_col)
 */
          __pyx_t_20 = (((*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.buf, __pyx_t_35, __pyx_pybuffernd_stream_block.diminfo[0].strides, __pyx_t_36, __pyx_pybuffernd_stream_block.diminfo[1].strides, __pyx_t_37, __pyx_pybuffernd_stream_block.diminfo[2].strides, __pyx_t_38, __pyx_pybuffernd_stream_block.diminfo[3].strides)) == 1.0) != 0);
          if (__pyx_t_20) {

            /* "pygeoprocessing\routing\routing_core.pyx":1056
 *                             row_index, col_index, row_block_offset,
 *                             col_block_offset] == 1:
 *                         flat_index = global_row * n_cols + global_col             # <<<<<<<<<<<<<<
 *                         visit_stack.push_front(global_row * n_cols + global_col)
 *                         cells_in_queue.insert(flat_index)
 */
            __pyx_v_flat_index = ((__pyx_v_global_row * __pyx_v_n_cols) + __pyx_v_global_col);

            /* "pygeoprocessing\routing\routing_core.pyx":1057
 *                             col_block_offset] == 1:
 *                         flat_index = global_row * n_cols + global_col
 *                         visit_stack.push_front(global_row * n_cols + global_col)             # <<<<<<<<<<<<<<
 *                         cells_in_queue.insert(flat_index)
 * 
 */
            __pyx_v_visit_stack.push_front(((__pyx_v_global_row * __pyx_v_n_cols) + __pyx_v_global_col));

            /* "pygeoprocessing\routing\routing_core.pyx":1058
 *                         flat_index = global_row * n_cols + global_col
 *                         visit_stack.push_front(global_row * n_cols + global_col)
 *                         cells_in_queue.insert(flat_index)             # <<<<<<<<<<<<<<
 * 
 *                         distance_block[row_index, col_index,
 */
            try {
              __pyx_v_cells_in_queue.insert(__pyx_v_flat_index);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }

            /* "pygeoprocessing\routing\routing_core.pyx":1061
 * 
 *                         distance_block[row_index, col_index,
 *                             row_block_offset, col_block_offset] = 0             # <<<<<<<<<<<<<<
 *                         processed_cell_block[row_index, col_index,
 *                             row_block_offset, col_block_offset] = 1
 */
            __pyx_t_39 = __pyx_v_row_index;
            __pyx_t_40 = __pyx_v_col_index;
            __pyx_t_41 = __pyx_v_row_block_offset;
            __pyx_t_42 = __pyx_v_col_block_offset;
            *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_distance_block.rcbuffer->pybuffer.buf, __pyx_t_39, __pyx_pybuffernd_distance_block.diminfo[0].strides, __pyx_t_40, __pyx_pybuffernd_distance_block.diminfo[1].strides, __pyx_t_41, __pyx_pybuffernd_distance_block.diminfo[2].strides, __pyx_t_42, __pyx_pybuffernd_distance_block.diminfo[3].strides) = 0.0;

            /* "pygeoprocessing\routing\routing_core.pyx":1063
 *                             row_block_offset, col_block_offset] = 0
 *                         processed_cell_block[row_index, col_index,
 *                             row_block_offset, col_block_offset] = 1             # <<<<<<<<<<<<<<
 *                         cache_dirty[row_index, col_index] = 1
 * 
 */
            __pyx_t_43 = __pyx_v_row_index;
            __pyx_t_44 = __pyx_v_col_index;
            __pyx_t_45 = __pyx_v_row_block_offset;
            __pyx_t_46 = __pyx_v_col_block_offset;
            *__Pyx_BufPtrStrided4d(npy_int8 *, __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.buf, __pyx_t_43, __pyx_pybuffernd_processed_cell_block.diminfo[0].strides, __pyx_t_44, __pyx_pybuffernd_processed_cell_block.diminfo[1].strides, __pyx_t_45, __pyx_pybuffernd_processed_cell_block.diminfo[2].strides, __pyx_t_46, __pyx_pybuffernd_processed_cell_block.diminfo[3].strides) = 1;

            /* "pygeoprocessing\routing\routing_core.pyx":1064
 *                         processed_cell_block[row_index, col_index,
 *                             row_block_offset, col_block_offset] = 1
 *                         cache_dirty[row_index, col_index] = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef int neighbor_outflow_direction, neighbor_index, outflow_direction
 */
            __pyx_t_47 = __pyx_v_row_index;
            __pyx_t_48 = __pyx_v_col_index;
            *__Pyx_BufPtrStrided2d(npy_byte *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_47, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_48, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;
            goto __pyx_L17;
          }
          __pyx_L17:;
        }
      }
    }
  }

  /* "pygeoprocessing\routing\routing_core.pyx":1074
 *     cdef float downstream_distance
 *     cdef float current_stream
 *     cdef int pushed_current = False             # <<<<<<<<<<<<<<
 * 
 *     while visit_stack.size() > 0:
 */
  __pyx_v_pushed_current = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1076
 *     cdef int pushed_current = False
 * 
 *     while visit_stack.size() > 0:             # <<<<<<<<<<<<<<
 *         flat_index = visit_stack.front()
 *         visit_stack.pop_front()
 */
  while (1) {
    __pyx_t_20 = ((__pyx_v_visit_stack.size() > 0) != 0);
    if (!__pyx_t_20) break;

    /* "pygeoprocessing\routing\routing_core.pyx":1077
 * 
 *     while visit_stack.size() > 0:
 *         flat_index = visit_stack.front()             # <<<<<<<<<<<<<<
 *         visit_stack.pop_front()
 *         cells_in_queue.erase(flat_index)
 */
    __pyx_v_flat_index = __pyx_v_visit_stack.front();

    /* "pygeoprocessing\routing\routing_core.pyx":1078
 *     while visit_stack.size() > 0:
 *         flat_index = visit_stack.front()
 *         visit_stack.pop_front()             # <<<<<<<<<<<<<<
 *         cells_in_queue.erase(flat_index)
 *         global_row = flat_index / n_cols
 */
    __pyx_v_visit_stack.pop_front();

    /* "pygeoprocessing\routing\routing_core.pyx":1079
 *         flat_index = visit_stack.front()
 *         visit_stack.pop_front()
 *         cells_in_queue.erase(flat_index)             # <<<<<<<<<<<<<<
 *         global_row = flat_index / n_cols
 *         global_col = flat_index % n_cols
 */
    __pyx_v_cells_in_queue.erase(__pyx_v_flat_index);

    /* "pygeoprocessing\routing\routing_core.pyx":1080
 *         visit_stack.pop_front()
 *         cells_in_queue.erase(flat_index)
 *         global_row = flat_index / n_cols             # <<<<<<<<<<<<<<
 *         global_col = flat_index % n_cols
 * 
 */
    __pyx_v_global_row = (__pyx_v_flat_index / __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":1081
 *         cells_in_queue.erase(flat_index)
 *         global_row = flat_index / n_cols
 *         global_col = flat_index % n_cols             # <<<<<<<<<<<<<<
 * 
 *         block_cache.update_cache(
 */
    __pyx_v_global_col = (__pyx_v_flat_index % __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":1083
 *         global_col = flat_index % n_cols
 * 
 *         block_cache.update_cache(             # <<<<<<<<<<<<<<
 *             global_row, global_col, &row_index, &col_index,
 *             &row_block_offset, &col_block_offset)
 */
    ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_global_row, __pyx_v_global_col, (&__pyx_v_row_index), (&__pyx_v_col_index), (&__pyx_v_row_block_offset), (&__pyx_v_col_block_offset));

    /* "pygeoprocessing\routing\routing_core.pyx":1087
 *             &row_block_offset, &col_block_offset)
 * 
 *         update_downstream = False             # <<<<<<<<<<<<<<
 *         current_distance = 0.0
 * 
 */
    __pyx_v_update_downstream = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":1088
 * 
 *         update_downstream = False
 *         current_distance = 0.0             # <<<<<<<<<<<<<<
 * 
 *         time(&current_time)
 */
    __pyx_v_current_distance = 0.0;

    /* "pygeoprocessing\routing\routing_core.pyx":1090
 *         current_distance = 0.0
 * 
 *         time(&current_time)             # <<<<<<<<<<<<<<
 *         if current_time - last_time > 5.0:
 *             last_time = current_time
 */
    time((&__pyx_v_current_time));

    /* "pygeoprocessing\routing\routing_core.pyx":1091
 * 
 *         time(&current_time)
 *         if current_time - last_time > 5.0:             # <<<<<<<<<<<<<<
 *             last_time = current_time
 *             LOGGER.info(
 */
    __pyx_t_20 = (((__pyx_v_current_time - __pyx_v_last_time) > 5.0) != 0);
    if (__pyx_t_20) {

      /* "pygeoprocessing\routing\routing_core.pyx":1092
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 *             last_time = current_time             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 'visit_stack on stream distance size: %d ', visit_stack.size())
 */
      __pyx_v_last_time = __pyx_v_current_time;

      /* "pygeoprocessing\routing\routing_core.pyx":1093
 *         if current_time - last_time > 5.0:
 *             last_time = current_time
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 'visit_stack on stream distance size: %d ', visit_stack.size())
 * 
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1093; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1093; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":1094
 *             last_time = current_time
 *             LOGGER.info(
 *                 'visit_stack on stream distance size: %d ', visit_stack.size())             # <<<<<<<<<<<<<<
 * 
 *         current_stream = stream_block[
 */
      __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_v_visit_stack.size()); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_27 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_27 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_27)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_27);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_7 = 1;
        }
      }
      __pyx_t_2 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1093; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_27) {
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_27); __Pyx_GIVEREF(__pyx_t_27); __pyx_t_27 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_visit_stack_on_stream_distance_s);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_7, __pyx_kp_s_visit_stack_on_stream_distance_s);
      __Pyx_GIVEREF(__pyx_kp_s_visit_stack_on_stream_distance_s);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_7, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1093; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L20;
    }
    __pyx_L20:;

    /* "pygeoprocessing\routing\routing_core.pyx":1096
 *                 'visit_stack on stream distance size: %d ', visit_stack.size())
 * 
 *         current_stream = stream_block[             # <<<<<<<<<<<<<<
 *             row_index, col_index, row_block_offset, col_block_offset]
 *         outflow_direction = outflow_direction_block[
 */
    __pyx_t_12 = __pyx_v_row_index;
    __pyx_t_13 = __pyx_v_col_index;
    __pyx_t_28 = __pyx_v_row_block_offset;
    __pyx_t_29 = __pyx_v_col_block_offset;
    __pyx_v_current_stream = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_stream_block.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_stream_block.diminfo[1].strides, __pyx_t_28, __pyx_pybuffernd_stream_block.diminfo[2].strides, __pyx_t_29, __pyx_pybuffernd_stream_block.diminfo[3].strides));

    /* "pygeoprocessing\routing\routing_core.pyx":1098
 *         current_stream = stream_block[
 *             row_index, col_index, row_block_offset, col_block_offset]
 *         outflow_direction = outflow_direction_block[             # <<<<<<<<<<<<<<
 *             row_index, col_index, row_block_offset,
 *             col_block_offset]
 */
    __pyx_t_30 = __pyx_v_row_index;
    __pyx_t_33 = __pyx_v_col_index;
    __pyx_t_49 = __pyx_v_row_block_offset;
    __pyx_t_50 = __pyx_v_col_block_offset;
    __pyx_v_outflow_direction = (*__Pyx_BufPtrStrided4d(npy_int8 *, __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.buf, __pyx_t_30, __pyx_pybuffernd_outflow_direction_block.diminfo[0].strides, __pyx_t_33, __pyx_pybuffernd_outflow_direction_block.diminfo[1].strides, __pyx_t_49, __pyx_pybuffernd_outflow_direction_block.diminfo[2].strides, __pyx_t_50, __pyx_pybuffernd_outflow_direction_block.diminfo[3].strides));

    /* "pygeoprocessing\routing\routing_core.pyx":1101
 *             row_index, col_index, row_block_offset,
 *             col_block_offset]
 *         if current_stream == 1:             # <<<<<<<<<<<<<<
 *             distance_block[row_index, col_index,
 *                 row_block_offset, col_block_offset] = 0
 */
    __pyx_t_20 = ((__pyx_v_current_stream == 1.0) != 0);
    if (__pyx_t_20) {

      /* "pygeoprocessing\routing\routing_core.pyx":1103
 *         if current_stream == 1:
 *             distance_block[row_index, col_index,
 *                 row_block_offset, col_block_offset] = 0             # <<<<<<<<<<<<<<
 *             processed_cell_block[row_index, col_index,
 *                 row_block_offset, col_block_offset] = 1
 */
      __pyx_t_51 = __pyx_v_row_index;
      __pyx_t_52 = __pyx_v_col_index;
      __pyx_t_53 = __pyx_v_row_block_offset;
      __pyx_t_54 = __pyx_v_col_block_offset;
      *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_distance_block.rcbuffer->pybuffer.buf, __pyx_t_51, __pyx_pybuffernd_distance_block.diminfo[0].strides, __pyx_t_52, __pyx_pybuffernd_distance_block.diminfo[1].strides, __pyx_t_53, __pyx_pybuffernd_distance_block.diminfo[2].strides, __pyx_t_54, __pyx_pybuffernd_distance_block.diminfo[3].strides) = 0.0;

      /* "pygeoprocessing\routing\routing_core.pyx":1105
 *                 row_block_offset, col_block_offset] = 0
 *             processed_cell_block[row_index, col_index,
 *                 row_block_offset, col_block_offset] = 1             # <<<<<<<<<<<<<<
 *             cache_dirty[row_index, col_index] = 1
 *         elif outflow_direction == outflow_direction_nodata:
 */
      __pyx_t_55 = __pyx_v_row_index;
      __pyx_t_56 = __pyx_v_col_index;
      __pyx_t_57 = __pyx_v_row_block_offset;
      __pyx_t_58 = __pyx_v_col_block_offset;
      *__Pyx_BufPtrStrided4d(npy_int8 *, __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.buf, __pyx_t_55, __pyx_pybuffernd_processed_cell_block.diminfo[0].strides, __pyx_t_56, __pyx_pybuffernd_processed_cell_block.diminfo[1].strides, __pyx_t_57, __pyx_pybuffernd_processed_cell_block.diminfo[2].strides, __pyx_t_58, __pyx_pybuffernd_processed_cell_block.diminfo[3].strides) = 1;

      /* "pygeoprocessing\routing\routing_core.pyx":1106
 *             processed_cell_block[row_index, col_index,
 *                 row_block_offset, col_block_offset] = 1
 *             cache_dirty[row_index, col_index] = 1             # <<<<<<<<<<<<<<
 *         elif outflow_direction == outflow_direction_nodata:
 *             current_distance = INF
 */
      __pyx_t_59 = __pyx_v_row_index;
      __pyx_t_60 = __pyx_v_col_index;
      *__Pyx_BufPtrStrided2d(npy_byte *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_59, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_60, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;
      goto __pyx_L21;
    }

    /* "pygeoprocessing\routing\routing_core.pyx":1107
 *                 row_block_offset, col_block_offset] = 1
 *             cache_dirty[row_index, col_index] = 1
 *         elif outflow_direction == outflow_direction_nodata:             # <<<<<<<<<<<<<<
 *             current_distance = INF
 *         elif processed_cell_block[row_index, col_index, row_block_offset,
 */
    __pyx_t_20 = ((__pyx_v_outflow_direction == __pyx_v_outflow_direction_nodata) != 0);
    if (__pyx_t_20) {

      /* "pygeoprocessing\routing\routing_core.pyx":1108
 *             cache_dirty[row_index, col_index] = 1
 *         elif outflow_direction == outflow_direction_nodata:
 *             current_distance = INF             # <<<<<<<<<<<<<<
 *         elif processed_cell_block[row_index, col_index, row_block_offset,
 *                 col_block_offset] == 0:
 */
      __pyx_v_current_distance = __pyx_v_INF;
      goto __pyx_L21;
    }

    /* "pygeoprocessing\routing\routing_core.pyx":1109
 *         elif outflow_direction == outflow_direction_nodata:
 *             current_distance = INF
 *         elif processed_cell_block[row_index, col_index, row_block_offset,             # <<<<<<<<<<<<<<
 *                 col_block_offset] == 0:
 *             #add downstream distance to current distance
 */
    __pyx_t_61 = __pyx_v_row_index;
    __pyx_t_62 = __pyx_v_col_index;
    __pyx_t_63 = __pyx_v_row_block_offset;
    __pyx_t_64 = __pyx_v_col_block_offset;

    /* "pygeoprocessing\routing\routing_core.pyx":1110
 *             current_distance = INF
 *         elif processed_cell_block[row_index, col_index, row_block_offset,
 *                 col_block_offset] == 0:             # <<<<<<<<<<<<<<
 *             #add downstream distance to current distance
 * 
 */
    __pyx_t_20 = (((*__Pyx_BufPtrStrided4d(npy_int8 *, __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.buf, __pyx_t_61, __pyx_pybuffernd_processed_cell_block.diminfo[0].strides, __pyx_t_62, __pyx_pybuffernd_processed_cell_block.diminfo[1].strides, __pyx_t_63, __pyx_pybuffernd_processed_cell_block.diminfo[2].strides, __pyx_t_64, __pyx_pybuffernd_processed_cell_block.diminfo[3].strides)) == 0) != 0);
    if (__pyx_t_20) {

      /* "pygeoprocessing\routing\routing_core.pyx":1113
 *             #add downstream distance to current distance
 * 
 *             outflow_weight = outflow_weights_block[             # <<<<<<<<<<<<<<
 *                 row_index, col_index, row_block_offset,
 *                 col_block_offset]
 */
      __pyx_t_65 = __pyx_v_row_index;
      __pyx_t_66 = __pyx_v_col_index;
      __pyx_t_67 = __pyx_v_row_block_offset;
      __pyx_t_68 = __pyx_v_col_block_offset;
      __pyx_v_outflow_weight = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.buf, __pyx_t_65, __pyx_pybuffernd_outflow_weights_block.diminfo[0].strides, __pyx_t_66, __pyx_pybuffernd_outflow_weights_block.diminfo[1].strides, __pyx_t_67, __pyx_pybuffernd_outflow_weights_block.diminfo[2].strides, __pyx_t_68, __pyx_pybuffernd_outflow_weights_block.diminfo[3].strides));

      /* "pygeoprocessing\routing\routing_core.pyx":1117
 *                 col_block_offset]
 * 
 *             if factor_exists:             # <<<<<<<<<<<<<<
 *                 factor = factor_block[
 *                     row_index, col_index, row_block_offset, col_block_offset]
 */
      __pyx_t_20 = (__pyx_v_factor_exists != 0);
      if (__pyx_t_20) {

        /* "pygeoprocessing\routing\routing_core.pyx":1118
 * 
 *             if factor_exists:
 *                 factor = factor_block[             # <<<<<<<<<<<<<<
 *                     row_index, col_index, row_block_offset, col_block_offset]
 *             else:
 */
        __pyx_t_69 = __pyx_v_row_index;
        __pyx_t_70 = __pyx_v_col_index;
        __pyx_t_71 = __pyx_v_row_block_offset;
        __pyx_t_72 = __pyx_v_col_block_offset;
        __pyx_v_factor = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_factor_block.rcbuffer->pybuffer.buf, __pyx_t_69, __pyx_pybuffernd_factor_block.diminfo[0].strides, __pyx_t_70, __pyx_pybuffernd_factor_block.diminfo[1].strides, __pyx_t_71, __pyx_pybuffernd_factor_block.diminfo[2].strides, __pyx_t_72, __pyx_pybuffernd_factor_block.diminfo[3].strides));
        goto __pyx_L22;
      }
      /*else*/ {

        /* "pygeoprocessing\routing\routing_core.pyx":1121
 *                     row_index, col_index, row_block_offset, col_block_offset]
 *             else:
 *                 factor = 1.0             # <<<<<<<<<<<<<<
 * 
 *             for neighbor_index in xrange(2):
 */
        __pyx_v_factor = 1.0;
      }
      __pyx_L22:;

      /* "pygeoprocessing\routing\routing_core.pyx":1123
 *                 factor = 1.0
 * 
 *             for neighbor_index in xrange(2):             # <<<<<<<<<<<<<<
 *                 #check if downstream neighbors are calcualted
 *                 if neighbor_index == 1:
 */
      for (__pyx_t_73 = 0; __pyx_t_73 < 2; __pyx_t_73+=1) {
        __pyx_v_neighbor_index = __pyx_t_73;

        /* "pygeoprocessing\routing\routing_core.pyx":1125
 *             for neighbor_index in xrange(2):
 *                 #check if downstream neighbors are calcualted
 *                 if neighbor_index == 1:             # <<<<<<<<<<<<<<
 *                     outflow_direction = (outflow_direction + 1) % 8
 *                     outflow_weight = (1.0 - outflow_weight)
 */
        __pyx_t_20 = ((__pyx_v_neighbor_index == 1) != 0);
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1126
 *                 #check if downstream neighbors are calcualted
 *                 if neighbor_index == 1:
 *                     outflow_direction = (outflow_direction + 1) % 8             # <<<<<<<<<<<<<<
 *                     outflow_weight = (1.0 - outflow_weight)
 * 
 */
          __pyx_v_outflow_direction = ((__pyx_v_outflow_direction + 1) % 8);

          /* "pygeoprocessing\routing\routing_core.pyx":1127
 *                 if neighbor_index == 1:
 *                     outflow_direction = (outflow_direction + 1) % 8
 *                     outflow_weight = (1.0 - outflow_weight)             # <<<<<<<<<<<<<<
 * 
 *                 if outflow_weight <= 0.0:
 */
          __pyx_v_outflow_weight = (1.0 - __pyx_v_outflow_weight);
          goto __pyx_L25;
        }
        __pyx_L25:;

        /* "pygeoprocessing\routing\routing_core.pyx":1129
 *                     outflow_weight = (1.0 - outflow_weight)
 * 
 *                 if outflow_weight <= 0.0:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_20 = ((__pyx_v_outflow_weight <= 0.0) != 0);
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1130
 * 
 *                 if outflow_weight <= 0.0:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 neighbor_row = global_row + row_offsets[outflow_direction]
 */
          goto __pyx_L23_continue;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1132
 *                     continue
 * 
 *                 neighbor_row = global_row + row_offsets[outflow_direction]             # <<<<<<<<<<<<<<
 *                 neighbor_col = global_col + col_offsets[outflow_direction]
 *                 if (neighbor_row < 0 or neighbor_row >= n_rows or
 */
        __pyx_v_neighbor_row = (__pyx_v_global_row + (__pyx_v_row_offsets[__pyx_v_outflow_direction]));

        /* "pygeoprocessing\routing\routing_core.pyx":1133
 * 
 *                 neighbor_row = global_row + row_offsets[outflow_direction]
 *                 neighbor_col = global_col + col_offsets[outflow_direction]             # <<<<<<<<<<<<<<
 *                 if (neighbor_row < 0 or neighbor_row >= n_rows or
 *                         neighbor_col < 0 or neighbor_col >= n_cols):
 */
        __pyx_v_neighbor_col = (__pyx_v_global_col + (__pyx_v_col_offsets[__pyx_v_outflow_direction]));

        /* "pygeoprocessing\routing\routing_core.pyx":1134
 *                 neighbor_row = global_row + row_offsets[outflow_direction]
 *                 neighbor_col = global_col + col_offsets[outflow_direction]
 *                 if (neighbor_row < 0 or neighbor_row >= n_rows or             # <<<<<<<<<<<<<<
 *                         neighbor_col < 0 or neighbor_col >= n_cols):
 *                     #out of bounds
 */
        __pyx_t_74 = ((__pyx_v_neighbor_row < 0) != 0);
        if (!__pyx_t_74) {
        } else {
          __pyx_t_20 = __pyx_t_74;
          goto __pyx_L28_bool_binop_done;
        }
        __pyx_t_74 = ((__pyx_v_neighbor_row >= __pyx_v_n_rows) != 0);
        if (!__pyx_t_74) {
        } else {
          __pyx_t_20 = __pyx_t_74;
          goto __pyx_L28_bool_binop_done;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1135
 *                 neighbor_col = global_col + col_offsets[outflow_direction]
 *                 if (neighbor_row < 0 or neighbor_row >= n_rows or
 *                         neighbor_col < 0 or neighbor_col >= n_cols):             # <<<<<<<<<<<<<<
 *                     #out of bounds
 *                     continue
 */
        __pyx_t_74 = ((__pyx_v_neighbor_col < 0) != 0);
        if (!__pyx_t_74) {
        } else {
          __pyx_t_20 = __pyx_t_74;
          goto __pyx_L28_bool_binop_done;
        }
        __pyx_t_74 = ((__pyx_v_neighbor_col >= __pyx_v_n_cols) != 0);
        __pyx_t_20 = __pyx_t_74;
        __pyx_L28_bool_binop_done:;
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1137
 *                         neighbor_col < 0 or neighbor_col >= n_cols):
 *                     #out of bounds
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 block_cache.update_cache(
 */
          goto __pyx_L23_continue;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1139
 *                     continue
 * 
 *                 block_cache.update_cache(             # <<<<<<<<<<<<<<
 *                     neighbor_row, neighbor_col, &neighbor_row_index,
 *                     &neighbor_col_index, &neighbor_row_block_offset,
 */
        ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_neighbor_row, __pyx_v_neighbor_col, (&__pyx_v_neighbor_row_index), (&__pyx_v_neighbor_col_index), (&__pyx_v_neighbor_row_block_offset), (&__pyx_v_neighbor_col_block_offset));

        /* "pygeoprocessing\routing\routing_core.pyx":1144
 *                     &neighbor_col_block_offset)
 * 
 *                 if stream_block[neighbor_row_index,             # <<<<<<<<<<<<<<
 *                         neighbor_col_index, neighbor_row_block_offset,
 *                         neighbor_col_block_offset] == stream_nodata:
 */
        __pyx_t_75 = __pyx_v_neighbor_row_index;
        __pyx_t_76 = __pyx_v_neighbor_col_index;
        __pyx_t_77 = __pyx_v_neighbor_row_block_offset;
        __pyx_t_78 = __pyx_v_neighbor_col_block_offset;

        /* "pygeoprocessing\routing\routing_core.pyx":1146
 *                 if stream_block[neighbor_row_index,
 *                         neighbor_col_index, neighbor_row_block_offset,
 *                         neighbor_col_block_offset] == stream_nodata:             # <<<<<<<<<<<<<<
 *                     #out of the valid raster entirely
 *                     continue
 */
        __pyx_t_20 = (((*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.buf, __pyx_t_75, __pyx_pybuffernd_stream_block.diminfo[0].strides, __pyx_t_76, __pyx_pybuffernd_stream_block.diminfo[1].strides, __pyx_t_77, __pyx_pybuffernd_stream_block.diminfo[2].strides, __pyx_t_78, __pyx_pybuffernd_stream_block.diminfo[3].strides)) == __pyx_v_stream_nodata) != 0);
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1148
 *                         neighbor_col_block_offset] == stream_nodata:
 *                     #out of the valid raster entirely
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 neighbor_distance = distance_block[
 */
          goto __pyx_L23_continue;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1150
 *                     continue
 * 
 *                 neighbor_distance = distance_block[             # <<<<<<<<<<<<<<
 *                     neighbor_row_index, neighbor_col_index,
 *                     neighbor_row_block_offset, neighbor_col_block_offset]
 */
        __pyx_t_79 = __pyx_v_neighbor_row_index;
        __pyx_t_80 = __pyx_v_neighbor_col_index;
        __pyx_t_81 = __pyx_v_neighbor_row_block_offset;
        __pyx_t_82 = __pyx_v_neighbor_col_block_offset;
        __pyx_v_neighbor_distance = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_distance_block.rcbuffer->pybuffer.buf, __pyx_t_79, __pyx_pybuffernd_distance_block.diminfo[0].strides, __pyx_t_80, __pyx_pybuffernd_distance_block.diminfo[1].strides, __pyx_t_81, __pyx_pybuffernd_distance_block.diminfo[2].strides, __pyx_t_82, __pyx_pybuffernd_distance_block.diminfo[3].strides));

        /* "pygeoprocessing\routing\routing_core.pyx":1154
 *                     neighbor_row_block_offset, neighbor_col_block_offset]
 * 
 *                 neighbor_outflow_direction = outflow_direction_block[             # <<<<<<<<<<<<<<
 *                     neighbor_row_index, neighbor_col_index,
 *                     neighbor_row_block_offset, neighbor_col_block_offset]
 */
        __pyx_t_83 = __pyx_v_neighbor_row_index;
        __pyx_t_84 = __pyx_v_neighbor_col_index;
        __pyx_t_85 = __pyx_v_neighbor_row_block_offset;
        __pyx_t_86 = __pyx_v_neighbor_col_block_offset;
        __pyx_v_neighbor_outflow_direction = (*__Pyx_BufPtrStrided4d(npy_int8 *, __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.buf, __pyx_t_83, __pyx_pybuffernd_outflow_direction_block.diminfo[0].strides, __pyx_t_84, __pyx_pybuffernd_outflow_direction_block.diminfo[1].strides, __pyx_t_85, __pyx_pybuffernd_outflow_direction_block.diminfo[2].strides, __pyx_t_86, __pyx_pybuffernd_outflow_direction_block.diminfo[3].strides));

        /* "pygeoprocessing\routing\routing_core.pyx":1158
 *                     neighbor_row_block_offset, neighbor_col_block_offset]
 * 
 *                 neighbor_outflow_weight = outflow_weights_block[             # <<<<<<<<<<<<<<
 *                     neighbor_row_index, neighbor_col_index,
 *                     neighbor_row_block_offset, neighbor_col_block_offset]
 */
        __pyx_t_87 = __pyx_v_neighbor_row_index;
        __pyx_t_88 = __pyx_v_neighbor_col_index;
        __pyx_t_89 = __pyx_v_neighbor_row_block_offset;
        __pyx_t_90 = __pyx_v_neighbor_col_block_offset;
        __pyx_v_neighbor_outflow_weight = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.buf, __pyx_t_87, __pyx_pybuffernd_outflow_weights_block.diminfo[0].strides, __pyx_t_88, __pyx_pybuffernd_outflow_weights_block.diminfo[1].strides, __pyx_t_89, __pyx_pybuffernd_outflow_weights_block.diminfo[2].strides, __pyx_t_90, __pyx_pybuffernd_outflow_weights_block.diminfo[3].strides));

        /* "pygeoprocessing\routing\routing_core.pyx":1162
 *                     neighbor_row_block_offset, neighbor_col_block_offset]
 * 
 *                 if processed_cell_block[neighbor_row_index, neighbor_col_index,             # <<<<<<<<<<<<<<
 *                         neighbor_row_block_offset,
 *                         neighbor_col_block_offset] == 0:
 */
        __pyx_t_91 = __pyx_v_neighbor_row_index;
        __pyx_t_92 = __pyx_v_neighbor_col_index;
        __pyx_t_93 = __pyx_v_neighbor_row_block_offset;
        __pyx_t_94 = __pyx_v_neighbor_col_block_offset;

        /* "pygeoprocessing\routing\routing_core.pyx":1164
 *                 if processed_cell_block[neighbor_row_index, neighbor_col_index,
 *                         neighbor_row_block_offset,
 *                         neighbor_col_block_offset] == 0:             # <<<<<<<<<<<<<<
 *                     neighbor_flat_index = neighbor_row * n_cols + neighbor_col
 *                     #insert into the processing queue if it's not already there
 */
        __pyx_t_20 = (((*__Pyx_BufPtrStrided4d(npy_int8 *, __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.buf, __pyx_t_91, __pyx_pybuffernd_processed_cell_block.diminfo[0].strides, __pyx_t_92, __pyx_pybuffernd_processed_cell_block.diminfo[1].strides, __pyx_t_93, __pyx_pybuffernd_processed_cell_block.diminfo[2].strides, __pyx_t_94, __pyx_pybuffernd_processed_cell_block.diminfo[3].strides)) == 0) != 0);
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1165
 *                         neighbor_row_block_offset,
 *                         neighbor_col_block_offset] == 0:
 *                     neighbor_flat_index = neighbor_row * n_cols + neighbor_col             # <<<<<<<<<<<<<<
 *                     #insert into the processing queue if it's not already there
 *                     if (cells_in_queue.find(flat_index) ==
 */
          __pyx_v_neighbor_flat_index = ((__pyx_v_neighbor_row * __pyx_v_n_cols) + __pyx_v_neighbor_col);

          /* "pygeoprocessing\routing\routing_core.pyx":1167
 *                     neighbor_flat_index = neighbor_row * n_cols + neighbor_col
 *                     #insert into the processing queue if it's not already there
 *                     if (cells_in_queue.find(flat_index) ==             # <<<<<<<<<<<<<<
 *                             cells_in_queue.end()):
 *                         visit_stack.push_back(flat_index)
 */
          __pyx_t_20 = ((__pyx_v_cells_in_queue.find(__pyx_v_flat_index) == __pyx_v_cells_in_queue.end()) != 0);
          if (__pyx_t_20) {

            /* "pygeoprocessing\routing\routing_core.pyx":1169
 *                     if (cells_in_queue.find(flat_index) ==
 *                             cells_in_queue.end()):
 *                         visit_stack.push_back(flat_index)             # <<<<<<<<<<<<<<
 *                         cells_in_queue.insert(flat_index)
 * 
 */
            __pyx_v_visit_stack.push_back(__pyx_v_flat_index);

            /* "pygeoprocessing\routing\routing_core.pyx":1170
 *                             cells_in_queue.end()):
 *                         visit_stack.push_back(flat_index)
 *                         cells_in_queue.insert(flat_index)             # <<<<<<<<<<<<<<
 * 
 *                     if (cells_in_queue.find(neighbor_flat_index) ==
 */
            try {
              __pyx_v_cells_in_queue.insert(__pyx_v_flat_index);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            goto __pyx_L34;
          }
          __pyx_L34:;

          /* "pygeoprocessing\routing\routing_core.pyx":1172
 *                         cells_in_queue.insert(flat_index)
 * 
 *                     if (cells_in_queue.find(neighbor_flat_index) ==             # <<<<<<<<<<<<<<
 *                             cells_in_queue.end()):
 *                         visit_stack.push_front(neighbor_flat_index)
 */
          __pyx_t_20 = ((__pyx_v_cells_in_queue.find(__pyx_v_neighbor_flat_index) == __pyx_v_cells_in_queue.end()) != 0);
          if (__pyx_t_20) {

            /* "pygeoprocessing\routing\routing_core.pyx":1174
 *                     if (cells_in_queue.find(neighbor_flat_index) ==
 *                             cells_in_queue.end()):
 *                         visit_stack.push_front(neighbor_flat_index)             # <<<<<<<<<<<<<<
 *                         cells_in_queue.insert(neighbor_flat_index)
 * 
 */
            __pyx_v_visit_stack.push_front(__pyx_v_neighbor_flat_index);

            /* "pygeoprocessing\routing\routing_core.pyx":1175
 *                             cells_in_queue.end()):
 *                         visit_stack.push_front(neighbor_flat_index)
 *                         cells_in_queue.insert(neighbor_flat_index)             # <<<<<<<<<<<<<<
 * 
 *                     update_downstream = True
 */
            try {
              __pyx_v_cells_in_queue.insert(__pyx_v_neighbor_flat_index);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            goto __pyx_L35;
          }
          __pyx_L35:;

          /* "pygeoprocessing\routing\routing_core.pyx":1177
 *                         cells_in_queue.insert(neighbor_flat_index)
 * 
 *                     update_downstream = True             # <<<<<<<<<<<<<<
 *                     neighbor_distance = 0.0
 * 
 */
          __pyx_v_update_downstream = 1;

          /* "pygeoprocessing\routing\routing_core.pyx":1178
 * 
 *                     update_downstream = True
 *                     neighbor_distance = 0.0             # <<<<<<<<<<<<<<
 * 
 *                 if outflow_direction % 2 == 1:
 */
          __pyx_v_neighbor_distance = 0.0;
          goto __pyx_L33;
        }
        __pyx_L33:;

        /* "pygeoprocessing\routing\routing_core.pyx":1180
 *                     neighbor_distance = 0.0
 * 
 *                 if outflow_direction % 2 == 1:             # <<<<<<<<<<<<<<
 *                     #increase distance by a square root of 2 for diagonal
 *                     step_size = cell_size * 1.41421356237
 */
        __pyx_t_20 = (((__pyx_v_outflow_direction % 2) == 1) != 0);
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1182
 *                 if outflow_direction % 2 == 1:
 *                     #increase distance by a square root of 2 for diagonal
 *                     step_size = cell_size * 1.41421356237             # <<<<<<<<<<<<<<
 *                 else:
 *                     step_size = cell_size
 */
          __pyx_v_step_size = (__pyx_v_cell_size * 1.41421356237);
          goto __pyx_L36;
        }
        /*else*/ {

          /* "pygeoprocessing\routing\routing_core.pyx":1184
 *                     step_size = cell_size * 1.41421356237
 *                 else:
 *                     step_size = cell_size             # <<<<<<<<<<<<<<
 * 
 *                 current_distance += (
 */
          __pyx_v_step_size = __pyx_v_cell_size;
        }
        __pyx_L36:;

        /* "pygeoprocessing\routing\routing_core.pyx":1186
 *                     step_size = cell_size
 * 
 *                 current_distance += (             # <<<<<<<<<<<<<<
 *                     neighbor_distance + step_size * factor) * outflow_weight
 * 
 */
        __pyx_v_current_distance = (__pyx_v_current_distance + ((__pyx_v_neighbor_distance + (__pyx_v_step_size * __pyx_v_factor)) * __pyx_v_outflow_weight));
        __pyx_L23_continue:;
      }
      goto __pyx_L21;
    }
    __pyx_L21:;

    /* "pygeoprocessing\routing\routing_core.pyx":1189
 *                     neighbor_distance + step_size * factor) * outflow_weight
 * 
 *         if not update_downstream:             # <<<<<<<<<<<<<<
 *             #mark flat_index as processed
 *             block_cache.update_cache(
 */
    __pyx_t_20 = ((!(__pyx_v_update_downstream != 0)) != 0);
    if (__pyx_t_20) {

      /* "pygeoprocessing\routing\routing_core.pyx":1191
 *         if not update_downstream:
 *             #mark flat_index as processed
 *             block_cache.update_cache(             # <<<<<<<<<<<<<<
 *                 global_row, global_col, &row_index, &col_index,
 *                 &row_block_offset, &col_block_offset)
 */
      ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_global_row, __pyx_v_global_col, (&__pyx_v_row_index), (&__pyx_v_col_index), (&__pyx_v_row_block_offset), (&__pyx_v_col_block_offset));

      /* "pygeoprocessing\routing\routing_core.pyx":1195
 *                 &row_block_offset, &col_block_offset)
 *             processed_cell_block[row_index, col_index,
 *                 row_block_offset, col_block_offset] = 1             # <<<<<<<<<<<<<<
 *             distance_block[row_index, col_index,
 *                 row_block_offset, col_block_offset] = current_distance
 */
      __pyx_t_73 = __pyx_v_row_index;
      __pyx_t_95 = __pyx_v_col_index;
      __pyx_t_96 = __pyx_v_row_block_offset;
      __pyx_t_97 = __pyx_v_col_block_offset;
      *__Pyx_BufPtrStrided4d(npy_int8 *, __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.buf, __pyx_t_73, __pyx_pybuffernd_processed_cell_block.diminfo[0].strides, __pyx_t_95, __pyx_pybuffernd_processed_cell_block.diminfo[1].strides, __pyx_t_96, __pyx_pybuffernd_processed_cell_block.diminfo[2].strides, __pyx_t_97, __pyx_pybuffernd_processed_cell_block.diminfo[3].strides) = 1;

      /* "pygeoprocessing\routing\routing_core.pyx":1197
 *                 row_block_offset, col_block_offset] = 1
 *             distance_block[row_index, col_index,
 *                 row_block_offset, col_block_offset] = current_distance             # <<<<<<<<<<<<<<
 *             cache_dirty[row_index, col_index] = 1
 * 
 */
      __pyx_t_98 = __pyx_v_row_index;
      __pyx_t_99 = __pyx_v_col_index;
      __pyx_t_100 = __pyx_v_row_block_offset;
      __pyx_t_101 = __pyx_v_col_block_offset;
      *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_distance_block.rcbuffer->pybuffer.buf, __pyx_t_98, __pyx_pybuffernd_distance_block.diminfo[0].strides, __pyx_t_99, __pyx_pybuffernd_distance_block.diminfo[1].strides, __pyx_t_100, __pyx_pybuffernd_distance_block.diminfo[2].strides, __pyx_t_101, __pyx_pybuffernd_distance_block.diminfo[3].strides) = __pyx_v_current_distance;

      /* "pygeoprocessing\routing\routing_core.pyx":1198
 *             distance_block[row_index, col_index,
 *                 row_block_offset, col_block_offset] = current_distance
 *             cache_dirty[row_index, col_index] = 1             # <<<<<<<<<<<<<<
 * 
 *             #update any upstream neighbors with this distance
 */
      __pyx_t_102 = __pyx_v_row_index;
      __pyx_t_103 = __pyx_v_col_index;
      *__Pyx_BufPtrStrided2d(npy_byte *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_102, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_103, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;

      /* "pygeoprocessing\routing\routing_core.pyx":1201
 * 
 *             #update any upstream neighbors with this distance
 *             for neighbor_index in range(8):             # <<<<<<<<<<<<<<
 *                 neighbor_row = global_row + row_offsets[neighbor_index]
 *                 neighbor_col = global_col + col_offsets[neighbor_index]
 */
      for (__pyx_t_104 = 0; __pyx_t_104 < 8; __pyx_t_104+=1) {
        __pyx_v_neighbor_index = __pyx_t_104;

        /* "pygeoprocessing\routing\routing_core.pyx":1202
 *             #update any upstream neighbors with this distance
 *             for neighbor_index in range(8):
 *                 neighbor_row = global_row + row_offsets[neighbor_index]             # <<<<<<<<<<<<<<
 *                 neighbor_col = global_col + col_offsets[neighbor_index]
 *                 if (neighbor_row < 0 or neighbor_row >= n_rows or
 */
        __pyx_v_neighbor_row = (__pyx_v_global_row + (__pyx_v_row_offsets[__pyx_v_neighbor_index]));

        /* "pygeoprocessing\routing\routing_core.pyx":1203
 *             for neighbor_index in range(8):
 *                 neighbor_row = global_row + row_offsets[neighbor_index]
 *                 neighbor_col = global_col + col_offsets[neighbor_index]             # <<<<<<<<<<<<<<
 *                 if (neighbor_row < 0 or neighbor_row >= n_rows or
 *                         neighbor_col < 0 or neighbor_col >= n_cols):
 */
        __pyx_v_neighbor_col = (__pyx_v_global_col + (__pyx_v_col_offsets[__pyx_v_neighbor_index]));

        /* "pygeoprocessing\routing\routing_core.pyx":1204
 *                 neighbor_row = global_row + row_offsets[neighbor_index]
 *                 neighbor_col = global_col + col_offsets[neighbor_index]
 *                 if (neighbor_row < 0 or neighbor_row >= n_rows or             # <<<<<<<<<<<<<<
 *                         neighbor_col < 0 or neighbor_col >= n_cols):
 *                     #out of bounds
 */
        __pyx_t_74 = ((__pyx_v_neighbor_row < 0) != 0);
        if (!__pyx_t_74) {
        } else {
          __pyx_t_20 = __pyx_t_74;
          goto __pyx_L41_bool_binop_done;
        }
        __pyx_t_74 = ((__pyx_v_neighbor_row >= __pyx_v_n_rows) != 0);
        if (!__pyx_t_74) {
        } else {
          __pyx_t_20 = __pyx_t_74;
          goto __pyx_L41_bool_binop_done;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1205
 *                 neighbor_col = global_col + col_offsets[neighbor_index]
 *                 if (neighbor_row < 0 or neighbor_row >= n_rows or
 *                         neighbor_col < 0 or neighbor_col >= n_cols):             # <<<<<<<<<<<<<<
 *                     #out of bounds
 *                     continue
 */
        __pyx_t_74 = ((__pyx_v_neighbor_col < 0) != 0);
        if (!__pyx_t_74) {
        } else {
          __pyx_t_20 = __pyx_t_74;
          goto __pyx_L41_bool_binop_done;
        }
        __pyx_t_74 = ((__pyx_v_neighbor_col >= __pyx_v_n_cols) != 0);
        __pyx_t_20 = __pyx_t_74;
        __pyx_L41_bool_binop_done:;
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1207
 *                         neighbor_col < 0 or neighbor_col >= n_cols):
 *                     #out of bounds
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 block_cache.update_cache(
 */
          goto __pyx_L38_continue;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1209
 *                     continue
 * 
 *                 block_cache.update_cache(             # <<<<<<<<<<<<<<
 *                     neighbor_row, neighbor_col, &neighbor_row_index,
 *                     &neighbor_col_index, &neighbor_row_block_offset,
 */
        ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_neighbor_row, __pyx_v_neighbor_col, (&__pyx_v_neighbor_row_index), (&__pyx_v_neighbor_col_index), (&__pyx_v_neighbor_row_block_offset), (&__pyx_v_neighbor_col_block_offset));

        /* "pygeoprocessing\routing\routing_core.pyx":1215
 * 
 *                 #streams were already added, skip if they are in the queue
 *                 if (stream_block[neighbor_row_index, neighbor_col_index,             # <<<<<<<<<<<<<<
 *                         neighbor_row_block_offset,
 *                         neighbor_col_block_offset] == 1 or
 */
        __pyx_t_105 = __pyx_v_neighbor_row_index;
        __pyx_t_106 = __pyx_v_neighbor_col_index;
        __pyx_t_107 = __pyx_v_neighbor_row_block_offset;
        __pyx_t_108 = __pyx_v_neighbor_col_block_offset;

        /* "pygeoprocessing\routing\routing_core.pyx":1217
 *                 if (stream_block[neighbor_row_index, neighbor_col_index,
 *                         neighbor_row_block_offset,
 *                         neighbor_col_block_offset] == 1 or             # <<<<<<<<<<<<<<
 *                     stream_block[neighbor_row_index, neighbor_col_index,
 *                         neighbor_row_block_offset,
 */
        __pyx_t_74 = (((*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.buf, __pyx_t_105, __pyx_pybuffernd_stream_block.diminfo[0].strides, __pyx_t_106, __pyx_pybuffernd_stream_block.diminfo[1].strides, __pyx_t_107, __pyx_pybuffernd_stream_block.diminfo[2].strides, __pyx_t_108, __pyx_pybuffernd_stream_block.diminfo[3].strides)) == 1.0) != 0);
        if (!__pyx_t_74) {
        } else {
          __pyx_t_20 = __pyx_t_74;
          goto __pyx_L46_bool_binop_done;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1218
 *                         neighbor_row_block_offset,
 *                         neighbor_col_block_offset] == 1 or
 *                     stream_block[neighbor_row_index, neighbor_col_index,             # <<<<<<<<<<<<<<
 *                         neighbor_row_block_offset,
 *                         neighbor_col_block_offset] == stream_nodata):
 */
        __pyx_t_109 = __pyx_v_neighbor_row_index;
        __pyx_t_110 = __pyx_v_neighbor_col_index;
        __pyx_t_111 = __pyx_v_neighbor_row_block_offset;
        __pyx_t_112 = __pyx_v_neighbor_col_block_offset;

        /* "pygeoprocessing\routing\routing_core.pyx":1220
 *                     stream_block[neighbor_row_index, neighbor_col_index,
 *                         neighbor_row_block_offset,
 *                         neighbor_col_block_offset] == stream_nodata):             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_74 = (((*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_stream_block.rcbuffer->pybuffer.buf, __pyx_t_109, __pyx_pybuffernd_stream_block.diminfo[0].strides, __pyx_t_110, __pyx_pybuffernd_stream_block.diminfo[1].strides, __pyx_t_111, __pyx_pybuffernd_stream_block.diminfo[2].strides, __pyx_t_112, __pyx_pybuffernd_stream_block.diminfo[3].strides)) == __pyx_v_stream_nodata) != 0);
        __pyx_t_20 = __pyx_t_74;
        __pyx_L46_bool_binop_done:;
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1221
 *                         neighbor_row_block_offset,
 *                         neighbor_col_block_offset] == stream_nodata):
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 if processed_cell_block[
 */
          goto __pyx_L38_continue;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1223
 *                     continue
 * 
 *                 if processed_cell_block[             # <<<<<<<<<<<<<<
 *                         neighbor_row_index,
 *                         neighbor_col_index,
 */
        __pyx_t_113 = __pyx_v_neighbor_row_index;
        __pyx_t_114 = __pyx_v_neighbor_col_index;
        __pyx_t_115 = __pyx_v_neighbor_row_block_offset;
        __pyx_t_116 = __pyx_v_neighbor_col_block_offset;

        /* "pygeoprocessing\routing\routing_core.pyx":1227
 *                         neighbor_col_index,
 *                         neighbor_row_block_offset,
 *                         neighbor_col_block_offset] == 1:             # <<<<<<<<<<<<<<
 *                     #don't reprocess it, it's already been updated by two valid
 *                     #children
 */
        __pyx_t_20 = (((*__Pyx_BufPtrStrided4d(npy_int8 *, __pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer.buf, __pyx_t_113, __pyx_pybuffernd_processed_cell_block.diminfo[0].strides, __pyx_t_114, __pyx_pybuffernd_processed_cell_block.diminfo[1].strides, __pyx_t_115, __pyx_pybuffernd_processed_cell_block.diminfo[2].strides, __pyx_t_116, __pyx_pybuffernd_processed_cell_block.diminfo[3].strides)) == 1) != 0);
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1230
 *                     #don't reprocess it, it's already been updated by two valid
 *                     #children
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 neighbor_outflow_direction = outflow_direction_block[
 */
          goto __pyx_L38_continue;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1232
 *                     continue
 * 
 *                 neighbor_outflow_direction = outflow_direction_block[             # <<<<<<<<<<<<<<
 *                     neighbor_row_index, neighbor_col_index,
 *                     neighbor_row_block_offset, neighbor_col_block_offset]
 */
        __pyx_t_117 = __pyx_v_neighbor_row_index;
        __pyx_t_118 = __pyx_v_neighbor_col_index;
        __pyx_t_119 = __pyx_v_neighbor_row_block_offset;
        __pyx_t_120 = __pyx_v_neighbor_col_block_offset;
        __pyx_v_neighbor_outflow_direction = (*__Pyx_BufPtrStrided4d(npy_int8 *, __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.buf, __pyx_t_117, __pyx_pybuffernd_outflow_direction_block.diminfo[0].strides, __pyx_t_118, __pyx_pybuffernd_outflow_direction_block.diminfo[1].strides, __pyx_t_119, __pyx_pybuffernd_outflow_direction_block.diminfo[2].strides, __pyx_t_120, __pyx_pybuffernd_outflow_direction_block.diminfo[3].strides));

        /* "pygeoprocessing\routing\routing_core.pyx":1235
 *                     neighbor_row_index, neighbor_col_index,
 *                     neighbor_row_block_offset, neighbor_col_block_offset]
 *                 if neighbor_outflow_direction == outflow_direction_nodata:             # <<<<<<<<<<<<<<
 *                     #if the neighbor has no flow, we can't flow here
 *                     continue
 */
        __pyx_t_20 = ((__pyx_v_neighbor_outflow_direction == __pyx_v_outflow_direction_nodata) != 0);
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1237
 *                 if neighbor_outflow_direction == outflow_direction_nodata:
 *                     #if the neighbor has no flow, we can't flow here
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 neighbor_outflow_weight = outflow_weights_block[
 */
          goto __pyx_L38_continue;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1239
 *                     continue
 * 
 *                 neighbor_outflow_weight = outflow_weights_block[             # <<<<<<<<<<<<<<
 *                     neighbor_row_index, neighbor_col_index,
 *                     neighbor_row_block_offset, neighbor_col_block_offset]
 */
        __pyx_t_121 = __pyx_v_neighbor_row_index;
        __pyx_t_122 = __pyx_v_neighbor_col_index;
        __pyx_t_123 = __pyx_v_neighbor_row_block_offset;
        __pyx_t_124 = __pyx_v_neighbor_col_block_offset;
        __pyx_v_neighbor_outflow_weight = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.buf, __pyx_t_121, __pyx_pybuffernd_outflow_weights_block.diminfo[0].strides, __pyx_t_122, __pyx_pybuffernd_outflow_weights_block.diminfo[1].strides, __pyx_t_123, __pyx_pybuffernd_outflow_weights_block.diminfo[2].strides, __pyx_t_124, __pyx_pybuffernd_outflow_weights_block.diminfo[3].strides));

        /* "pygeoprocessing\routing\routing_core.pyx":1243
 *                     neighbor_row_block_offset, neighbor_col_block_offset]
 * 
 *                 it_flows_here = False             # <<<<<<<<<<<<<<
 *                 if (neighbor_outflow_direction ==
 *                         inflow_offsets[neighbor_index]):
 */
        __pyx_v_it_flows_here = 0;

        /* "pygeoprocessing\routing\routing_core.pyx":1244
 * 
 *                 it_flows_here = False
 *                 if (neighbor_outflow_direction ==             # <<<<<<<<<<<<<<
 *                         inflow_offsets[neighbor_index]):
 *                     it_flows_here = True
 */
        __pyx_t_20 = ((__pyx_v_neighbor_outflow_direction == (__pyx_v_inflow_offsets[__pyx_v_neighbor_index])) != 0);
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1246
 *                 if (neighbor_outflow_direction ==
 *                         inflow_offsets[neighbor_index]):
 *                     it_flows_here = True             # <<<<<<<<<<<<<<
 *                 elif ((neighbor_outflow_direction + 1) % 8 ==
 *                         inflow_offsets[neighbor_index]):
 */
          __pyx_v_it_flows_here = 1;
          goto __pyx_L50;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1247
 *                         inflow_offsets[neighbor_index]):
 *                     it_flows_here = True
 *                 elif ((neighbor_outflow_direction + 1) % 8 ==             # <<<<<<<<<<<<<<
 *                         inflow_offsets[neighbor_index]):
 *                     it_flows_here = True
 */
        __pyx_t_20 = ((((__pyx_v_neighbor_outflow_direction + 1) % 8) == (__pyx_v_inflow_offsets[__pyx_v_neighbor_index])) != 0);
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1249
 *                 elif ((neighbor_outflow_direction + 1) % 8 ==
 *                         inflow_offsets[neighbor_index]):
 *                     it_flows_here = True             # <<<<<<<<<<<<<<
 *                     neighbor_outflow_weight = 1.0 - neighbor_outflow_weight
 * 
 */
          __pyx_v_it_flows_here = 1;

          /* "pygeoprocessing\routing\routing_core.pyx":1250
 *                         inflow_offsets[neighbor_index]):
 *                     it_flows_here = True
 *                     neighbor_outflow_weight = 1.0 - neighbor_outflow_weight             # <<<<<<<<<<<<<<
 * 
 *                 neighbor_flat_index = neighbor_row * n_cols + neighbor_col
 */
          __pyx_v_neighbor_outflow_weight = (1.0 - __pyx_v_neighbor_outflow_weight);
          goto __pyx_L50;
        }
        __pyx_L50:;

        /* "pygeoprocessing\routing\routing_core.pyx":1252
 *                     neighbor_outflow_weight = 1.0 - neighbor_outflow_weight
 * 
 *                 neighbor_flat_index = neighbor_row * n_cols + neighbor_col             # <<<<<<<<<<<<<<
 *                 if (it_flows_here and neighbor_outflow_weight > 0.0 and
 *                     cells_in_queue.find(neighbor_flat_index) ==
 */
        __pyx_v_neighbor_flat_index = ((__pyx_v_neighbor_row * __pyx_v_n_cols) + __pyx_v_neighbor_col);

        /* "pygeoprocessing\routing\routing_core.pyx":1253
 * 
 *                 neighbor_flat_index = neighbor_row * n_cols + neighbor_col
 *                 if (it_flows_here and neighbor_outflow_weight > 0.0 and             # <<<<<<<<<<<<<<
 *                     cells_in_queue.find(neighbor_flat_index) ==
 *                         cells_in_queue.end()):
 */
        __pyx_t_74 = (__pyx_v_it_flows_here != 0);
        if (__pyx_t_74) {
        } else {
          __pyx_t_20 = __pyx_t_74;
          goto __pyx_L52_bool_binop_done;
        }
        __pyx_t_74 = ((__pyx_v_neighbor_outflow_weight > 0.0) != 0);
        if (__pyx_t_74) {
        } else {
          __pyx_t_20 = __pyx_t_74;
          goto __pyx_L52_bool_binop_done;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1254
 *                 neighbor_flat_index = neighbor_row * n_cols + neighbor_col
 *                 if (it_flows_here and neighbor_outflow_weight > 0.0 and
 *                     cells_in_queue.find(neighbor_flat_index) ==             # <<<<<<<<<<<<<<
 *                         cells_in_queue.end()):
 *                     visit_stack.push_back(neighbor_flat_index)
 */
        __pyx_t_74 = ((__pyx_v_cells_in_queue.find(__pyx_v_neighbor_flat_index) == __pyx_v_cells_in_queue.end()) != 0);
        __pyx_t_20 = __pyx_t_74;
        __pyx_L52_bool_binop_done:;
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1256
 *                     cells_in_queue.find(neighbor_flat_index) ==
 *                         cells_in_queue.end()):
 *                     visit_stack.push_back(neighbor_flat_index)             # <<<<<<<<<<<<<<
 *                     cells_in_queue.insert(neighbor_flat_index)
 * 
 */
          __pyx_v_visit_stack.push_back(__pyx_v_neighbor_flat_index);

          /* "pygeoprocessing\routing\routing_core.pyx":1257
 *                         cells_in_queue.end()):
 *                     visit_stack.push_back(neighbor_flat_index)
 *                     cells_in_queue.insert(neighbor_flat_index)             # <<<<<<<<<<<<<<
 * 
 *     block_cache.flush_cache()
 */
          try {
            __pyx_v_cells_in_queue.insert(__pyx_v_neighbor_flat_index);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          goto __pyx_L51;
        }
        __pyx_L51:;
        __pyx_L38_continue:;
      }
      goto __pyx_L37;
    }
    __pyx_L37:;
  }

  /* "pygeoprocessing\routing\routing_core.pyx":1259
 *                     cells_in_queue.insert(neighbor_flat_index)
 * 
 *     block_cache.flush_cache()             # <<<<<<<<<<<<<<
 * 
 *     for dataset in [outflow_weights_ds, outflow_direction_ds]:
 */
  ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->flush_cache(__pyx_v_block_cache);

  /* "pygeoprocessing\routing\routing_core.pyx":1261
 *     block_cache.flush_cache()
 * 
 *     for dataset in [outflow_weights_ds, outflow_direction_ds]:             # <<<<<<<<<<<<<<
 *         gdal.Dataset.__swig_destroy__(dataset)
 *     for dataset_uri in [outflow_weights_uri, outflow_direction_uri]:
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_outflow_weights_ds);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_outflow_weights_ds);
  __Pyx_GIVEREF(__pyx_v_outflow_weights_ds);
  __Pyx_INCREF(__pyx_v_outflow_direction_ds);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_outflow_direction_ds);
  __Pyx_GIVEREF(__pyx_v_outflow_direction_ds);
  __pyx_t_1 = __pyx_t_5; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_7 >= 2) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_dataset, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":1262
 * 
 *     for dataset in [outflow_weights_ds, outflow_direction_ds]:
 *         gdal.Dataset.__swig_destroy__(dataset)             # <<<<<<<<<<<<<<
 *     for dataset_uri in [outflow_weights_uri, outflow_direction_uri]:
 *         os.remove(dataset_uri)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Dataset); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_swig_destroy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_dataset); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_27 = PyTuple_New(1+1); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_27);
      PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_dataset);
      PyTuple_SET_ITEM(__pyx_t_27, 0+1, __pyx_v_dataset);
      __Pyx_GIVEREF(__pyx_v_dataset);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_27, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":1261
 *     block_cache.flush_cache()
 * 
 *     for dataset in [outflow_weights_ds, outflow_direction_ds]:             # <<<<<<<<<<<<<<
 *         gdal.Dataset.__swig_destroy__(dataset)
 *     for dataset_uri in [outflow_weights_uri, outflow_direction_uri]:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1263
 *     for dataset in [outflow_weights_ds, outflow_direction_ds]:
 *         gdal.Dataset.__swig_destroy__(dataset)
 *     for dataset_uri in [outflow_weights_uri, outflow_direction_uri]:             # <<<<<<<<<<<<<<
 *         os.remove(dataset_uri)
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_outflow_weights_uri);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_outflow_weights_uri);
  __Pyx_GIVEREF(__pyx_v_outflow_weights_uri);
  __Pyx_INCREF(__pyx_v_outflow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_outflow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_outflow_direction_uri);
  __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_7 >= 2) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_dataset_uri, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":1264
 *         gdal.Dataset.__swig_destroy__(dataset)
 *     for dataset_uri in [outflow_weights_uri, outflow_direction_uri]:
 *         os.remove(dataset_uri)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_27 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_remove); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_27);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_27))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_27);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_27);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_27, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_27, __pyx_v_dataset_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_dataset_uri);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_dataset_uri);
      __Pyx_GIVEREF(__pyx_v_dataset_uri);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_27, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":1263
 *     for dataset in [outflow_weights_ds, outflow_direction_ds]:
 *         gdal.Dataset.__swig_destroy__(dataset)
 *     for dataset_uri in [outflow_weights_uri, outflow_direction_uri]:             # <<<<<<<<<<<<<<
 *         os.remove(dataset_uri)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":899
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def distance_to_stream(             # <<<<<<<<<<<<<<
 *         flow_direction_uri, stream_uri, distance_uri, factor_uri=None):
 *     """This function calculates the flow downhill distance to the stream layers
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_27);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_distance_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_factor_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stream_block.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.distance_to_stream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_distance_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_factor_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_processed_cell_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stream_block.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_processed_cell_uri);
  __Pyx_XDECREF(__pyx_v_processed_cell_ds);
  __Pyx_XDECREF(__pyx_v_processed_cell_band);
  __Pyx_XDECREF(__pyx_v_stream_ds);
  __Pyx_XDECREF(__pyx_v_stream_band);
  __Pyx_XDECREF(__pyx_v_distance_ds);
  __Pyx_XDECREF(__pyx_v_distance_band);
  __Pyx_XDECREF(__pyx_v_outflow_weights_uri);
  __Pyx_XDECREF(__pyx_v_outflow_direction_uri);
  __Pyx_XDECREF(__pyx_v_outflow_weights_ds);
  __Pyx_XDECREF(__pyx_v_outflow_weights_band);
  __Pyx_XDECREF(__pyx_v_outflow_direction_ds);
  __Pyx_XDECREF(__pyx_v_outflow_direction_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_stream_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_outflow_direction_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_outflow_weights_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_distance_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_processed_cell_block);
  __Pyx_XDECREF(__pyx_v_band_list);
  __Pyx_XDECREF(__pyx_v_block_list);
  __Pyx_XDECREF(__pyx_v_update_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_factor_block);
  __Pyx_XDECREF(__pyx_v_factor_ds);
  __Pyx_XDECREF(__pyx_v_factor_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_cache_dirty);
  __Pyx_XDECREF((PyObject *)__pyx_v_block_cache);
  __Pyx_XDECREF(__pyx_v_dataset);
  __Pyx_XDECREF(__pyx_v_dataset_uri);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":1269
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def percent_to_sink(             # <<<<<<<<<<<<<<
 *     sink_pixels_uri, export_rate_uri, outflow_direction_uri,
 *     outflow_weights_uri, effect_uri):
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_9percent_to_sink(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15pygeoprocessing_7routing_12routing_core_8percent_to_sink[] = "This function calculates the amount of load from a single pixel\n        to the source pixels given the percent export rate per pixel.\n\n        sink_pixels_uri - the pixels of interest that will receive flux.\n            This may be a set of stream pixels, or a single pixel at a\n            watershed outlet.\n\n        export_rate_uri - a GDAL floating point dataset that has a percent\n            of flux exported per pixel\n\n        outflow_direction_uri - a uri to a byte dataset that indicates the\n            first counter clockwise outflow neighbor as an index from the\n            following diagram\n\n            3 2 1\n            4 x 0\n            5 6 7\n\n        outflow_weights_uri - a uri to a float32 dataset whose elements\n            correspond to the percent outflow from the current cell to its\n            first counter-clockwise neighbor\n\n        effect_uri - the output GDAL dataset that shows the percent of flux\n            emanating per pixel that will reach any sink pixel\n\n        returns nothing";
static PyMethodDef __pyx_mdef_15pygeoprocessing_7routing_12routing_core_9percent_to_sink = {"percent_to_sink", (PyCFunction)__pyx_pw_15pygeoprocessing_7routing_12routing_core_9percent_to_sink, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15pygeoprocessing_7routing_12routing_core_8percent_to_sink};
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_9percent_to_sink(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sink_pixels_uri = 0;
  PyObject *__pyx_v_export_rate_uri = 0;
  PyObject *__pyx_v_outflow_direction_uri = 0;
  PyObject *__pyx_v_outflow_weights_uri = 0;
  PyObject *__pyx_v_effect_uri = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("percent_to_sink (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sink_pixels_uri,&__pyx_n_s_export_rate_uri,&__pyx_n_s_outflow_direction_uri,&__pyx_n_s_outflow_weights_uri,&__pyx_n_s_effect_uri,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sink_pixels_uri)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_export_rate_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("percent_to_sink", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_outflow_direction_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("percent_to_sink", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_outflow_weights_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("percent_to_sink", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_effect_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("percent_to_sink", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "percent_to_sink") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_sink_pixels_uri = values[0];
    __pyx_v_export_rate_uri = values[1];
    __pyx_v_outflow_direction_uri = values[2];
    __pyx_v_outflow_weights_uri = values[3];
    __pyx_v_effect_uri = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("percent_to_sink", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.percent_to_sink", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pygeoprocessing_7routing_12routing_core_8percent_to_sink(__pyx_self, __pyx_v_sink_pixels_uri, __pyx_v_export_rate_uri, __pyx_v_outflow_direction_uri, __pyx_v_outflow_weights_uri, __pyx_v_effect_uri);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_8percent_to_sink(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sink_pixels_uri, PyObject *__pyx_v_export_rate_uri, PyObject *__pyx_v_outflow_direction_uri, PyObject *__pyx_v_outflow_weights_uri, PyObject *__pyx_v_effect_uri) {
  time_t __pyx_v_start_time;
  PyObject *__pyx_v_sink_pixels_dataset = NULL;
  PyObject *__pyx_v_sink_pixels_band = NULL;
  CYTHON_UNUSED int __pyx_v_sink_pixels_nodata;
  PyObject *__pyx_v_export_rate_dataset = NULL;
  PyObject *__pyx_v_export_rate_band = NULL;
  double __pyx_v_export_rate_nodata;
  PyObject *__pyx_v_outflow_direction_dataset = NULL;
  PyObject *__pyx_v_outflow_direction_band = NULL;
  int __pyx_v_outflow_direction_nodata;
  PyObject *__pyx_v_outflow_weights_dataset = NULL;
  PyObject *__pyx_v_outflow_weights_band = NULL;
  float __pyx_v_outflow_weights_nodata;
  int __pyx_v_block_col_size;
  int __pyx_v_block_row_size;
  int __pyx_v_n_rows;
  int __pyx_v_n_cols;
  double __pyx_v_effect_nodata;
  PyObject *__pyx_v_effect_dataset = NULL;
  PyObject *__pyx_v_effect_band = NULL;
  int __pyx_v_global_row;
  int __pyx_v_global_col;
  int __pyx_v_row_index;
  int __pyx_v_col_index;
  int __pyx_v_row_block_offset;
  int __pyx_v_col_block_offset;
  int __pyx_v_global_block_row;
  int __pyx_v_global_block_col;
  int __pyx_v_neighbor_row;
  int __pyx_v_neighbor_col;
  int __pyx_v_neighbor_row_index;
  int __pyx_v_neighbor_col_index;
  int __pyx_v_neighbor_row_block_offset;
  int __pyx_v_neighbor_col_block_offset;
  PyArrayObject *__pyx_v_sink_pixels_block = 0;
  PyArrayObject *__pyx_v_export_rate_block = 0;
  PyArrayObject *__pyx_v_outflow_direction_block = 0;
  PyArrayObject *__pyx_v_outflow_weights_block = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_out_block = 0;
  PyArrayObject *__pyx_v_effect_block = 0;
  PyObject *__pyx_v_block_list = NULL;
  PyObject *__pyx_v_band_list = NULL;
  PyObject *__pyx_v_update_list = NULL;
  PyArrayObject *__pyx_v_cache_dirty = 0;
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_block_cache = 0;
  float __pyx_v_outflow_weight;
  float __pyx_v_neighbor_outflow_weight;
  int __pyx_v_neighbor_outflow_direction;
  int *__pyx_v_row_offsets;
  int *__pyx_v_col_offsets;
  int *__pyx_v_inflow_offsets;
  int __pyx_v_flat_index;
  std::deque<int>  __pyx_v_process_queue;
  long __pyx_v_neighbor_index;
  int __pyx_v_it_flows_here;
  time_t __pyx_v_end_time;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cache_dirty;
  __Pyx_Buffer __pyx_pybuffer_cache_dirty;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_effect_block;
  __Pyx_Buffer __pyx_pybuffer_effect_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_export_rate_block;
  __Pyx_Buffer __pyx_pybuffer_export_rate_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_out_block;
  __Pyx_Buffer __pyx_pybuffer_out_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_outflow_direction_block;
  __Pyx_Buffer __pyx_pybuffer_outflow_direction_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_outflow_weights_block;
  __Pyx_Buffer __pyx_pybuffer_outflow_weights_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sink_pixels_block;
  __Pyx_Buffer __pyx_pybuffer_sink_pixels_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  double __pyx_t_6;
  float __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  PyArrayObject *__pyx_t_16 = NULL;
  PyArrayObject *__pyx_t_17 = NULL;
  PyArrayObject *__pyx_t_18 = NULL;
  PyArrayObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21[8];
  int __pyx_t_22[8];
  int __pyx_t_23[8];
  long __pyx_t_24;
  long __pyx_t_25;
  int __pyx_t_26;
  long __pyx_t_27;
  long __pyx_t_28;
  int __pyx_t_29;
  long __pyx_t_30;
  int __pyx_t_31;
  int __pyx_t_32;
  int __pyx_t_33;
  int __pyx_t_34;
  int __pyx_t_35;
  int __pyx_t_36;
  int __pyx_t_37;
  int __pyx_t_38;
  int __pyx_t_39;
  int __pyx_t_40;
  int __pyx_t_41;
  int __pyx_t_42;
  int __pyx_t_43;
  int __pyx_t_44;
  int __pyx_t_45;
  int __pyx_t_46;
  int __pyx_t_47;
  int __pyx_t_48;
  int __pyx_t_49;
  int __pyx_t_50;
  int __pyx_t_51;
  int __pyx_t_52;
  int __pyx_t_53;
  int __pyx_t_54;
  int __pyx_t_55;
  int __pyx_t_56;
  int __pyx_t_57;
  int __pyx_t_58;
  int __pyx_t_59;
  int __pyx_t_60;
  int __pyx_t_61;
  int __pyx_t_62;
  int __pyx_t_63;
  int __pyx_t_64;
  int __pyx_t_65;
  int __pyx_t_66;
  int __pyx_t_67;
  int __pyx_t_68;
  int __pyx_t_69;
  int __pyx_t_70;
  int __pyx_t_71;
  int __pyx_t_72;
  int __pyx_t_73;
  int __pyx_t_74;
  int __pyx_t_75;
  int __pyx_t_76;
  int __pyx_t_77;
  int __pyx_t_78;
  int __pyx_t_79;
  int __pyx_t_80;
  int __pyx_t_81;
  int __pyx_t_82;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("percent_to_sink", 0);
  __pyx_pybuffer_sink_pixels_block.pybuffer.buf = NULL;
  __pyx_pybuffer_sink_pixels_block.refcount = 0;
  __pyx_pybuffernd_sink_pixels_block.data = NULL;
  __pyx_pybuffernd_sink_pixels_block.rcbuffer = &__pyx_pybuffer_sink_pixels_block;
  __pyx_pybuffer_export_rate_block.pybuffer.buf = NULL;
  __pyx_pybuffer_export_rate_block.refcount = 0;
  __pyx_pybuffernd_export_rate_block.data = NULL;
  __pyx_pybuffernd_export_rate_block.rcbuffer = &__pyx_pybuffer_export_rate_block;
  __pyx_pybuffer_outflow_direction_block.pybuffer.buf = NULL;
  __pyx_pybuffer_outflow_direction_block.refcount = 0;
  __pyx_pybuffernd_outflow_direction_block.data = NULL;
  __pyx_pybuffernd_outflow_direction_block.rcbuffer = &__pyx_pybuffer_outflow_direction_block;
  __pyx_pybuffer_outflow_weights_block.pybuffer.buf = NULL;
  __pyx_pybuffer_outflow_weights_block.refcount = 0;
  __pyx_pybuffernd_outflow_weights_block.data = NULL;
  __pyx_pybuffernd_outflow_weights_block.rcbuffer = &__pyx_pybuffer_outflow_weights_block;
  __pyx_pybuffer_out_block.pybuffer.buf = NULL;
  __pyx_pybuffer_out_block.refcount = 0;
  __pyx_pybuffernd_out_block.data = NULL;
  __pyx_pybuffernd_out_block.rcbuffer = &__pyx_pybuffer_out_block;
  __pyx_pybuffer_effect_block.pybuffer.buf = NULL;
  __pyx_pybuffer_effect_block.refcount = 0;
  __pyx_pybuffernd_effect_block.data = NULL;
  __pyx_pybuffernd_effect_block.rcbuffer = &__pyx_pybuffer_effect_block;
  __pyx_pybuffer_cache_dirty.pybuffer.buf = NULL;
  __pyx_pybuffer_cache_dirty.refcount = 0;
  __pyx_pybuffernd_cache_dirty.data = NULL;
  __pyx_pybuffernd_cache_dirty.rcbuffer = &__pyx_pybuffer_cache_dirty;

  /* "pygeoprocessing\routing\routing_core.pyx":1299
 *         returns nothing"""
 * 
 *     LOGGER.info("calculating percent to sink")             # <<<<<<<<<<<<<<
 *     cdef time_t start_time
 *     time(&start_time)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1301
 *     LOGGER.info("calculating percent to sink")
 *     cdef time_t start_time
 *     time(&start_time)             # <<<<<<<<<<<<<<
 * 
 *     sink_pixels_dataset = gdal.Open(sink_pixels_uri)
 */
  time((&__pyx_v_start_time));

  /* "pygeoprocessing\routing\routing_core.pyx":1303
 *     time(&start_time)
 * 
 *     sink_pixels_dataset = gdal.Open(sink_pixels_uri)             # <<<<<<<<<<<<<<
 *     sink_pixels_band = sink_pixels_dataset.GetRasterBand(1)
 *     cdef int sink_pixels_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Open); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_sink_pixels_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_sink_pixels_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_sink_pixels_uri);
    __Pyx_GIVEREF(__pyx_v_sink_pixels_uri);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_sink_pixels_dataset = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1304
 * 
 *     sink_pixels_dataset = gdal.Open(sink_pixels_uri)
 *     sink_pixels_band = sink_pixels_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int sink_pixels_nodata = pygeoprocessing.get_nodata_from_uri(
 *         sink_pixels_uri)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sink_pixels_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_sink_pixels_band = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1305
 *     sink_pixels_dataset = gdal.Open(sink_pixels_uri)
 *     sink_pixels_band = sink_pixels_dataset.GetRasterBand(1)
 *     cdef int sink_pixels_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         sink_pixels_uri)
 *     export_rate_dataset = gdal.Open(export_rate_uri)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1306
 *     sink_pixels_band = sink_pixels_dataset.GetRasterBand(1)
 *     cdef int sink_pixels_nodata = pygeoprocessing.get_nodata_from_uri(
 *         sink_pixels_uri)             # <<<<<<<<<<<<<<
 *     export_rate_dataset = gdal.Open(export_rate_uri)
 *     export_rate_band = export_rate_dataset.GetRasterBand(1)
 */
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_sink_pixels_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_sink_pixels_uri);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_sink_pixels_uri);
    __Pyx_GIVEREF(__pyx_v_sink_pixels_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1305
 *     sink_pixels_dataset = gdal.Open(sink_pixels_uri)
 *     sink_pixels_band = sink_pixels_dataset.GetRasterBand(1)
 *     cdef int sink_pixels_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         sink_pixels_uri)
 *     export_rate_dataset = gdal.Open(export_rate_uri)
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_sink_pixels_nodata = __pyx_t_5;

  /* "pygeoprocessing\routing\routing_core.pyx":1307
 *     cdef int sink_pixels_nodata = pygeoprocessing.get_nodata_from_uri(
 *         sink_pixels_uri)
 *     export_rate_dataset = gdal.Open(export_rate_uri)             # <<<<<<<<<<<<<<
 *     export_rate_band = export_rate_dataset.GetRasterBand(1)
 *     cdef double export_rate_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Open); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_export_rate_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_export_rate_uri);
    PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_v_export_rate_uri);
    __Pyx_GIVEREF(__pyx_v_export_rate_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_export_rate_dataset = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1308
 *         sink_pixels_uri)
 *     export_rate_dataset = gdal.Open(export_rate_uri)
 *     export_rate_band = export_rate_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef double export_rate_nodata = pygeoprocessing.get_nodata_from_uri(
 *         export_rate_uri)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_export_rate_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_export_rate_band = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1309
 *     export_rate_dataset = gdal.Open(export_rate_uri)
 *     export_rate_band = export_rate_dataset.GetRasterBand(1)
 *     cdef double export_rate_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         export_rate_uri)
 *     outflow_direction_dataset = gdal.Open(outflow_direction_uri)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1310
 *     export_rate_band = export_rate_dataset.GetRasterBand(1)
 *     cdef double export_rate_nodata = pygeoprocessing.get_nodata_from_uri(
 *         export_rate_uri)             # <<<<<<<<<<<<<<
 *     outflow_direction_dataset = gdal.Open(outflow_direction_uri)
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)
 */
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_export_rate_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_export_rate_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_export_rate_uri);
    __Pyx_GIVEREF(__pyx_v_export_rate_uri);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1309
 *     export_rate_dataset = gdal.Open(export_rate_uri)
 *     export_rate_band = export_rate_dataset.GetRasterBand(1)
 *     cdef double export_rate_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         export_rate_uri)
 *     outflow_direction_dataset = gdal.Open(outflow_direction_uri)
 */
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_export_rate_nodata = __pyx_t_6;

  /* "pygeoprocessing\routing\routing_core.pyx":1311
 *     cdef double export_rate_nodata = pygeoprocessing.get_nodata_from_uri(
 *         export_rate_uri)
 *     outflow_direction_dataset = gdal.Open(outflow_direction_uri)             # <<<<<<<<<<<<<<
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Open); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_outflow_direction_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_outflow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_outflow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_outflow_direction_uri);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_outflow_direction_dataset = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1312
 *         export_rate_uri)
 *     outflow_direction_dataset = gdal.Open(outflow_direction_uri)
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_direction_uri)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_outflow_direction_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_outflow_direction_band = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1313
 *     outflow_direction_dataset = gdal.Open(outflow_direction_uri)
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         outflow_direction_uri)
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1314
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_direction_uri)             # <<<<<<<<<<<<<<
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)
 */
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_outflow_direction_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_outflow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_v_outflow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_outflow_direction_uri);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1313
 *     outflow_direction_dataset = gdal.Open(outflow_direction_uri)
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         outflow_direction_uri)
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_outflow_direction_nodata = __pyx_t_5;

  /* "pygeoprocessing\routing\routing_core.pyx":1315
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_direction_uri)
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)             # <<<<<<<<<<<<<<
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)
 *     cdef float outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Open); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_outflow_weights_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_outflow_weights_uri);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_outflow_weights_uri);
    __Pyx_GIVEREF(__pyx_v_outflow_weights_uri);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_outflow_weights_dataset = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1316
 *         outflow_direction_uri)
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef float outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_weights_uri)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_outflow_weights_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_outflow_weights_band = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1317
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)
 *     cdef float outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         outflow_weights_uri)
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1318
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)
 *     cdef float outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_weights_uri)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_outflow_weights_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_outflow_weights_uri);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_outflow_weights_uri);
    __Pyx_GIVEREF(__pyx_v_outflow_weights_uri);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1317
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)
 *     cdef float outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         outflow_weights_uri)
 * 
 */
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_outflow_weights_nodata = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":1321
 * 
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = sink_pixels_band.GetBlockSize()             # <<<<<<<<<<<<<<
 *     cdef int n_rows = sink_pixels_dataset.RasterYSize
 *     cdef int n_cols = sink_pixels_dataset.RasterXSize
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_sink_pixels_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_4), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_block_col_size = __pyx_t_5;
  __pyx_v_block_row_size = __pyx_t_9;

  /* "pygeoprocessing\routing\routing_core.pyx":1322
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = sink_pixels_band.GetBlockSize()
 *     cdef int n_rows = sink_pixels_dataset.RasterYSize             # <<<<<<<<<<<<<<
 *     cdef int n_cols = sink_pixels_dataset.RasterXSize
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sink_pixels_dataset, __pyx_n_s_RasterYSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n_rows = __pyx_t_9;

  /* "pygeoprocessing\routing\routing_core.pyx":1323
 *     block_col_size, block_row_size = sink_pixels_band.GetBlockSize()
 *     cdef int n_rows = sink_pixels_dataset.RasterYSize
 *     cdef int n_cols = sink_pixels_dataset.RasterXSize             # <<<<<<<<<<<<<<
 * 
 *     cdef double effect_nodata = -1.0
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sink_pixels_dataset, __pyx_n_s_RasterXSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n_cols = __pyx_t_9;

  /* "pygeoprocessing\routing\routing_core.pyx":1325
 *     cdef int n_cols = sink_pixels_dataset.RasterXSize
 * 
 *     cdef double effect_nodata = -1.0             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base_uri(
 *         sink_pixels_uri, effect_uri, 'GTiff', effect_nodata,
 */
  __pyx_v_effect_nodata = -1.0;

  /* "pygeoprocessing\routing\routing_core.pyx":1326
 * 
 *     cdef double effect_nodata = -1.0
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         sink_pixels_uri, effect_uri, 'GTiff', effect_nodata,
 *         gdal.GDT_Float32, fill_value=effect_nodata)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_new_raster_from_base_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1327
 *     cdef double effect_nodata = -1.0
 *     pygeoprocessing.new_raster_from_base_uri(
 *         sink_pixels_uri, effect_uri, 'GTiff', effect_nodata,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Float32, fill_value=effect_nodata)
 *     effect_dataset = gdal.Open(effect_uri, gdal.GA_Update)
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_effect_nodata); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygeoprocessing\routing\routing_core.pyx":1328
 *     pygeoprocessing.new_raster_from_base_uri(
 *         sink_pixels_uri, effect_uri, 'GTiff', effect_nodata,
 *         gdal.GDT_Float32, fill_value=effect_nodata)             # <<<<<<<<<<<<<<
 *     effect_dataset = gdal.Open(effect_uri, gdal.GA_Update)
 *     effect_band = effect_dataset.GetRasterBand(1)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GDT_Float32); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1326
 * 
 *     cdef double effect_nodata = -1.0
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         sink_pixels_uri, effect_uri, 'GTiff', effect_nodata,
 *         gdal.GDT_Float32, fill_value=effect_nodata)
 */
  __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_sink_pixels_uri);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_sink_pixels_uri);
  __Pyx_GIVEREF(__pyx_v_sink_pixels_uri);
  __Pyx_INCREF(__pyx_v_effect_uri);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_effect_uri);
  __Pyx_GIVEREF(__pyx_v_effect_uri);
  __Pyx_INCREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_GTiff);
  __Pyx_GIVEREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":1328
 *     pygeoprocessing.new_raster_from_base_uri(
 *         sink_pixels_uri, effect_uri, 'GTiff', effect_nodata,
 *         gdal.GDT_Float32, fill_value=effect_nodata)             # <<<<<<<<<<<<<<
 *     effect_dataset = gdal.Open(effect_uri, gdal.GA_Update)
 *     effect_band = effect_dataset.GetRasterBand(1)
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_effect_nodata); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_fill_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1326
 * 
 *     cdef double effect_nodata = -1.0
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         sink_pixels_uri, effect_uri, 'GTiff', effect_nodata,
 *         gdal.GDT_Float32, fill_value=effect_nodata)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1329
 *         sink_pixels_uri, effect_uri, 'GTiff', effect_nodata,
 *         gdal.GDT_Float32, fill_value=effect_nodata)
 *     effect_dataset = gdal.Open(effect_uri, gdal.GA_Update)             # <<<<<<<<<<<<<<
 *     effect_band = effect_dataset.GetRasterBand(1)
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Open); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_10 = 1;
    }
  }
  __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_INCREF(__pyx_v_effect_uri);
  PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_v_effect_uri);
  __Pyx_GIVEREF(__pyx_v_effect_uri);
  PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_effect_dataset = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1330
 *         gdal.GDT_Float32, fill_value=effect_nodata)
 *     effect_dataset = gdal.Open(effect_uri, gdal.GA_Update)
 *     effect_band = effect_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     #center point of global index
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_effect_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_effect_band = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1345
 *     #define all the caches
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] sink_pixels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] export_rate_block = numpy.zeros(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1346
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] sink_pixels_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] export_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = PyTuple_New(4); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_11 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1345
 *     #define all the caches
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] sink_pixels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] export_rate_block = numpy.zeros(
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  __pyx_t_12 = 0;
  __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);

  /* "pygeoprocessing\routing\routing_core.pyx":1346
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] sink_pixels_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] export_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_dtype, __pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1345
 *     #define all the caches
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] sink_pixels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] export_rate_block = numpy.zeros(
 */
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_11);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn_npy_int32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_sink_pixels_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_sink_pixels_block.diminfo[0].strides = __pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sink_pixels_block.diminfo[0].shape = __pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_sink_pixels_block.diminfo[1].strides = __pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_sink_pixels_block.diminfo[1].shape = __pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_sink_pixels_block.diminfo[2].strides = __pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_sink_pixels_block.diminfo[2].shape = __pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_sink_pixels_block.diminfo[3].strides = __pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_sink_pixels_block.diminfo[3].shape = __pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_13 = 0;
  __pyx_v_sink_pixels_block = ((PyArrayObject *)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1347
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] sink_pixels_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] export_rate_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_zeros); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1348
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] export_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 */
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_11 = 0;
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1347
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] sink_pixels_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] export_rate_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pygeoprocessing\routing\routing_core.pyx":1348
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] export_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1347
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] sink_pixels_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] export_rate_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_export_rate_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_export_rate_block.diminfo[0].strides = __pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_export_rate_block.diminfo[0].shape = __pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_export_rate_block.diminfo[1].strides = __pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_export_rate_block.diminfo[1].shape = __pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_export_rate_block.diminfo[2].strides = __pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_export_rate_block.diminfo[2].shape = __pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_export_rate_block.diminfo[3].strides = __pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_export_rate_block.diminfo[3].shape = __pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_14 = 0;
  __pyx_v_export_rate_block = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1349
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] export_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1350
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = PyTuple_New(4); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_12 = 0;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1349
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] export_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_t_11 = 0;
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);

  /* "pygeoprocessing\routing\routing_core.pyx":1350
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_int8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_dtype, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1349
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] export_rate_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn_npy_int8, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_outflow_direction_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_outflow_direction_block.diminfo[0].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_outflow_direction_block.diminfo[0].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_outflow_direction_block.diminfo[1].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_outflow_direction_block.diminfo[1].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_outflow_direction_block.diminfo[2].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_outflow_direction_block.diminfo[2].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_outflow_direction_block.diminfo[3].strides = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_outflow_direction_block.diminfo[3].shape = __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_15 = 0;
  __pyx_v_outflow_direction_block = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1351
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] out_block = numpy.zeros(
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1352
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] out_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_12 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1351
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] out_block = numpy.zeros(
 */
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":1352
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] out_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1351
 *     cdef numpy.ndarray[numpy.npy_int8, ndim=4] outflow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] out_block = numpy.zeros(
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_12, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_16 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_outflow_weights_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_outflow_weights_block.diminfo[0].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_outflow_weights_block.diminfo[0].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_outflow_weights_block.diminfo[1].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_outflow_weights_block.diminfo[1].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_outflow_weights_block.diminfo[2].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_outflow_weights_block.diminfo[2].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_outflow_weights_block.diminfo[3].strides = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_outflow_weights_block.diminfo[3].shape = __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_16 = 0;
  __pyx_v_outflow_weights_block = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1353
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] out_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] effect_block = numpy.zeros(
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1354
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] out_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] effect_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_12 = 0;
  __pyx_t_11 = 0;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1353
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] out_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] effect_block = numpy.zeros(
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygeoprocessing\routing\routing_core.pyx":1354
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] out_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] effect_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_float32); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1353
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] out_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] effect_block = numpy.zeros(
 */
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_12) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_12, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_17 = ((PyArrayObject *)__pyx_t_12);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_out_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_17, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_out_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_out_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_out_block.diminfo[0].strides = __pyx_pybuffernd_out_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_out_block.diminfo[0].shape = __pyx_pybuffernd_out_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_out_block.diminfo[1].strides = __pyx_pybuffernd_out_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_out_block.diminfo[1].shape = __pyx_pybuffernd_out_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_out_block.diminfo[2].strides = __pyx_pybuffernd_out_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_out_block.diminfo[2].shape = __pyx_pybuffernd_out_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_out_block.diminfo[3].strides = __pyx_pybuffernd_out_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_out_block.diminfo[3].shape = __pyx_pybuffernd_out_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_17 = 0;
  __pyx_v_out_block = ((PyArrayObject *)__pyx_t_12);
  __pyx_t_12 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1355
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] out_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] effect_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 */
  __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1356
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] effect_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 *     block_list = [sink_pixels_block, export_rate_block, outflow_direction_block, outflow_weights_block, effect_block]
 */
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_t_12 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_11 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1355
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] out_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] effect_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 */
  __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygeoprocessing\routing\routing_core.pyx":1356
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] effect_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 *     block_list = [sink_pixels_block, export_rate_block, outflow_direction_block, outflow_weights_block, effect_block]
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1355
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] out_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] effect_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_18 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_effect_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_18, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_effect_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_effect_block.diminfo[0].strides = __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_effect_block.diminfo[0].shape = __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_effect_block.diminfo[1].strides = __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_effect_block.diminfo[1].shape = __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_effect_block.diminfo[2].strides = __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_effect_block.diminfo[2].shape = __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_effect_block.diminfo[3].strides = __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_effect_block.diminfo[3].shape = __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_18 = 0;
  __pyx_v_effect_block = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1358
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 *     block_list = [sink_pixels_block, export_rate_block, outflow_direction_block, outflow_weights_block, effect_block]             # <<<<<<<<<<<<<<
 *     band_list = [sink_pixels_band, export_rate_band, outflow_direction_band, outflow_weights_band, effect_band]
 *     update_list = [False, False, False, False, True]
 */
  __pyx_t_2 = PyList_New(5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_sink_pixels_block));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_sink_pixels_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_sink_pixels_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_export_rate_block));
  PyList_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_export_rate_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_export_rate_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_outflow_direction_block));
  PyList_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_outflow_direction_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_outflow_direction_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_outflow_weights_block));
  PyList_SET_ITEM(__pyx_t_2, 3, ((PyObject *)__pyx_v_outflow_weights_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_outflow_weights_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_effect_block));
  PyList_SET_ITEM(__pyx_t_2, 4, ((PyObject *)__pyx_v_effect_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_effect_block));
  __pyx_v_block_list = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1359
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 *     block_list = [sink_pixels_block, export_rate_block, outflow_direction_block, outflow_weights_block, effect_block]
 *     band_list = [sink_pixels_band, export_rate_band, outflow_direction_band, outflow_weights_band, effect_band]             # <<<<<<<<<<<<<<
 *     update_list = [False, False, False, False, True]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 */
  __pyx_t_2 = PyList_New(5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_sink_pixels_band);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_sink_pixels_band);
  __Pyx_GIVEREF(__pyx_v_sink_pixels_band);
  __Pyx_INCREF(__pyx_v_export_rate_band);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_v_export_rate_band);
  __Pyx_GIVEREF(__pyx_v_export_rate_band);
  __Pyx_INCREF(__pyx_v_outflow_direction_band);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_v_outflow_direction_band);
  __Pyx_GIVEREF(__pyx_v_outflow_direction_band);
  __Pyx_INCREF(__pyx_v_outflow_weights_band);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_v_outflow_weights_band);
  __Pyx_GIVEREF(__pyx_v_outflow_weights_band);
  __Pyx_INCREF(__pyx_v_effect_band);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_v_effect_band);
  __Pyx_GIVEREF(__pyx_v_effect_band);
  __pyx_v_band_list = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1360
 *     block_list = [sink_pixels_block, export_rate_block, outflow_direction_block, outflow_weights_block, effect_block]
 *     band_list = [sink_pixels_band, export_rate_band, outflow_direction_band, outflow_weights_band, effect_band]
 *     update_list = [False, False, False, False, True]             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_2 = PyList_New(5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_2, 0, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_2, 1, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_2, 2, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_2, 3, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_True);
  PyList_SET_ITEM(__pyx_t_2, 4, Py_True);
  __Pyx_GIVEREF(Py_True);
  __pyx_v_update_list = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1361
 *     band_list = [sink_pixels_band, export_rate_band, outflow_direction_band, outflow_weights_band, effect_band]
 *     update_list = [False, False, False, False, True]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_t_2 = 0;
  __pyx_t_11 = 0;
  __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_byte); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_11, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_19 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer, (PyObject*)__pyx_t_19, &__Pyx_TypeInfo_nn_npy_byte, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_cache_dirty = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_cache_dirty.diminfo[0].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cache_dirty.diminfo[0].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cache_dirty.diminfo[1].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cache_dirty.diminfo[1].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_19 = 0;
  __pyx_v_cache_dirty = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1364
 * 
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size, block_col_size, band_list, block_list, update_list, cache_dirty)             # <<<<<<<<<<<<<<
 * 
 *     cdef float outflow_weight, neighbor_outflow_weight
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_n_rows); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);

  /* "pygeoprocessing\routing\routing_core.pyx":1363
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 *     cdef BlockCache block_cache = BlockCache(             # <<<<<<<<<<<<<<
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size, block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 */
  __pyx_t_20 = PyTuple_New(10); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_20, 2, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_20, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_20, 4, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_20, 5, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_band_list);
  PyTuple_SET_ITEM(__pyx_t_20, 6, __pyx_v_band_list);
  __Pyx_GIVEREF(__pyx_v_band_list);
  __Pyx_INCREF(__pyx_v_block_list);
  PyTuple_SET_ITEM(__pyx_t_20, 7, __pyx_v_block_list);
  __Pyx_GIVEREF(__pyx_v_block_list);
  __Pyx_INCREF(__pyx_v_update_list);
  PyTuple_SET_ITEM(__pyx_t_20, 8, __pyx_v_update_list);
  __Pyx_GIVEREF(__pyx_v_update_list);
  __Pyx_INCREF(((PyObject *)__pyx_v_cache_dirty));
  PyTuple_SET_ITEM(__pyx_t_20, 9, ((PyObject *)__pyx_v_cache_dirty));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cache_dirty));
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_11 = 0;
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache)), __pyx_t_20, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_v_block_cache = ((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_t_12);
  __pyx_t_12 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1374
 *     #    5 6 7
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]             # <<<<<<<<<<<<<<
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]
 *     cdef int *inflow_offsets = [4, 5, 6, 7, 0, 1, 2, 3]
 */
  __pyx_t_21[0] = 0;
  __pyx_t_21[1] = -1;
  __pyx_t_21[2] = -1;
  __pyx_t_21[3] = -1;
  __pyx_t_21[4] = 0;
  __pyx_t_21[5] = 1;
  __pyx_t_21[6] = 1;
  __pyx_t_21[7] = 1;
  __pyx_v_row_offsets = __pyx_t_21;

  /* "pygeoprocessing\routing\routing_core.pyx":1375
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]             # <<<<<<<<<<<<<<
 *     cdef int *inflow_offsets = [4, 5, 6, 7, 0, 1, 2, 3]
 *     cdef int flat_index
 */
  __pyx_t_22[0] = 1;
  __pyx_t_22[1] = 1;
  __pyx_t_22[2] = 0;
  __pyx_t_22[3] = -1;
  __pyx_t_22[4] = -1;
  __pyx_t_22[5] = -1;
  __pyx_t_22[6] = 0;
  __pyx_t_22[7] = 1;
  __pyx_v_col_offsets = __pyx_t_22;

  /* "pygeoprocessing\routing\routing_core.pyx":1376
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]
 *     cdef int *inflow_offsets = [4, 5, 6, 7, 0, 1, 2, 3]             # <<<<<<<<<<<<<<
 *     cdef int flat_index
 *     cdef deque[int] process_queue
 */
  __pyx_t_23[0] = 4;
  __pyx_t_23[1] = 5;
  __pyx_t_23[2] = 6;
  __pyx_t_23[3] = 7;
  __pyx_t_23[4] = 0;
  __pyx_t_23[5] = 1;
  __pyx_t_23[6] = 2;
  __pyx_t_23[7] = 3;
  __pyx_v_inflow_offsets = __pyx_t_23;

  /* "pygeoprocessing\routing\routing_core.pyx":1380
 *     cdef deque[int] process_queue
 *     #Queue the sinks
 *     for global_block_row in xrange(int(numpy.ceil(float(n_rows) / block_row_size))):             # <<<<<<<<<<<<<<
 *         for global_block_col in xrange(int(numpy.ceil(float(n_cols) / block_col_size))):
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 */
  __pyx_t_20 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_ceil); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  if (unlikely(__pyx_v_block_row_size == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_20 = PyFloat_FromDouble((((double)__pyx_v_n_rows) / __pyx_v_block_row_size)); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_20); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_GOTREF(__pyx_t_12);
  } else {
    __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_20);
    __Pyx_GIVEREF(__pyx_t_20);
    __pyx_t_20 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_11, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Int(__pyx_t_12); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_24 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_24 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_24; __pyx_t_9+=1) {
    __pyx_v_global_block_row = __pyx_t_9;

    /* "pygeoprocessing\routing\routing_core.pyx":1381
 *     #Queue the sinks
 *     for global_block_row in xrange(int(numpy.ceil(float(n_rows) / block_row_size))):
 *         for global_block_col in xrange(int(numpy.ceil(float(n_cols) / block_col_size))):             # <<<<<<<<<<<<<<
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):
 */
    __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_ceil); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(__pyx_v_block_col_size == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_12 = PyFloat_FromDouble((((double)__pyx_v_n_cols) / __pyx_v_block_col_size)); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_20 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_20)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_20);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    if (!__pyx_t_20) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_20); __Pyx_GIVEREF(__pyx_t_20); __pyx_t_20 = NULL;
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_12);
      __pyx_t_12 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_25 = __Pyx_PyInt_As_long(__pyx_t_11); if (unlikely((__pyx_t_25 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_25; __pyx_t_5+=1) {
      __pyx_v_global_block_col = __pyx_t_5;

      /* "pygeoprocessing\routing\routing_core.pyx":1382
 *     for global_block_row in xrange(int(numpy.ceil(float(n_rows) / block_row_size))):
 *         for global_block_col in xrange(int(numpy.ceil(float(n_cols) / block_col_size))):
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):             # <<<<<<<<<<<<<<
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):
 *                     block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)
 */
      __pyx_t_26 = __pyx_v_n_rows;
      __pyx_t_27 = ((__pyx_v_global_block_row + 1) * __pyx_v_block_row_size);
      if (((__pyx_t_26 < __pyx_t_27) != 0)) {
        __pyx_t_28 = __pyx_t_26;
      } else {
        __pyx_t_28 = __pyx_t_27;
      }
      __pyx_t_27 = __pyx_t_28;
      for (__pyx_t_26 = (__pyx_v_global_block_row * __pyx_v_block_row_size); __pyx_t_26 < __pyx_t_27; __pyx_t_26+=1) {
        __pyx_v_global_row = __pyx_t_26;

        /* "pygeoprocessing\routing\routing_core.pyx":1383
 *         for global_block_col in xrange(int(numpy.ceil(float(n_cols) / block_col_size))):
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):             # <<<<<<<<<<<<<<
 *                     block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)
 *                     if sink_pixels_block[row_index, col_index, row_block_offset, col_block_offset] == 1:
 */
        __pyx_t_29 = __pyx_v_n_cols;
        __pyx_t_28 = ((__pyx_v_global_block_col + 1) * __pyx_v_block_col_size);
        if (((__pyx_t_29 < __pyx_t_28) != 0)) {
          __pyx_t_30 = __pyx_t_29;
        } else {
          __pyx_t_30 = __pyx_t_28;
        }
        __pyx_t_28 = __pyx_t_30;
        for (__pyx_t_29 = (__pyx_v_global_block_col * __pyx_v_block_col_size); __pyx_t_29 < __pyx_t_28; __pyx_t_29+=1) {
          __pyx_v_global_col = __pyx_t_29;

          /* "pygeoprocessing\routing\routing_core.pyx":1384
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):
 *                     block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)             # <<<<<<<<<<<<<<
 *                     if sink_pixels_block[row_index, col_index, row_block_offset, col_block_offset] == 1:
 *                         effect_block[row_index, col_index, row_block_offset, col_block_offset] = 1.0
 */
          ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_global_row, __pyx_v_global_col, (&__pyx_v_row_index), (&__pyx_v_col_index), (&__pyx_v_row_block_offset), (&__pyx_v_col_block_offset));

          /* "pygeoprocessing\routing\routing_core.pyx":1385
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):
 *                     block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)
 *                     if sink_pixels_block[row_index, col_index, row_block_offset, col_block_offset] == 1:             # <<<<<<<<<<<<<<
 *                         effect_block[row_index, col_index, row_block_offset, col_block_offset] = 1.0
 *                         cache_dirty[row_index, col_index] = 1
 */
          __pyx_t_31 = __pyx_v_row_index;
          __pyx_t_32 = __pyx_v_col_index;
          __pyx_t_33 = __pyx_v_row_block_offset;
          __pyx_t_34 = __pyx_v_col_block_offset;
          __pyx_t_35 = (((*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer.buf, __pyx_t_31, __pyx_pybuffernd_sink_pixels_block.diminfo[0].strides, __pyx_t_32, __pyx_pybuffernd_sink_pixels_block.diminfo[1].strides, __pyx_t_33, __pyx_pybuffernd_sink_pixels_block.diminfo[2].strides, __pyx_t_34, __pyx_pybuffernd_sink_pixels_block.diminfo[3].strides)) == 1) != 0);
          if (__pyx_t_35) {

            /* "pygeoprocessing\routing\routing_core.pyx":1386
 *                     block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)
 *                     if sink_pixels_block[row_index, col_index, row_block_offset, col_block_offset] == 1:
 *                         effect_block[row_index, col_index, row_block_offset, col_block_offset] = 1.0             # <<<<<<<<<<<<<<
 *                         cache_dirty[row_index, col_index] = 1
 *                         process_queue.push_back(global_row * n_cols + global_col)
 */
            __pyx_t_36 = __pyx_v_row_index;
            __pyx_t_37 = __pyx_v_col_index;
            __pyx_t_38 = __pyx_v_row_block_offset;
            __pyx_t_39 = __pyx_v_col_block_offset;
            *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.buf, __pyx_t_36, __pyx_pybuffernd_effect_block.diminfo[0].strides, __pyx_t_37, __pyx_pybuffernd_effect_block.diminfo[1].strides, __pyx_t_38, __pyx_pybuffernd_effect_block.diminfo[2].strides, __pyx_t_39, __pyx_pybuffernd_effect_block.diminfo[3].strides) = 1.0;

            /* "pygeoprocessing\routing\routing_core.pyx":1387
 *                     if sink_pixels_block[row_index, col_index, row_block_offset, col_block_offset] == 1:
 *                         effect_block[row_index, col_index, row_block_offset, col_block_offset] = 1.0
 *                         cache_dirty[row_index, col_index] = 1             # <<<<<<<<<<<<<<
 *                         process_queue.push_back(global_row * n_cols + global_col)
 * 
 */
            __pyx_t_40 = __pyx_v_row_index;
            __pyx_t_41 = __pyx_v_col_index;
            *__Pyx_BufPtrStrided2d(npy_byte *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_40, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_41, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;

            /* "pygeoprocessing\routing\routing_core.pyx":1388
 *                         effect_block[row_index, col_index, row_block_offset, col_block_offset] = 1.0
 *                         cache_dirty[row_index, col_index] = 1
 *                         process_queue.push_back(global_row * n_cols + global_col)             # <<<<<<<<<<<<<<
 * 
 *     while process_queue.size() > 0:
 */
            __pyx_v_process_queue.push_back(((__pyx_v_global_row * __pyx_v_n_cols) + __pyx_v_global_col));
            goto __pyx_L13;
          }
          __pyx_L13:;
        }
      }
    }
  }

  /* "pygeoprocessing\routing\routing_core.pyx":1390
 *                         process_queue.push_back(global_row * n_cols + global_col)
 * 
 *     while process_queue.size() > 0:             # <<<<<<<<<<<<<<
 *         flat_index = process_queue.front()
 *         process_queue.pop_front()
 */
  while (1) {
    __pyx_t_35 = ((__pyx_v_process_queue.size() > 0) != 0);
    if (!__pyx_t_35) break;

    /* "pygeoprocessing\routing\routing_core.pyx":1391
 * 
 *     while process_queue.size() > 0:
 *         flat_index = process_queue.front()             # <<<<<<<<<<<<<<
 *         process_queue.pop_front()
 *         with cython.cdivision(True):
 */
    __pyx_v_flat_index = __pyx_v_process_queue.front();

    /* "pygeoprocessing\routing\routing_core.pyx":1392
 *     while process_queue.size() > 0:
 *         flat_index = process_queue.front()
 *         process_queue.pop_front()             # <<<<<<<<<<<<<<
 *         with cython.cdivision(True):
 *             global_row = flat_index / n_cols
 */
    __pyx_v_process_queue.pop_front();

    /* "pygeoprocessing\routing\routing_core.pyx":1394
 *         process_queue.pop_front()
 *         with cython.cdivision(True):
 *             global_row = flat_index / n_cols             # <<<<<<<<<<<<<<
 *             global_col = flat_index % n_cols
 * 
 */
    __pyx_v_global_row = (__pyx_v_flat_index / __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":1395
 *         with cython.cdivision(True):
 *             global_row = flat_index / n_cols
 *             global_col = flat_index % n_cols             # <<<<<<<<<<<<<<
 * 
 *         block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)
 */
    __pyx_v_global_col = (__pyx_v_flat_index % __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":1397
 *             global_col = flat_index % n_cols
 * 
 *         block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)             # <<<<<<<<<<<<<<
 *         if export_rate_block[row_index, col_index, row_block_offset, col_block_offset] == export_rate_nodata:
 *             continue
 */
    ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_global_row, __pyx_v_global_col, (&__pyx_v_row_index), (&__pyx_v_col_index), (&__pyx_v_row_block_offset), (&__pyx_v_col_block_offset));

    /* "pygeoprocessing\routing\routing_core.pyx":1398
 * 
 *         block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)
 *         if export_rate_block[row_index, col_index, row_block_offset, col_block_offset] == export_rate_nodata:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    __pyx_t_9 = __pyx_v_row_index;
    __pyx_t_5 = __pyx_v_col_index;
    __pyx_t_26 = __pyx_v_row_block_offset;
    __pyx_t_29 = __pyx_v_col_block_offset;
    __pyx_t_35 = (((*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_export_rate_block.diminfo[0].strides, __pyx_t_5, __pyx_pybuffernd_export_rate_block.diminfo[1].strides, __pyx_t_26, __pyx_pybuffernd_export_rate_block.diminfo[2].strides, __pyx_t_29, __pyx_pybuffernd_export_rate_block.diminfo[3].strides)) == __pyx_v_export_rate_nodata) != 0);
    if (__pyx_t_35) {

      /* "pygeoprocessing\routing\routing_core.pyx":1399
 *         block_cache.update_cache(global_row, global_col, &row_index, &col_index, &row_block_offset, &col_block_offset)
 *         if export_rate_block[row_index, col_index, row_block_offset, col_block_offset] == export_rate_nodata:
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         #if the outflow weight is nodata, then not a valid pixel
 */
      goto __pyx_L14_continue;
    }

    /* "pygeoprocessing\routing\routing_core.pyx":1402
 * 
 *         #if the outflow weight is nodata, then not a valid pixel
 *         outflow_weight = outflow_weights_block[row_index, col_index, row_block_offset, col_block_offset]             # <<<<<<<<<<<<<<
 *         if outflow_weight == outflow_weights_nodata:
 *             continue
 */
    __pyx_t_42 = __pyx_v_row_index;
    __pyx_t_43 = __pyx_v_col_index;
    __pyx_t_44 = __pyx_v_row_block_offset;
    __pyx_t_45 = __pyx_v_col_block_offset;
    __pyx_v_outflow_weight = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.buf, __pyx_t_42, __pyx_pybuffernd_outflow_weights_block.diminfo[0].strides, __pyx_t_43, __pyx_pybuffernd_outflow_weights_block.diminfo[1].strides, __pyx_t_44, __pyx_pybuffernd_outflow_weights_block.diminfo[2].strides, __pyx_t_45, __pyx_pybuffernd_outflow_weights_block.diminfo[3].strides));

    /* "pygeoprocessing\routing\routing_core.pyx":1403
 *         #if the outflow weight is nodata, then not a valid pixel
 *         outflow_weight = outflow_weights_block[row_index, col_index, row_block_offset, col_block_offset]
 *         if outflow_weight == outflow_weights_nodata:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    __pyx_t_35 = ((__pyx_v_outflow_weight == __pyx_v_outflow_weights_nodata) != 0);
    if (__pyx_t_35) {

      /* "pygeoprocessing\routing\routing_core.pyx":1404
 *         outflow_weight = outflow_weights_block[row_index, col_index, row_block_offset, col_block_offset]
 *         if outflow_weight == outflow_weights_nodata:
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         for neighbor_index in range(8):
 */
      goto __pyx_L14_continue;
    }

    /* "pygeoprocessing\routing\routing_core.pyx":1406
 *             continue
 * 
 *         for neighbor_index in range(8):             # <<<<<<<<<<<<<<
 *             neighbor_row = global_row + row_offsets[neighbor_index]
 *             neighbor_col = global_col + col_offsets[neighbor_index]
 */
    for (__pyx_t_24 = 0; __pyx_t_24 < 8; __pyx_t_24+=1) {
      __pyx_v_neighbor_index = __pyx_t_24;

      /* "pygeoprocessing\routing\routing_core.pyx":1407
 * 
 *         for neighbor_index in range(8):
 *             neighbor_row = global_row + row_offsets[neighbor_index]             # <<<<<<<<<<<<<<
 *             neighbor_col = global_col + col_offsets[neighbor_index]
 *             if neighbor_row < 0 or neighbor_row >= n_rows or neighbor_col < 0 or neighbor_col >= n_cols:
 */
      __pyx_v_neighbor_row = (__pyx_v_global_row + (__pyx_v_row_offsets[__pyx_v_neighbor_index]));

      /* "pygeoprocessing\routing\routing_core.pyx":1408
 *         for neighbor_index in range(8):
 *             neighbor_row = global_row + row_offsets[neighbor_index]
 *             neighbor_col = global_col + col_offsets[neighbor_index]             # <<<<<<<<<<<<<<
 *             if neighbor_row < 0 or neighbor_row >= n_rows or neighbor_col < 0 or neighbor_col >= n_cols:
 *                 #out of bounds
 */
      __pyx_v_neighbor_col = (__pyx_v_global_col + (__pyx_v_col_offsets[__pyx_v_neighbor_index]));

      /* "pygeoprocessing\routing\routing_core.pyx":1409
 *             neighbor_row = global_row + row_offsets[neighbor_index]
 *             neighbor_col = global_col + col_offsets[neighbor_index]
 *             if neighbor_row < 0 or neighbor_row >= n_rows or neighbor_col < 0 or neighbor_col >= n_cols:             # <<<<<<<<<<<<<<
 *                 #out of bounds
 *                 continue
 */
      __pyx_t_46 = ((__pyx_v_neighbor_row < 0) != 0);
      if (!__pyx_t_46) {
      } else {
        __pyx_t_35 = __pyx_t_46;
        goto __pyx_L21_bool_binop_done;
      }
      __pyx_t_46 = ((__pyx_v_neighbor_row >= __pyx_v_n_rows) != 0);
      if (!__pyx_t_46) {
      } else {
        __pyx_t_35 = __pyx_t_46;
        goto __pyx_L21_bool_binop_done;
      }
      __pyx_t_46 = ((__pyx_v_neighbor_col < 0) != 0);
      if (!__pyx_t_46) {
      } else {
        __pyx_t_35 = __pyx_t_46;
        goto __pyx_L21_bool_binop_done;
      }
      __pyx_t_46 = ((__pyx_v_neighbor_col >= __pyx_v_n_cols) != 0);
      __pyx_t_35 = __pyx_t_46;
      __pyx_L21_bool_binop_done:;
      if (__pyx_t_35) {

        /* "pygeoprocessing\routing\routing_core.pyx":1411
 *             if neighbor_row < 0 or neighbor_row >= n_rows or neighbor_col < 0 or neighbor_col >= n_cols:
 *                 #out of bounds
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             block_cache.update_cache(neighbor_row, neighbor_col, &neighbor_row_index, &neighbor_col_index, &neighbor_row_block_offset, &neighbor_col_block_offset)
 */
        goto __pyx_L18_continue;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":1413
 *                 continue
 * 
 *             block_cache.update_cache(neighbor_row, neighbor_col, &neighbor_row_index, &neighbor_col_index, &neighbor_row_block_offset, &neighbor_col_block_offset)             # <<<<<<<<<<<<<<
 * 
 *             if sink_pixels_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset] == 1:
 */
      ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_neighbor_row, __pyx_v_neighbor_col, (&__pyx_v_neighbor_row_index), (&__pyx_v_neighbor_col_index), (&__pyx_v_neighbor_row_block_offset), (&__pyx_v_neighbor_col_block_offset));

      /* "pygeoprocessing\routing\routing_core.pyx":1415
 *             block_cache.update_cache(neighbor_row, neighbor_col, &neighbor_row_index, &neighbor_col_index, &neighbor_row_block_offset, &neighbor_col_block_offset)
 * 
 *             if sink_pixels_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset] == 1:             # <<<<<<<<<<<<<<
 *                 #it's already a sink
 *                 continue
 */
      __pyx_t_47 = __pyx_v_neighbor_row_index;
      __pyx_t_48 = __pyx_v_neighbor_col_index;
      __pyx_t_49 = __pyx_v_neighbor_row_block_offset;
      __pyx_t_50 = __pyx_v_neighbor_col_block_offset;
      __pyx_t_35 = (((*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer.buf, __pyx_t_47, __pyx_pybuffernd_sink_pixels_block.diminfo[0].strides, __pyx_t_48, __pyx_pybuffernd_sink_pixels_block.diminfo[1].strides, __pyx_t_49, __pyx_pybuffernd_sink_pixels_block.diminfo[2].strides, __pyx_t_50, __pyx_pybuffernd_sink_pixels_block.diminfo[3].strides)) == 1) != 0);
      if (__pyx_t_35) {

        /* "pygeoprocessing\routing\routing_core.pyx":1417
 *             if sink_pixels_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset] == 1:
 *                 #it's already a sink
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             neighbor_outflow_direction = (
 */
        goto __pyx_L18_continue;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":1420
 * 
 *             neighbor_outflow_direction = (
 *                 outflow_direction_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset])             # <<<<<<<<<<<<<<
 *             #if the neighbor is no data, don't try to set that
 *             if neighbor_outflow_direction == outflow_direction_nodata:
 */
      __pyx_t_51 = __pyx_v_neighbor_row_index;
      __pyx_t_52 = __pyx_v_neighbor_col_index;
      __pyx_t_53 = __pyx_v_neighbor_row_block_offset;
      __pyx_t_54 = __pyx_v_neighbor_col_block_offset;
      __pyx_v_neighbor_outflow_direction = (*__Pyx_BufPtrStrided4d(npy_int8 *, __pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer.buf, __pyx_t_51, __pyx_pybuffernd_outflow_direction_block.diminfo[0].strides, __pyx_t_52, __pyx_pybuffernd_outflow_direction_block.diminfo[1].strides, __pyx_t_53, __pyx_pybuffernd_outflow_direction_block.diminfo[2].strides, __pyx_t_54, __pyx_pybuffernd_outflow_direction_block.diminfo[3].strides));

      /* "pygeoprocessing\routing\routing_core.pyx":1422
 *                 outflow_direction_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset])
 *             #if the neighbor is no data, don't try to set that
 *             if neighbor_outflow_direction == outflow_direction_nodata:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_35 = ((__pyx_v_neighbor_outflow_direction == __pyx_v_outflow_direction_nodata) != 0);
      if (__pyx_t_35) {

        /* "pygeoprocessing\routing\routing_core.pyx":1423
 *             #if the neighbor is no data, don't try to set that
 *             if neighbor_outflow_direction == outflow_direction_nodata:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             neighbor_outflow_weight = (
 */
        goto __pyx_L18_continue;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":1426
 * 
 *             neighbor_outflow_weight = (
 *                 outflow_weights_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset])             # <<<<<<<<<<<<<<
 *             #if the neighbor is no data, don't try to set that
 *             if neighbor_outflow_weight == outflow_direction_nodata:
 */
      __pyx_t_55 = __pyx_v_neighbor_row_index;
      __pyx_t_56 = __pyx_v_neighbor_col_index;
      __pyx_t_57 = __pyx_v_neighbor_row_block_offset;
      __pyx_t_58 = __pyx_v_neighbor_col_block_offset;
      __pyx_v_neighbor_outflow_weight = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer.buf, __pyx_t_55, __pyx_pybuffernd_outflow_weights_block.diminfo[0].strides, __pyx_t_56, __pyx_pybuffernd_outflow_weights_block.diminfo[1].strides, __pyx_t_57, __pyx_pybuffernd_outflow_weights_block.diminfo[2].strides, __pyx_t_58, __pyx_pybuffernd_outflow_weights_block.diminfo[3].strides));

      /* "pygeoprocessing\routing\routing_core.pyx":1428
 *                 outflow_weights_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset])
 *             #if the neighbor is no data, don't try to set that
 *             if neighbor_outflow_weight == outflow_direction_nodata:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_35 = ((__pyx_v_neighbor_outflow_weight == __pyx_v_outflow_direction_nodata) != 0);
      if (__pyx_t_35) {

        /* "pygeoprocessing\routing\routing_core.pyx":1429
 *             #if the neighbor is no data, don't try to set that
 *             if neighbor_outflow_weight == outflow_direction_nodata:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             it_flows_here = False
 */
        goto __pyx_L18_continue;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":1431
 *                 continue
 * 
 *             it_flows_here = False             # <<<<<<<<<<<<<<
 *             if neighbor_outflow_direction == inflow_offsets[neighbor_index]:
 *                 #the neighbor flows into this cell
 */
      __pyx_v_it_flows_here = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":1432
 * 
 *             it_flows_here = False
 *             if neighbor_outflow_direction == inflow_offsets[neighbor_index]:             # <<<<<<<<<<<<<<
 *                 #the neighbor flows into this cell
 *                 it_flows_here = True
 */
      __pyx_t_35 = ((__pyx_v_neighbor_outflow_direction == (__pyx_v_inflow_offsets[__pyx_v_neighbor_index])) != 0);
      if (__pyx_t_35) {

        /* "pygeoprocessing\routing\routing_core.pyx":1434
 *             if neighbor_outflow_direction == inflow_offsets[neighbor_index]:
 *                 #the neighbor flows into this cell
 *                 it_flows_here = True             # <<<<<<<<<<<<<<
 * 
 *             if (neighbor_outflow_direction - 1) % 8 == inflow_offsets[neighbor_index]:
 */
        __pyx_v_it_flows_here = 1;
        goto __pyx_L28;
      }
      __pyx_L28:;

      /* "pygeoprocessing\routing\routing_core.pyx":1436
 *                 it_flows_here = True
 * 
 *             if (neighbor_outflow_direction - 1) % 8 == inflow_offsets[neighbor_index]:             # <<<<<<<<<<<<<<
 *                 #the offset neighbor flows into this cell
 *                 it_flows_here = True
 */
      __pyx_t_35 = ((__Pyx_mod_long((__pyx_v_neighbor_outflow_direction - 1), 8) == (__pyx_v_inflow_offsets[__pyx_v_neighbor_index])) != 0);
      if (__pyx_t_35) {

        /* "pygeoprocessing\routing\routing_core.pyx":1438
 *             if (neighbor_outflow_direction - 1) % 8 == inflow_offsets[neighbor_index]:
 *                 #the offset neighbor flows into this cell
 *                 it_flows_here = True             # <<<<<<<<<<<<<<
 *                 neighbor_outflow_weight = 1.0 - neighbor_outflow_weight
 * 
 */
        __pyx_v_it_flows_here = 1;

        /* "pygeoprocessing\routing\routing_core.pyx":1439
 *                 #the offset neighbor flows into this cell
 *                 it_flows_here = True
 *                 neighbor_outflow_weight = 1.0 - neighbor_outflow_weight             # <<<<<<<<<<<<<<
 * 
 *             if it_flows_here:
 */
        __pyx_v_neighbor_outflow_weight = (1.0 - __pyx_v_neighbor_outflow_weight);
        goto __pyx_L29;
      }
      __pyx_L29:;

      /* "pygeoprocessing\routing\routing_core.pyx":1441
 *                 neighbor_outflow_weight = 1.0 - neighbor_outflow_weight
 * 
 *             if it_flows_here:             # <<<<<<<<<<<<<<
 *                 #If we haven't processed that effect yet, set it to 0 and append to the queue
 *                 if effect_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset] == effect_nodata:
 */
      __pyx_t_35 = (__pyx_v_it_flows_here != 0);
      if (__pyx_t_35) {

        /* "pygeoprocessing\routing\routing_core.pyx":1443
 *             if it_flows_here:
 *                 #If we haven't processed that effect yet, set it to 0 and append to the queue
 *                 if effect_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset] == effect_nodata:             # <<<<<<<<<<<<<<
 *                     process_queue.push_back(neighbor_row * n_cols + neighbor_col)
 *                     effect_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset] = 0.0
 */
        __pyx_t_59 = __pyx_v_neighbor_row_index;
        __pyx_t_60 = __pyx_v_neighbor_col_index;
        __pyx_t_61 = __pyx_v_neighbor_row_block_offset;
        __pyx_t_62 = __pyx_v_neighbor_col_block_offset;
        __pyx_t_35 = (((*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.buf, __pyx_t_59, __pyx_pybuffernd_effect_block.diminfo[0].strides, __pyx_t_60, __pyx_pybuffernd_effect_block.diminfo[1].strides, __pyx_t_61, __pyx_pybuffernd_effect_block.diminfo[2].strides, __pyx_t_62, __pyx_pybuffernd_effect_block.diminfo[3].strides)) == __pyx_v_effect_nodata) != 0);
        if (__pyx_t_35) {

          /* "pygeoprocessing\routing\routing_core.pyx":1444
 *                 #If we haven't processed that effect yet, set it to 0 and append to the queue
 *                 if effect_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset] == effect_nodata:
 *                     process_queue.push_back(neighbor_row * n_cols + neighbor_col)             # <<<<<<<<<<<<<<
 *                     effect_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset] = 0.0
 *                     cache_dirty[neighbor_row_index, neighbor_col_index] = 1
 */
          __pyx_v_process_queue.push_back(((__pyx_v_neighbor_row * __pyx_v_n_cols) + __pyx_v_neighbor_col));

          /* "pygeoprocessing\routing\routing_core.pyx":1445
 *                 if effect_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset] == effect_nodata:
 *                     process_queue.push_back(neighbor_row * n_cols + neighbor_col)
 *                     effect_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset] = 0.0             # <<<<<<<<<<<<<<
 *                     cache_dirty[neighbor_row_index, neighbor_col_index] = 1
 * 
 */
          __pyx_t_63 = __pyx_v_neighbor_row_index;
          __pyx_t_64 = __pyx_v_neighbor_col_index;
          __pyx_t_65 = __pyx_v_neighbor_row_block_offset;
          __pyx_t_66 = __pyx_v_neighbor_col_block_offset;
          *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.buf, __pyx_t_63, __pyx_pybuffernd_effect_block.diminfo[0].strides, __pyx_t_64, __pyx_pybuffernd_effect_block.diminfo[1].strides, __pyx_t_65, __pyx_pybuffernd_effect_block.diminfo[2].strides, __pyx_t_66, __pyx_pybuffernd_effect_block.diminfo[3].strides) = 0.0;

          /* "pygeoprocessing\routing\routing_core.pyx":1446
 *                     process_queue.push_back(neighbor_row * n_cols + neighbor_col)
 *                     effect_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset] = 0.0
 *                     cache_dirty[neighbor_row_index, neighbor_col_index] = 1             # <<<<<<<<<<<<<<
 * 
 *                 #the percent of the pixel upstream equals the current percent
 */
          __pyx_t_67 = __pyx_v_neighbor_row_index;
          __pyx_t_68 = __pyx_v_neighbor_col_index;
          *__Pyx_BufPtrStrided2d(npy_byte *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_67, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_68, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;
          goto __pyx_L31;
        }
        __pyx_L31:;

        /* "pygeoprocessing\routing\routing_core.pyx":1451
 *                 #times the percent flow to that pixels times the
 *                 effect_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset] += (
 *                     effect_block[row_index, col_index, row_block_offset, col_block_offset] *             # <<<<<<<<<<<<<<
 *                     neighbor_outflow_weight *
 *                     export_rate_block[row_index, col_index, row_block_offset, col_block_offset])
 */
        __pyx_t_69 = __pyx_v_row_index;
        __pyx_t_70 = __pyx_v_col_index;
        __pyx_t_71 = __pyx_v_row_block_offset;
        __pyx_t_72 = __pyx_v_col_block_offset;

        /* "pygeoprocessing\routing\routing_core.pyx":1453
 *                     effect_block[row_index, col_index, row_block_offset, col_block_offset] *
 *                     neighbor_outflow_weight *
 *                     export_rate_block[row_index, col_index, row_block_offset, col_block_offset])             # <<<<<<<<<<<<<<
 *                 cache_dirty[neighbor_row_index, neighbor_col_index] = 1
 * 
 */
        __pyx_t_73 = __pyx_v_row_index;
        __pyx_t_74 = __pyx_v_col_index;
        __pyx_t_75 = __pyx_v_row_block_offset;
        __pyx_t_76 = __pyx_v_col_block_offset;

        /* "pygeoprocessing\routing\routing_core.pyx":1450
 *                 #the percent of the pixel upstream equals the current percent
 *                 #times the percent flow to that pixels times the
 *                 effect_block[neighbor_row_index, neighbor_col_index, neighbor_row_block_offset, neighbor_col_block_offset] += (             # <<<<<<<<<<<<<<
 *                     effect_block[row_index, col_index, row_block_offset, col_block_offset] *
 *                     neighbor_outflow_weight *
 */
        __pyx_t_77 = __pyx_v_neighbor_row_index;
        __pyx_t_78 = __pyx_v_neighbor_col_index;
        __pyx_t_79 = __pyx_v_neighbor_row_block_offset;
        __pyx_t_80 = __pyx_v_neighbor_col_block_offset;
        *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.buf, __pyx_t_77, __pyx_pybuffernd_effect_block.diminfo[0].strides, __pyx_t_78, __pyx_pybuffernd_effect_block.diminfo[1].strides, __pyx_t_79, __pyx_pybuffernd_effect_block.diminfo[2].strides, __pyx_t_80, __pyx_pybuffernd_effect_block.diminfo[3].strides) += (((*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_effect_block.rcbuffer->pybuffer.buf, __pyx_t_69, __pyx_pybuffernd_effect_block.diminfo[0].strides, __pyx_t_70, __pyx_pybuffernd_effect_block.diminfo[1].strides, __pyx_t_71, __pyx_pybuffernd_effect_block.diminfo[2].strides, __pyx_t_72, __pyx_pybuffernd_effect_block.diminfo[3].strides)) * __pyx_v_neighbor_outflow_weight) * (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer.buf, __pyx_t_73, __pyx_pybuffernd_export_rate_block.diminfo[0].strides, __pyx_t_74, __pyx_pybuffernd_export_rate_block.diminfo[1].strides, __pyx_t_75, __pyx_pybuffernd_export_rate_block.diminfo[2].strides, __pyx_t_76, __pyx_pybuffernd_export_rate_block.diminfo[3].strides)));

        /* "pygeoprocessing\routing\routing_core.pyx":1454
 *                     neighbor_outflow_weight *
 *                     export_rate_block[row_index, col_index, row_block_offset, col_block_offset])
 *                 cache_dirty[neighbor_row_index, neighbor_col_index] = 1             # <<<<<<<<<<<<<<
 * 
 *     block_cache.flush_cache()
 */
        __pyx_t_81 = __pyx_v_neighbor_row_index;
        __pyx_t_82 = __pyx_v_neighbor_col_index;
        *__Pyx_BufPtrStrided2d(npy_byte *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_81, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_82, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;
        goto __pyx_L30;
      }
      __pyx_L30:;
      __pyx_L18_continue:;
    }
    __pyx_L14_continue:;
  }

  /* "pygeoprocessing\routing\routing_core.pyx":1456
 *                 cache_dirty[neighbor_row_index, neighbor_col_index] = 1
 * 
 *     block_cache.flush_cache()             # <<<<<<<<<<<<<<
 *     cdef time_t end_time
 *     time(&end_time)
 */
  ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->flush_cache(__pyx_v_block_cache);

  /* "pygeoprocessing\routing\routing_core.pyx":1458
 *     block_cache.flush_cache()
 *     cdef time_t end_time
 *     time(&end_time)             # <<<<<<<<<<<<<<
 *     LOGGER.info('Done calculating percent to sink elapsed time %ss' % \
 *                     (end_time - start_time))
 */
  time((&__pyx_v_end_time));

  /* "pygeoprocessing\routing\routing_core.pyx":1459
 *     cdef time_t end_time
 *     time(&end_time)
 *     LOGGER.info('Done calculating percent to sink elapsed time %ss' % \             # <<<<<<<<<<<<<<
 *                     (end_time - start_time))
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1460
 *     time(&end_time)
 *     LOGGER.info('Done calculating percent to sink elapsed time %ss' % \
 *                     (end_time - start_time))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_end_time - __pyx_v_start_time)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pygeoprocessing\routing\routing_core.pyx":1459
 *     cdef time_t end_time
 *     time(&end_time)
 *     LOGGER.info('Done calculating percent to sink elapsed time %ss' % \             # <<<<<<<<<<<<<<
 *                     (end_time - start_time))
 * 
 */
  __pyx_t_12 = __Pyx_PyString_Format(__pyx_kp_s_Done_calculating_percent_to_sink, __pyx_t_2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_12); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_11);
  } else {
    __pyx_t_20 = PyTuple_New(1+1); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_20);
    PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    PyTuple_SET_ITEM(__pyx_t_20, 0+1, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_12);
    __pyx_t_12 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_20, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1269
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def percent_to_sink(             # <<<<<<<<<<<<<<
 *     sink_pixels_uri, export_rate_uri, outflow_direction_uri,
 *     outflow_weights_uri, effect_uri):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_20);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_effect_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_out_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.percent_to_sink", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_effect_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_export_rate_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_out_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_direction_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outflow_weights_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sink_pixels_block.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_sink_pixels_dataset);
  __Pyx_XDECREF(__pyx_v_sink_pixels_band);
  __Pyx_XDECREF(__pyx_v_export_rate_dataset);
  __Pyx_XDECREF(__pyx_v_export_rate_band);
  __Pyx_XDECREF(__pyx_v_outflow_direction_dataset);
  __Pyx_XDECREF(__pyx_v_outflow_direction_band);
  __Pyx_XDECREF(__pyx_v_outflow_weights_dataset);
  __Pyx_XDECREF(__pyx_v_outflow_weights_band);
  __Pyx_XDECREF(__pyx_v_effect_dataset);
  __Pyx_XDECREF(__pyx_v_effect_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_sink_pixels_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_export_rate_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_outflow_direction_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_outflow_weights_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_out_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_effect_block);
  __Pyx_XDECREF(__pyx_v_block_list);
  __Pyx_XDECREF(__pyx_v_band_list);
  __Pyx_XDECREF(__pyx_v_update_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_cache_dirty);
  __Pyx_XDECREF((PyObject *)__pyx_v_block_cache);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":1466
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef flat_edges(             # <<<<<<<<<<<<<<
 *         dem_uri, flow_direction_uri, deque[int] &high_edges,
 *         deque[int] &low_edges, int drain_off_edge=0):
 */

static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_flat_edges(PyObject *__pyx_v_dem_uri, PyObject *__pyx_v_flow_direction_uri, std::deque<int>  &__pyx_v_high_edges, std::deque<int>  &__pyx_v_low_edges, struct __pyx_opt_args_15pygeoprocessing_7routing_12routing_core_flat_edges *__pyx_optional_args) {
  int __pyx_v_drain_off_edge = ((int)0);
  int *__pyx_v_neighbor_row_offset;
  int *__pyx_v_neighbor_col_offset;
  PyObject *__pyx_v_dem_ds = NULL;
  PyObject *__pyx_v_dem_band = NULL;
  PyObject *__pyx_v_flow_ds = NULL;
  PyObject *__pyx_v_flow_band = NULL;
  int __pyx_v_block_col_size;
  int __pyx_v_block_row_size;
  int __pyx_v_n_rows;
  int __pyx_v_n_cols;
  PyArrayObject *__pyx_v_flow_block = 0;
  PyArrayObject *__pyx_v_dem_block = 0;
  PyObject *__pyx_v_band_list = NULL;
  PyObject *__pyx_v_block_list = NULL;
  PyObject *__pyx_v_update_list = NULL;
  PyArrayObject *__pyx_v_cache_dirty = 0;
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_block_cache = 0;
  int __pyx_v_n_global_block_rows;
  int __pyx_v_n_global_block_cols;
  int __pyx_v_global_row;
  int __pyx_v_global_col;
  int __pyx_v_cell_row_index;
  int __pyx_v_cell_col_index;
  int __pyx_v_cell_row_block_offset;
  int __pyx_v_cell_col_block_offset;
  int __pyx_v_neighbor_index;
  int __pyx_v_neighbor_row;
  int __pyx_v_neighbor_col;
  int __pyx_v_neighbor_row_index;
  int __pyx_v_neighbor_col_index;
  int __pyx_v_neighbor_row_block_offset;
  int __pyx_v_neighbor_col_block_offset;
  float __pyx_v_cell_dem;
  float __pyx_v_cell_flow;
  float __pyx_v_neighbor_dem;
  float __pyx_v_neighbor_flow;
  float __pyx_v_dem_nodata;
  float __pyx_v_flow_nodata;
  time_t __pyx_v_last_time;
  time_t __pyx_v_current_time;
  PyObject *__pyx_v_neighbor_nodata = 0;
  PyObject *__pyx_v_global_block_row = NULL;
  PyObject *__pyx_v_global_block_col = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cache_dirty;
  __Pyx_Buffer __pyx_pybuffer_cache_dirty;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dem_block;
  __Pyx_Buffer __pyx_pybuffer_dem_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flow_block;
  __Pyx_Buffer __pyx_pybuffer_flow_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[8];
  int __pyx_t_2[8];
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  float __pyx_t_17;
  PyObject *(*__pyx_t_18)(PyObject *);
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  PyObject *(*__pyx_t_21)(PyObject *);
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  int __pyx_t_26;
  int __pyx_t_27;
  int __pyx_t_28;
  int __pyx_t_29;
  int __pyx_t_30;
  int __pyx_t_31;
  int __pyx_t_32;
  int __pyx_t_33;
  int __pyx_t_34;
  int __pyx_t_35;
  int __pyx_t_36;
  int __pyx_t_37;
  int __pyx_t_38;
  int __pyx_t_39;
  int __pyx_t_40;
  int __pyx_t_41;
  int __pyx_t_42;
  int __pyx_t_43;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flat_edges", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_drain_off_edge = __pyx_optional_args->drain_off_edge;
    }
  }
  __pyx_pybuffer_flow_block.pybuffer.buf = NULL;
  __pyx_pybuffer_flow_block.refcount = 0;
  __pyx_pybuffernd_flow_block.data = NULL;
  __pyx_pybuffernd_flow_block.rcbuffer = &__pyx_pybuffer_flow_block;
  __pyx_pybuffer_dem_block.pybuffer.buf = NULL;
  __pyx_pybuffer_dem_block.refcount = 0;
  __pyx_pybuffernd_dem_block.data = NULL;
  __pyx_pybuffernd_dem_block.rcbuffer = &__pyx_pybuffer_dem_block;
  __pyx_pybuffer_cache_dirty.pybuffer.buf = NULL;
  __pyx_pybuffer_cache_dirty.refcount = 0;
  __pyx_pybuffernd_cache_dirty.data = NULL;
  __pyx_pybuffernd_cache_dirty.rcbuffer = &__pyx_pybuffer_cache_dirty;

  /* "pygeoprocessing\routing\routing_core.pyx":1485
 *                 the nodata edge of a DEM"""
 * 
 *     high_edges.clear()             # <<<<<<<<<<<<<<
 *     low_edges.clear()
 * 
 */
  __pyx_v_high_edges.clear();

  /* "pygeoprocessing\routing\routing_core.pyx":1486
 * 
 *     high_edges.clear()
 *     low_edges.clear()             # <<<<<<<<<<<<<<
 * 
 *     cdef int *neighbor_row_offset = [0, -1, -1, -1,  0,  1, 1, 1]
 */
  __pyx_v_low_edges.clear();

  /* "pygeoprocessing\routing\routing_core.pyx":1488
 *     low_edges.clear()
 * 
 *     cdef int *neighbor_row_offset = [0, -1, -1, -1,  0,  1, 1, 1]             # <<<<<<<<<<<<<<
 *     cdef int *neighbor_col_offset = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 */
  __pyx_t_1[0] = 0;
  __pyx_t_1[1] = -1;
  __pyx_t_1[2] = -1;
  __pyx_t_1[3] = -1;
  __pyx_t_1[4] = 0;
  __pyx_t_1[5] = 1;
  __pyx_t_1[6] = 1;
  __pyx_t_1[7] = 1;
  __pyx_v_neighbor_row_offset = __pyx_t_1;

  /* "pygeoprocessing\routing\routing_core.pyx":1489
 * 
 *     cdef int *neighbor_row_offset = [0, -1, -1, -1,  0,  1, 1, 1]
 *     cdef int *neighbor_col_offset = [1,  1,  0, -1, -1, -1, 0, 1]             # <<<<<<<<<<<<<<
 * 
 *     dem_ds = gdal.Open(dem_uri)
 */
  __pyx_t_2[0] = 1;
  __pyx_t_2[1] = 1;
  __pyx_t_2[2] = 0;
  __pyx_t_2[3] = -1;
  __pyx_t_2[4] = -1;
  __pyx_t_2[5] = -1;
  __pyx_t_2[6] = 0;
  __pyx_t_2[7] = 1;
  __pyx_v_neighbor_col_offset = __pyx_t_2;

  /* "pygeoprocessing\routing\routing_core.pyx":1491
 *     cdef int *neighbor_col_offset = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 *     dem_ds = gdal.Open(dem_uri)             # <<<<<<<<<<<<<<
 *     dem_band = dem_ds.GetRasterBand(1)
 *     flow_ds = gdal.Open(flow_direction_uri, gdal.GA_Update)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Open); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_dem_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_dem_uri);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_dem_uri);
    __Pyx_GIVEREF(__pyx_v_dem_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_dem_ds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1492
 * 
 *     dem_ds = gdal.Open(dem_uri)
 *     dem_band = dem_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flow_ds = gdal.Open(flow_direction_uri, gdal.GA_Update)
 *     flow_band = flow_ds.GetRasterBand(1)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dem_band = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1493
 *     dem_ds = gdal.Open(dem_uri)
 *     dem_band = dem_ds.GetRasterBand(1)
 *     flow_ds = gdal.Open(flow_direction_uri, gdal.GA_Update)             # <<<<<<<<<<<<<<
 *     flow_band = flow_ds.GetRasterBand(1)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Open); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (__pyx_t_3) {
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_flow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_flow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_flow_ds = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1494
 *     dem_band = dem_ds.GetRasterBand(1)
 *     flow_ds = gdal.Open(flow_direction_uri, gdal.GA_Update)
 *     flow_band = flow_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_flow_band = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1497
 * 
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = dem_band.GetBlockSize()             # <<<<<<<<<<<<<<
 *     cdef int n_rows = dem_ds.RasterYSize
 *     cdef int n_cols = dem_ds.RasterXSize
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
    PyObject* sequence = __pyx_t_6;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_8);
    #else
    __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    #endif
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_4); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 1; __pyx_t_8 = __pyx_t_9(__pyx_t_4); if (unlikely(!__pyx_t_8)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_8);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_4), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_block_col_size = __pyx_t_10;
  __pyx_v_block_row_size = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":1498
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = dem_band.GetBlockSize()
 *     cdef int n_rows = dem_ds.RasterYSize             # <<<<<<<<<<<<<<
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_RasterYSize); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_n_rows = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":1499
 *     block_col_size, block_row_size = dem_band.GetBlockSize()
 *     cdef int n_rows = dem_ds.RasterYSize
 *     cdef int n_cols = dem_ds.RasterXSize             # <<<<<<<<<<<<<<
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_RasterXSize); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_n_cols = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":1501
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1502
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = PyTuple_New(4); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1501
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  __pyx_t_12 = 0;
  __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);

  /* "pygeoprocessing\routing\routing_core.pyx":1503
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1501
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, __pyx_t_12); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_flow_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_flow_block.diminfo[0].strides = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flow_block.diminfo[0].shape = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flow_block.diminfo[1].strides = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flow_block.diminfo[1].shape = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_flow_block.diminfo[2].strides = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_flow_block.diminfo[2].shape = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_flow_block.diminfo[3].strides = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_flow_block.diminfo[3].shape = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_13 = 0;
  __pyx_v_flow_block = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1504
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1505
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *         dtype=numpy.float32)
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_5 = 0;
  __pyx_t_3 = 0;
  __pyx_t_8 = 0;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1504
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);

  /* "pygeoprocessing\routing\routing_core.pyx":1506
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)             # <<<<<<<<<<<<<<
 * 
 *     band_list = [dem_band, flow_band]
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1504
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dem_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_dem_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_dem_block.diminfo[0].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dem_block.diminfo[0].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dem_block.diminfo[1].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dem_block.diminfo[1].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_dem_block.diminfo[2].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_dem_block.diminfo[2].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_dem_block.diminfo[3].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_dem_block.diminfo[3].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_14 = 0;
  __pyx_v_dem_block = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1508
 *         dtype=numpy.float32)
 * 
 *     band_list = [dem_band, flow_band]             # <<<<<<<<<<<<<<
 *     block_list = [dem_block, flow_block]
 *     update_list = [False, False]
 */
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_dem_band);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_dem_band);
  __Pyx_GIVEREF(__pyx_v_dem_band);
  __Pyx_INCREF(__pyx_v_flow_band);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_v_flow_band);
  __Pyx_GIVEREF(__pyx_v_flow_band);
  __pyx_v_band_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1509
 * 
 *     band_list = [dem_band, flow_band]
 *     block_list = [dem_block, flow_block]             # <<<<<<<<<<<<<<
 *     update_list = [False, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 */
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_dem_block));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_dem_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_dem_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_flow_block));
  PyList_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_flow_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_flow_block));
  __pyx_v_block_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1510
 *     band_list = [dem_band, flow_band]
 *     block_list = [dem_block, flow_block]
 *     update_list = [False, False]             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 */
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_3, 0, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_3, 1, Py_False);
  __Pyx_GIVEREF(Py_False);
  __pyx_v_update_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1511
 *     block_list = [dem_block, flow_block]
 *     update_list = [False, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1512
 *     update_list = [False, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     block_col_size, block_row_size = dem_band.GetBlockSize()
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1511
 *     block_list = [dem_block, flow_block]
 *     update_list = [False, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  __pyx_t_12 = 0;
  __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);

  /* "pygeoprocessing\routing\routing_core.pyx":1512
 *     update_list = [False, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     block_col_size, block_row_size = dem_band.GetBlockSize()
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_byte); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1511
 *     block_list = [dem_block, flow_block]
 *     update_list = [False, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn_npy_byte, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_cache_dirty = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_cache_dirty.diminfo[0].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cache_dirty.diminfo[0].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cache_dirty.diminfo[1].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cache_dirty.diminfo[1].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_15 = 0;
  __pyx_v_cache_dirty = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1514
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 *     block_col_size, block_row_size = dem_band.GetBlockSize()             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_12); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
    PyObject* sequence = __pyx_t_8;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_12 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_12 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_12 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_12 = __pyx_t_9(__pyx_t_6); if (unlikely(!__pyx_t_12)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_12);
    index = 1; __pyx_t_4 = __pyx_t_9(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_6), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L6_unpacking_done:;
  }
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_12); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_block_col_size = __pyx_t_11;
  __pyx_v_block_row_size = __pyx_t_10;

  /* "pygeoprocessing\routing\routing_core.pyx":1517
 * 
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,             # <<<<<<<<<<<<<<
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_n_rows); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygeoprocessing\routing\routing_core.pyx":1518
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)             # <<<<<<<<<<<<<<
 * 
 *     cdef int n_global_block_rows = int(ceil(float(n_rows) / block_row_size))
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "pygeoprocessing\routing\routing_core.pyx":1516
 *     block_col_size, block_row_size = dem_band.GetBlockSize()
 * 
 *     cdef BlockCache block_cache = BlockCache(             # <<<<<<<<<<<<<<
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 */
  __pyx_t_16 = PyTuple_New(10); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_16, 4, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_16, 5, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_band_list);
  PyTuple_SET_ITEM(__pyx_t_16, 6, __pyx_v_band_list);
  __Pyx_GIVEREF(__pyx_v_band_list);
  __Pyx_INCREF(__pyx_v_block_list);
  PyTuple_SET_ITEM(__pyx_t_16, 7, __pyx_v_block_list);
  __Pyx_GIVEREF(__pyx_v_block_list);
  __Pyx_INCREF(__pyx_v_update_list);
  PyTuple_SET_ITEM(__pyx_t_16, 8, __pyx_v_update_list);
  __Pyx_GIVEREF(__pyx_v_update_list);
  __Pyx_INCREF(((PyObject *)__pyx_v_cache_dirty));
  PyTuple_SET_ITEM(__pyx_t_16, 9, ((PyObject *)__pyx_v_cache_dirty));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cache_dirty));
  __pyx_t_8 = 0;
  __pyx_t_4 = 0;
  __pyx_t_12 = 0;
  __pyx_t_6 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache)), __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_v_block_cache = ((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1520
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 *     cdef int n_global_block_rows = int(ceil(float(n_rows) / block_row_size))             # <<<<<<<<<<<<<<
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))
 * 
 */
  __pyx_v_n_global_block_rows = ((int)ceil((((double)__pyx_v_n_rows) / __pyx_v_block_row_size)));

  /* "pygeoprocessing\routing\routing_core.pyx":1521
 * 
 *     cdef int n_global_block_rows = int(ceil(float(n_rows) / block_row_size))
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))             # <<<<<<<<<<<<<<
 * 
 *     cdef int global_row, global_col
 */
  __pyx_v_n_global_block_cols = ((int)ceil((((double)__pyx_v_n_cols) / __pyx_v_block_col_size)));

  /* "pygeoprocessing\routing\routing_core.pyx":1536
 *     cdef float cell_dem, cell_flow, neighbor_dem, neighbor_flow
 * 
 *     cdef float dem_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         dem_uri)
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1537
 * 
 *     cdef float dem_nodata = pygeoprocessing.get_nodata_from_uri(
 *         dem_uri)             # <<<<<<<<<<<<<<
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(
 *         flow_direction_uri)
 */
  __pyx_t_16 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_16) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_dem_uri); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_16); __Pyx_GIVEREF(__pyx_t_16); __pyx_t_16 = NULL;
    __Pyx_INCREF(__pyx_v_dem_uri);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_dem_uri);
    __Pyx_GIVEREF(__pyx_v_dem_uri);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1536
 *     cdef float cell_dem, cell_flow, neighbor_dem, neighbor_flow
 * 
 *     cdef float dem_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         dem_uri)
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_17 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_17 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_dem_nodata = __pyx_t_17;

  /* "pygeoprocessing\routing\routing_core.pyx":1538
 *     cdef float dem_nodata = pygeoprocessing.get_nodata_from_uri(
 *         dem_uri)
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1539
 *         dem_uri)
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(
 *         flow_direction_uri)             # <<<<<<<<<<<<<<
 * 
 *     cdef time_t last_time, current_time
 */
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_flow_direction_uri); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_v_flow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1538
 *     cdef float dem_nodata = pygeoprocessing.get_nodata_from_uri(
 *         dem_uri)
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri)
 * 
 */
  __pyx_t_17 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_17 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_flow_nodata = __pyx_t_17;

  /* "pygeoprocessing\routing\routing_core.pyx":1542
 * 
 *     cdef time_t last_time, current_time
 *     time(&last_time)             # <<<<<<<<<<<<<<
 * 
 *     cdef neighbor_nodata
 */
  time((&__pyx_v_last_time));

  /* "pygeoprocessing\routing\routing_core.pyx":1546
 *     cdef neighbor_nodata
 * 
 *     for global_block_row in xrange(n_global_block_rows):             # <<<<<<<<<<<<<<
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_n_global_block_rows); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
    __pyx_t_18 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_18 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_18)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_18(__pyx_t_6);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_global_block_row, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":1547
 * 
 *     for global_block_row in xrange(n_global_block_rows):
 *         time(&current_time)             # <<<<<<<<<<<<<<
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(
 */
    time((&__pyx_v_current_time));

    /* "pygeoprocessing\routing\routing_core.pyx":1548
 *     for global_block_row in xrange(n_global_block_rows):
 *         time(&current_time)
 *         if current_time - last_time > 5.0:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 "flat_edges %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 */
    __pyx_t_19 = (((__pyx_v_current_time - __pyx_v_last_time) > 5.0) != 0);
    if (__pyx_t_19) {

      /* "pygeoprocessing\routing\routing_core.pyx":1549
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 "flat_edges %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 *             last_time = current_time
 */
      __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":1550
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(
 *                 "flat_edges %.1f%% complete", (global_row + 1.0) / n_rows * 100)             # <<<<<<<<<<<<<<
 *             last_time = current_time
 *         for global_block_col in xrange(n_global_block_cols):
 */
      __pyx_t_16 = PyFloat_FromDouble((((__pyx_v_global_row + 1.0) / __pyx_v_n_rows) * 100.0)); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_12 = NULL;
      __pyx_t_20 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_20 = 1;
        }
      }
      __pyx_t_4 = PyTuple_New(2+__pyx_t_20); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_12) {
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_12); __Pyx_GIVEREF(__pyx_t_12); __pyx_t_12 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_flat_edges_1f_complete);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_20, __pyx_kp_s_flat_edges_1f_complete);
      __Pyx_GIVEREF(__pyx_kp_s_flat_edges_1f_complete);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_20, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      __pyx_t_16 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":1551
 *             LOGGER.info(
 *                 "flat_edges %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 *             last_time = current_time             # <<<<<<<<<<<<<<
 *         for global_block_col in xrange(n_global_block_cols):
 *             for global_row in xrange(
 */
      __pyx_v_last_time = __pyx_v_current_time;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "pygeoprocessing\routing\routing_core.pyx":1552
 *                 "flat_edges %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 *             last_time = current_time
 *         for global_block_col in xrange(n_global_block_cols):             # <<<<<<<<<<<<<<
 *             for global_row in xrange(
 *                     global_block_row*block_row_size,
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_n_global_block_cols); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3); __pyx_t_20 = 0;
      __pyx_t_21 = NULL;
    } else {
      __pyx_t_20 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_21 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_21)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_20 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_20); __Pyx_INCREF(__pyx_t_5); __pyx_t_20++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_20 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_20); __Pyx_INCREF(__pyx_t_5); __pyx_t_20++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_21(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_global_block_col, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":1555
 *             for global_row in xrange(
 *                     global_block_row*block_row_size,
 *                     min((global_block_row+1)*block_row_size, n_rows)):             # <<<<<<<<<<<<<<
 *                 for global_col in xrange(
 *                         global_block_col*block_col_size,
 */
      __pyx_t_10 = __pyx_v_n_rows;
      __pyx_t_5 = PyNumber_Add(__pyx_v_global_block_row, __pyx_int_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_16 = PyNumber_Multiply(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_t_10); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = PyObject_RichCompare(__pyx_t_5, __pyx_t_16, Py_LT); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_19 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_19) {
        __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_t_10); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_4 = __pyx_t_12;
        __pyx_t_12 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_16);
        __pyx_t_4 = __pyx_t_16;
      }
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_22 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_22 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":1554
 *         for global_block_col in xrange(n_global_block_cols):
 *             for global_row in xrange(
 *                     global_block_row*block_row_size,             # <<<<<<<<<<<<<<
 *                     min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_16 = PyNumber_Multiply(__pyx_v_global_block_row, __pyx_t_4); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_23 = __Pyx_PyInt_As_long(__pyx_t_16); if (unlikely((__pyx_t_23 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      for (__pyx_t_10 = __pyx_t_23; __pyx_t_10 < __pyx_t_22; __pyx_t_10+=1) {
        __pyx_v_global_row = __pyx_t_10;

        /* "pygeoprocessing\routing\routing_core.pyx":1558
 *                 for global_col in xrange(
 *                         global_block_col*block_col_size,
 *                         min((global_block_col+1)*block_col_size, n_cols)):             # <<<<<<<<<<<<<<
 * 
 *                     block_cache.update_cache(
 */
        __pyx_t_11 = __pyx_v_n_cols;
        __pyx_t_16 = PyNumber_Add(__pyx_v_global_block_col, __pyx_int_1); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 = PyNumber_Multiply(__pyx_t_16, __pyx_t_4); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_t_11); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_5 = PyObject_RichCompare(__pyx_t_16, __pyx_t_12, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_19 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__pyx_t_19) {
          __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_t_11); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = __pyx_t_5;
          __pyx_t_5 = 0;
        } else {
          __Pyx_INCREF(__pyx_t_12);
          __pyx_t_4 = __pyx_t_12;
        }
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_24 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_24 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "pygeoprocessing\routing\routing_core.pyx":1557
 *                     min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(
 *                         global_block_col*block_col_size,             # <<<<<<<<<<<<<<
 *                         min((global_block_col+1)*block_col_size, n_cols)):
 * 
 */
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 = PyNumber_Multiply(__pyx_v_global_block_col, __pyx_t_4); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_25 = __Pyx_PyInt_As_long(__pyx_t_12); if (unlikely((__pyx_t_25 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        for (__pyx_t_11 = __pyx_t_25; __pyx_t_11 < __pyx_t_24; __pyx_t_11+=1) {
          __pyx_v_global_col = __pyx_t_11;

          /* "pygeoprocessing\routing\routing_core.pyx":1560
 *                         min((global_block_col+1)*block_col_size, n_cols)):
 * 
 *                     block_cache.update_cache(             # <<<<<<<<<<<<<<
 *                         global_row, global_col,
 *                         &cell_row_index, &cell_col_index,
 */
          ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_global_row, __pyx_v_global_col, (&__pyx_v_cell_row_index), (&__pyx_v_cell_col_index), (&__pyx_v_cell_row_block_offset), (&__pyx_v_cell_col_block_offset));

          /* "pygeoprocessing\routing\routing_core.pyx":1565
 *                         &cell_row_block_offset, &cell_col_block_offset)
 * 
 *                     cell_dem = dem_block[cell_row_index, cell_col_index,             # <<<<<<<<<<<<<<
 *                         cell_row_block_offset, cell_col_block_offset]
 * 
 */
          __pyx_t_26 = __pyx_v_cell_row_index;
          __pyx_t_27 = __pyx_v_cell_col_index;
          __pyx_t_28 = __pyx_v_cell_row_block_offset;
          __pyx_t_29 = __pyx_v_cell_col_block_offset;
          __pyx_v_cell_dem = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_dem_block.diminfo[0].strides, __pyx_t_27, __pyx_pybuffernd_dem_block.diminfo[1].strides, __pyx_t_28, __pyx_pybuffernd_dem_block.diminfo[2].strides, __pyx_t_29, __pyx_pybuffernd_dem_block.diminfo[3].strides));

          /* "pygeoprocessing\routing\routing_core.pyx":1568
 *                         cell_row_block_offset, cell_col_block_offset]
 * 
 *                     if cell_dem == dem_nodata:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_19 = ((__pyx_v_cell_dem == __pyx_v_dem_nodata) != 0);
          if (__pyx_t_19) {

            /* "pygeoprocessing\routing\routing_core.pyx":1569
 * 
 *                     if cell_dem == dem_nodata:
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     cell_flow = flow_block[cell_row_index, cell_col_index,
 */
            goto __pyx_L14_continue;
          }

          /* "pygeoprocessing\routing\routing_core.pyx":1571
 *                         continue
 * 
 *                     cell_flow = flow_block[cell_row_index, cell_col_index,             # <<<<<<<<<<<<<<
 *                         cell_row_block_offset, cell_col_block_offset]
 * 
 */
          __pyx_t_30 = __pyx_v_cell_row_index;
          __pyx_t_31 = __pyx_v_cell_col_index;
          __pyx_t_32 = __pyx_v_cell_row_block_offset;
          __pyx_t_33 = __pyx_v_cell_col_block_offset;
          __pyx_v_cell_flow = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.buf, __pyx_t_30, __pyx_pybuffernd_flow_block.diminfo[0].strides, __pyx_t_31, __pyx_pybuffernd_flow_block.diminfo[1].strides, __pyx_t_32, __pyx_pybuffernd_flow_block.diminfo[2].strides, __pyx_t_33, __pyx_pybuffernd_flow_block.diminfo[3].strides));

          /* "pygeoprocessing\routing\routing_core.pyx":1574
 *                         cell_row_block_offset, cell_col_block_offset]
 * 
 *                     neighbor_nodata = 0             # <<<<<<<<<<<<<<
 *                     for neighbor_index in xrange(8):
 *                         neighbor_row = (
 */
          __Pyx_INCREF(__pyx_int_0);
          __Pyx_XDECREF_SET(__pyx_v_neighbor_nodata, __pyx_int_0);

          /* "pygeoprocessing\routing\routing_core.pyx":1575
 * 
 *                     neighbor_nodata = 0
 *                     for neighbor_index in xrange(8):             # <<<<<<<<<<<<<<
 *                         neighbor_row = (
 *                             neighbor_row_offset[neighbor_index] + global_row)
 */
          for (__pyx_t_34 = 0; __pyx_t_34 < 8; __pyx_t_34+=1) {
            __pyx_v_neighbor_index = __pyx_t_34;

            /* "pygeoprocessing\routing\routing_core.pyx":1577
 *                     for neighbor_index in xrange(8):
 *                         neighbor_row = (
 *                             neighbor_row_offset[neighbor_index] + global_row)             # <<<<<<<<<<<<<<
 *                         neighbor_col = (
 *                             neighbor_col_offset[neighbor_index] + global_col)
 */
            __pyx_v_neighbor_row = ((__pyx_v_neighbor_row_offset[__pyx_v_neighbor_index]) + __pyx_v_global_row);

            /* "pygeoprocessing\routing\routing_core.pyx":1579
 *                             neighbor_row_offset[neighbor_index] + global_row)
 *                         neighbor_col = (
 *                             neighbor_col_offset[neighbor_index] + global_col)             # <<<<<<<<<<<<<<
 * 
 *                         if (neighbor_row >= n_rows or neighbor_row < 0 or
 */
            __pyx_v_neighbor_col = ((__pyx_v_neighbor_col_offset[__pyx_v_neighbor_index]) + __pyx_v_global_col);

            /* "pygeoprocessing\routing\routing_core.pyx":1581
 *                             neighbor_col_offset[neighbor_index] + global_col)
 * 
 *                         if (neighbor_row >= n_rows or neighbor_row < 0 or             # <<<<<<<<<<<<<<
 *                                 neighbor_col >= n_cols or neighbor_col < 0):
 *                             continue
 */
            __pyx_t_35 = ((__pyx_v_neighbor_row >= __pyx_v_n_rows) != 0);
            if (!__pyx_t_35) {
            } else {
              __pyx_t_19 = __pyx_t_35;
              goto __pyx_L20_bool_binop_done;
            }
            __pyx_t_35 = ((__pyx_v_neighbor_row < 0) != 0);
            if (!__pyx_t_35) {
            } else {
              __pyx_t_19 = __pyx_t_35;
              goto __pyx_L20_bool_binop_done;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":1582
 * 
 *                         if (neighbor_row >= n_rows or neighbor_row < 0 or
 *                                 neighbor_col >= n_cols or neighbor_col < 0):             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            __pyx_t_35 = ((__pyx_v_neighbor_col >= __pyx_v_n_cols) != 0);
            if (!__pyx_t_35) {
            } else {
              __pyx_t_19 = __pyx_t_35;
              goto __pyx_L20_bool_binop_done;
            }
            __pyx_t_35 = ((__pyx_v_neighbor_col < 0) != 0);
            __pyx_t_19 = __pyx_t_35;
            __pyx_L20_bool_binop_done:;
            if (__pyx_t_19) {

              /* "pygeoprocessing\routing\routing_core.pyx":1583
 *                         if (neighbor_row >= n_rows or neighbor_row < 0 or
 *                                 neighbor_col >= n_cols or neighbor_col < 0):
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         block_cache.update_cache(
 */
              goto __pyx_L17_continue;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":1585
 *                             continue
 * 
 *                         block_cache.update_cache(             # <<<<<<<<<<<<<<
 *                             neighbor_row, neighbor_col,
 *                             &neighbor_row_index, &neighbor_col_index,
 */
            ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_neighbor_row, __pyx_v_neighbor_col, (&__pyx_v_neighbor_row_index), (&__pyx_v_neighbor_col_index), (&__pyx_v_neighbor_row_block_offset), (&__pyx_v_neighbor_col_block_offset));

            /* "pygeoprocessing\routing\routing_core.pyx":1590
 *                             &neighbor_row_block_offset,
 *                             &neighbor_col_block_offset)
 *                         neighbor_dem = dem_block[             # <<<<<<<<<<<<<<
 *                             neighbor_row_index, neighbor_col_index,
 *                             neighbor_row_block_offset,
 */
            __pyx_t_36 = __pyx_v_neighbor_row_index;
            __pyx_t_37 = __pyx_v_neighbor_col_index;
            __pyx_t_38 = __pyx_v_neighbor_row_block_offset;
            __pyx_t_39 = __pyx_v_neighbor_col_block_offset;
            __pyx_v_neighbor_dem = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.buf, __pyx_t_36, __pyx_pybuffernd_dem_block.diminfo[0].strides, __pyx_t_37, __pyx_pybuffernd_dem_block.diminfo[1].strides, __pyx_t_38, __pyx_pybuffernd_dem_block.diminfo[2].strides, __pyx_t_39, __pyx_pybuffernd_dem_block.diminfo[3].strides));

            /* "pygeoprocessing\routing\routing_core.pyx":1595
 *                             neighbor_col_block_offset]
 * 
 *                         if neighbor_dem == dem_nodata:             # <<<<<<<<<<<<<<
 *                             neighbor_nodata = 1
 *                             continue
 */
            __pyx_t_19 = ((__pyx_v_neighbor_dem == __pyx_v_dem_nodata) != 0);
            if (__pyx_t_19) {

              /* "pygeoprocessing\routing\routing_core.pyx":1596
 * 
 *                         if neighbor_dem == dem_nodata:
 *                             neighbor_nodata = 1             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
              __Pyx_INCREF(__pyx_int_1);
              __Pyx_DECREF_SET(__pyx_v_neighbor_nodata, __pyx_int_1);

              /* "pygeoprocessing\routing\routing_core.pyx":1597
 *                         if neighbor_dem == dem_nodata:
 *                             neighbor_nodata = 1
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         neighbor_flow = flow_block[
 */
              goto __pyx_L17_continue;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":1599
 *                             continue
 * 
 *                         neighbor_flow = flow_block[             # <<<<<<<<<<<<<<
 *                             neighbor_row_index, neighbor_col_index,
 *                             neighbor_row_block_offset,
 */
            __pyx_t_40 = __pyx_v_neighbor_row_index;
            __pyx_t_41 = __pyx_v_neighbor_col_index;
            __pyx_t_42 = __pyx_v_neighbor_row_block_offset;
            __pyx_t_43 = __pyx_v_neighbor_col_block_offset;
            __pyx_v_neighbor_flow = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.buf, __pyx_t_40, __pyx_pybuffernd_flow_block.diminfo[0].strides, __pyx_t_41, __pyx_pybuffernd_flow_block.diminfo[1].strides, __pyx_t_42, __pyx_pybuffernd_flow_block.diminfo[2].strides, __pyx_t_43, __pyx_pybuffernd_flow_block.diminfo[3].strides));

            /* "pygeoprocessing\routing\routing_core.pyx":1604
 *                             neighbor_col_block_offset]
 * 
 *                         if (cell_flow != flow_nodata and             # <<<<<<<<<<<<<<
 *                                 neighbor_flow == flow_nodata and
 *                                 cell_dem == neighbor_dem):
 */
            __pyx_t_35 = ((__pyx_v_cell_flow != __pyx_v_flow_nodata) != 0);
            if (__pyx_t_35) {
            } else {
              __pyx_t_19 = __pyx_t_35;
              goto __pyx_L26_bool_binop_done;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":1605
 * 
 *                         if (cell_flow != flow_nodata and
 *                                 neighbor_flow == flow_nodata and             # <<<<<<<<<<<<<<
 *                                 cell_dem == neighbor_dem):
 *                             low_edges.push_back(global_row * n_cols + global_col)
 */
            __pyx_t_35 = ((__pyx_v_neighbor_flow == __pyx_v_flow_nodata) != 0);
            if (__pyx_t_35) {
            } else {
              __pyx_t_19 = __pyx_t_35;
              goto __pyx_L26_bool_binop_done;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":1606
 *                         if (cell_flow != flow_nodata and
 *                                 neighbor_flow == flow_nodata and
 *                                 cell_dem == neighbor_dem):             # <<<<<<<<<<<<<<
 *                             low_edges.push_back(global_row * n_cols + global_col)
 *                             break
 */
            __pyx_t_35 = ((__pyx_v_cell_dem == __pyx_v_neighbor_dem) != 0);
            __pyx_t_19 = __pyx_t_35;
            __pyx_L26_bool_binop_done:;
            if (__pyx_t_19) {

              /* "pygeoprocessing\routing\routing_core.pyx":1607
 *                                 neighbor_flow == flow_nodata and
 *                                 cell_dem == neighbor_dem):
 *                             low_edges.push_back(global_row * n_cols + global_col)             # <<<<<<<<<<<<<<
 *                             break
 *                         elif (cell_flow == flow_nodata and
 */
              __pyx_v_low_edges.push_back(((__pyx_v_global_row * __pyx_v_n_cols) + __pyx_v_global_col));

              /* "pygeoprocessing\routing\routing_core.pyx":1608
 *                                 cell_dem == neighbor_dem):
 *                             low_edges.push_back(global_row * n_cols + global_col)
 *                             break             # <<<<<<<<<<<<<<
 *                         elif (cell_flow == flow_nodata and
 *                               cell_dem < neighbor_dem):
 */
              goto __pyx_L18_break;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":1609
 *                             low_edges.push_back(global_row * n_cols + global_col)
 *                             break
 *                         elif (cell_flow == flow_nodata and             # <<<<<<<<<<<<<<
 *                               cell_dem < neighbor_dem):
 *                             high_edges.push_back(global_row * n_cols + global_col)
 */
            __pyx_t_35 = ((__pyx_v_cell_flow == __pyx_v_flow_nodata) != 0);
            if (__pyx_t_35) {
            } else {
              __pyx_t_19 = __pyx_t_35;
              goto __pyx_L29_bool_binop_done;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":1610
 *                             break
 *                         elif (cell_flow == flow_nodata and
 *                               cell_dem < neighbor_dem):             # <<<<<<<<<<<<<<
 *                             high_edges.push_back(global_row * n_cols + global_col)
 *                             break
 */
            __pyx_t_35 = ((__pyx_v_cell_dem < __pyx_v_neighbor_dem) != 0);
            __pyx_t_19 = __pyx_t_35;
            __pyx_L29_bool_binop_done:;
            if (__pyx_t_19) {

              /* "pygeoprocessing\routing\routing_core.pyx":1611
 *                         elif (cell_flow == flow_nodata and
 *                               cell_dem < neighbor_dem):
 *                             high_edges.push_back(global_row * n_cols + global_col)             # <<<<<<<<<<<<<<
 *                             break
 *                     if drain_off_edge and neighbor_nodata:
 */
              __pyx_v_high_edges.push_back(((__pyx_v_global_row * __pyx_v_n_cols) + __pyx_v_global_col));

              /* "pygeoprocessing\routing\routing_core.pyx":1612
 *                               cell_dem < neighbor_dem):
 *                             high_edges.push_back(global_row * n_cols + global_col)
 *                             break             # <<<<<<<<<<<<<<
 *                     if drain_off_edge and neighbor_nodata:
 *                         low_edges.push_back(global_row * n_cols + global_col)
 */
              goto __pyx_L18_break;
            }
            __pyx_L17_continue:;
          }
          __pyx_L18_break:;

          /* "pygeoprocessing\routing\routing_core.pyx":1613
 *                             high_edges.push_back(global_row * n_cols + global_col)
 *                             break
 *                     if drain_off_edge and neighbor_nodata:             # <<<<<<<<<<<<<<
 *                         low_edges.push_back(global_row * n_cols + global_col)
 * 
 */
          __pyx_t_35 = (__pyx_v_drain_off_edge != 0);
          if (__pyx_t_35) {
          } else {
            __pyx_t_19 = __pyx_t_35;
            goto __pyx_L32_bool_binop_done;
          }
          __pyx_t_35 = __Pyx_PyObject_IsTrue(__pyx_v_neighbor_nodata); if (unlikely(__pyx_t_35 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_t_19 = __pyx_t_35;
          __pyx_L32_bool_binop_done:;
          if (__pyx_t_19) {

            /* "pygeoprocessing\routing\routing_core.pyx":1614
 *                             break
 *                     if drain_off_edge and neighbor_nodata:
 *                         low_edges.push_back(global_row * n_cols + global_col)             # <<<<<<<<<<<<<<
 * 
 * 
 */
            __pyx_v_low_edges.push_back(((__pyx_v_global_row * __pyx_v_n_cols) + __pyx_v_global_col));
            goto __pyx_L31;
          }
          __pyx_L31:;
          __pyx_L14_continue:;
        }
      }

      /* "pygeoprocessing\routing\routing_core.pyx":1552
 *                 "flat_edges %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 *             last_time = current_time
 *         for global_block_col in xrange(n_global_block_cols):             # <<<<<<<<<<<<<<
 *             for global_row in xrange(
 *                     global_block_row*block_row_size,
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":1546
 *     cdef neighbor_nodata
 * 
 *     for global_block_row in xrange(n_global_block_rows):             # <<<<<<<<<<<<<<
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1466
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef flat_edges(             # <<<<<<<<<<<<<<
 *         dem_uri, flow_direction_uri, deque[int] &high_edges,
 *         deque[int] &low_edges, int drain_off_edge=0):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_16);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_block.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.flat_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_block.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_dem_ds);
  __Pyx_XDECREF(__pyx_v_dem_band);
  __Pyx_XDECREF(__pyx_v_flow_ds);
  __Pyx_XDECREF(__pyx_v_flow_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_dem_block);
  __Pyx_XDECREF(__pyx_v_band_list);
  __Pyx_XDECREF(__pyx_v_block_list);
  __Pyx_XDECREF(__pyx_v_update_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_cache_dirty);
  __Pyx_XDECREF((PyObject *)__pyx_v_block_cache);
  __Pyx_XDECREF(__pyx_v_neighbor_nodata);
  __Pyx_XDECREF(__pyx_v_global_block_row);
  __Pyx_XDECREF(__pyx_v_global_block_col);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":1620
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef label_flats(dem_uri, deque[int] &low_edges, labels_uri):             # <<<<<<<<<<<<<<
 *     """A flood fill function to give all the cells of each flat a unique
 *         label
 */

static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_label_flats(PyObject *__pyx_v_dem_uri, std::deque<int>  &__pyx_v_low_edges, PyObject *__pyx_v_labels_uri) {
  int *__pyx_v_neighbor_row_offset;
  int *__pyx_v_neighbor_col_offset;
  PyObject *__pyx_v_dem_ds = NULL;
  PyObject *__pyx_v_dem_band = NULL;
  int __pyx_v_labels_nodata;
  PyObject *__pyx_v_labels_ds = NULL;
  PyObject *__pyx_v_labels_band = NULL;
  int __pyx_v_block_col_size;
  int __pyx_v_block_row_size;
  int __pyx_v_n_rows;
  int __pyx_v_n_cols;
  PyArrayObject *__pyx_v_labels_block = 0;
  PyArrayObject *__pyx_v_dem_block = 0;
  PyObject *__pyx_v_band_list = NULL;
  PyObject *__pyx_v_block_list = NULL;
  PyObject *__pyx_v_update_list = NULL;
  PyArrayObject *__pyx_v_cache_dirty = 0;
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_block_cache = 0;
  CYTHON_UNUSED int __pyx_v_n_global_block_rows;
  CYTHON_UNUSED int __pyx_v_n_global_block_cols;
  int __pyx_v_global_row;
  int __pyx_v_global_col;
  int __pyx_v_cell_row_index;
  int __pyx_v_cell_col_index;
  int __pyx_v_cell_row_block_offset;
  int __pyx_v_cell_col_block_offset;
  int __pyx_v_neighbor_index;
  int __pyx_v_neighbor_row;
  int __pyx_v_neighbor_col;
  float __pyx_v_cell_label;
  float __pyx_v_flat_cell_label;
  CYTHON_UNUSED float __pyx_v_dem_nodata;
  time_t __pyx_v_last_time;
  time_t __pyx_v_current_time;
  int __pyx_v_flat_cell_index;
  int __pyx_v_flat_fill_cell_index;
  int __pyx_v_label;
  int __pyx_v_fill_cell_row;
  int __pyx_v_fill_cell_col;
  std::deque<int>  __pyx_v_to_fill;
  float __pyx_v_flat_height;
  float __pyx_v_current_flat_height;
  int __pyx_v_visit_number;
  CYTHON_UNUSED size_t __pyx_v__;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cache_dirty;
  __Pyx_Buffer __pyx_pybuffer_cache_dirty;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dem_block;
  __Pyx_Buffer __pyx_pybuffer_dem_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_labels_block;
  __Pyx_Buffer __pyx_pybuffer_labels_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[8];
  int __pyx_t_2[8];
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int __pyx_t_12;
  PyArrayObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  float __pyx_t_17;
  size_t __pyx_t_18;
  size_t __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  int __pyx_t_25;
  int __pyx_t_26;
  int __pyx_t_27;
  int __pyx_t_28;
  int __pyx_t_29;
  int __pyx_t_30;
  int __pyx_t_31;
  int __pyx_t_32;
  int __pyx_t_33;
  int __pyx_t_34;
  int __pyx_t_35;
  int __pyx_t_36;
  int __pyx_t_37;
  int __pyx_t_38;
  int __pyx_t_39;
  int __pyx_t_40;
  int __pyx_t_41;
  int __pyx_t_42;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("label_flats", 0);
  __pyx_pybuffer_labels_block.pybuffer.buf = NULL;
  __pyx_pybuffer_labels_block.refcount = 0;
  __pyx_pybuffernd_labels_block.data = NULL;
  __pyx_pybuffernd_labels_block.rcbuffer = &__pyx_pybuffer_labels_block;
  __pyx_pybuffer_dem_block.pybuffer.buf = NULL;
  __pyx_pybuffer_dem_block.refcount = 0;
  __pyx_pybuffernd_dem_block.data = NULL;
  __pyx_pybuffernd_dem_block.rcbuffer = &__pyx_pybuffer_dem_block;
  __pyx_pybuffer_cache_dirty.pybuffer.buf = NULL;
  __pyx_pybuffer_cache_dirty.refcount = 0;
  __pyx_pybuffernd_cache_dirty.data = NULL;
  __pyx_pybuffernd_cache_dirty.rcbuffer = &__pyx_pybuffer_cache_dirty;

  /* "pygeoprocessing\routing\routing_core.pyx":1634
 *             """
 * 
 *     cdef int *neighbor_row_offset = [0, -1, -1, -1,  0,  1, 1, 1]             # <<<<<<<<<<<<<<
 *     cdef int *neighbor_col_offset = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 */
  __pyx_t_1[0] = 0;
  __pyx_t_1[1] = -1;
  __pyx_t_1[2] = -1;
  __pyx_t_1[3] = -1;
  __pyx_t_1[4] = 0;
  __pyx_t_1[5] = 1;
  __pyx_t_1[6] = 1;
  __pyx_t_1[7] = 1;
  __pyx_v_neighbor_row_offset = __pyx_t_1;

  /* "pygeoprocessing\routing\routing_core.pyx":1635
 * 
 *     cdef int *neighbor_row_offset = [0, -1, -1, -1,  0,  1, 1, 1]
 *     cdef int *neighbor_col_offset = [1,  1,  0, -1, -1, -1, 0, 1]             # <<<<<<<<<<<<<<
 * 
 *     dem_ds = gdal.Open(dem_uri)
 */
  __pyx_t_2[0] = 1;
  __pyx_t_2[1] = 1;
  __pyx_t_2[2] = 0;
  __pyx_t_2[3] = -1;
  __pyx_t_2[4] = -1;
  __pyx_t_2[5] = -1;
  __pyx_t_2[6] = 0;
  __pyx_t_2[7] = 1;
  __pyx_v_neighbor_col_offset = __pyx_t_2;

  /* "pygeoprocessing\routing\routing_core.pyx":1637
 *     cdef int *neighbor_col_offset = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 *     dem_ds = gdal.Open(dem_uri)             # <<<<<<<<<<<<<<
 *     dem_band = dem_ds.GetRasterBand(1)
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Open); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_dem_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_dem_uri);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_dem_uri);
    __Pyx_GIVEREF(__pyx_v_dem_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_dem_ds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1638
 * 
 *     dem_ds = gdal.Open(dem_uri)
 *     dem_band = dem_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int labels_nodata = -1
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dem_band = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1640
 *     dem_band = dem_ds.GetRasterBand(1)
 * 
 *     cdef int labels_nodata = -1             # <<<<<<<<<<<<<<
 *     labels_ds = pygeoprocessing.new_raster_from_base(
 *         dem_ds, labels_uri, 'GTiff', labels_nodata,
 */
  __pyx_v_labels_nodata = -1;

  /* "pygeoprocessing\routing\routing_core.pyx":1641
 * 
 *     cdef int labels_nodata = -1
 *     labels_ds = pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_ds, labels_uri, 'GTiff', labels_nodata,
 *         gdal.GDT_Int32)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1642
 *     cdef int labels_nodata = -1
 *     labels_ds = pygeoprocessing.new_raster_from_base(
 *         dem_ds, labels_uri, 'GTiff', labels_nodata,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Int32)
 *     labels_band = labels_ds.GetRasterBand(1)
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_labels_nodata); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygeoprocessing\routing\routing_core.pyx":1643
 *     labels_ds = pygeoprocessing.new_raster_from_base(
 *         dem_ds, labels_uri, 'GTiff', labels_nodata,
 *         gdal.GDT_Int32)             # <<<<<<<<<<<<<<
 *     labels_band = labels_ds.GetRasterBand(1)
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_GDT_Int32); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_9 = PyTuple_New(5+__pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_INCREF(__pyx_v_dem_ds);
  PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_v_dem_ds);
  __Pyx_GIVEREF(__pyx_v_dem_ds);
  __Pyx_INCREF(__pyx_v_labels_uri);
  PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_labels_uri);
  __Pyx_GIVEREF(__pyx_v_labels_uri);
  __Pyx_INCREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_n_s_GTiff);
  __Pyx_GIVEREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_8, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_3 = 0;
  __pyx_t_7 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_labels_ds = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1644
 *         dem_ds, labels_uri, 'GTiff', labels_nodata,
 *         gdal.GDT_Int32)
 *     labels_band = labels_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_labels_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_labels_band = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1647
 * 
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = dem_band.GetBlockSize()             # <<<<<<<<<<<<<<
 *     cdef int n_rows = dem_ds.RasterYSize
 *     cdef int n_cols = dem_ds.RasterXSize
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_9) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_9); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
    PyObject* sequence = __pyx_t_6;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_9);
    #else
    __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    #endif
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_7 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_10 = Py_TYPE(__pyx_t_7)->tp_iternext;
    index = 0; __pyx_t_5 = __pyx_t_10(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 1; __pyx_t_9 = __pyx_t_10(__pyx_t_7); if (unlikely(!__pyx_t_9)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_9);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_block_col_size = __pyx_t_11;
  __pyx_v_block_row_size = __pyx_t_12;

  /* "pygeoprocessing\routing\routing_core.pyx":1648
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = dem_band.GetBlockSize()
 *     cdef int n_rows = dem_ds.RasterYSize             # <<<<<<<<<<<<<<
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_RasterYSize); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_n_rows = __pyx_t_12;

  /* "pygeoprocessing\routing\routing_core.pyx":1649
 *     block_col_size, block_row_size = dem_band.GetBlockSize()
 *     cdef int n_rows = dem_ds.RasterYSize
 *     cdef int n_cols = dem_ds.RasterXSize             # <<<<<<<<<<<<<<
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] labels_block = numpy.zeros(
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_RasterXSize); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_n_cols = __pyx_t_12;

  /* "pygeoprocessing\routing\routing_core.pyx":1651
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] labels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1652
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] labels_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1651
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] labels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":1653
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] labels_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1651
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] labels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_labels_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_labels_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_labels_block.diminfo[0].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_labels_block.diminfo[0].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_labels_block.diminfo[1].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_labels_block.diminfo[1].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_labels_block.diminfo[2].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_labels_block.diminfo[2].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_labels_block.diminfo[3].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_labels_block.diminfo[3].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_13 = 0;
  __pyx_v_labels_block = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1654
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1655
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *         dtype=numpy.float32)
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_3 = 0;
  __pyx_t_9 = 0;
  __pyx_t_7 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1654
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);

  /* "pygeoprocessing\routing\routing_core.pyx":1656
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)             # <<<<<<<<<<<<<<
 * 
 *     band_list = [dem_band, labels_band]
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1654
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dem_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_dem_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_dem_block.diminfo[0].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dem_block.diminfo[0].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dem_block.diminfo[1].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dem_block.diminfo[1].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_dem_block.diminfo[2].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_dem_block.diminfo[2].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_dem_block.diminfo[3].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_dem_block.diminfo[3].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_14 = 0;
  __pyx_v_dem_block = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1658
 *         dtype=numpy.float32)
 * 
 *     band_list = [dem_band, labels_band]             # <<<<<<<<<<<<<<
 *     block_list = [dem_block, labels_block]
 *     update_list = [False, True]
 */
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_dem_band);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_dem_band);
  __Pyx_GIVEREF(__pyx_v_dem_band);
  __Pyx_INCREF(__pyx_v_labels_band);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_v_labels_band);
  __Pyx_GIVEREF(__pyx_v_labels_band);
  __pyx_v_band_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1659
 * 
 *     band_list = [dem_band, labels_band]
 *     block_list = [dem_block, labels_block]             # <<<<<<<<<<<<<<
 *     update_list = [False, True]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 */
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_dem_block));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_dem_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_dem_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_labels_block));
  PyList_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_labels_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_labels_block));
  __pyx_v_block_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1660
 *     band_list = [dem_band, labels_band]
 *     block_list = [dem_block, labels_block]
 *     update_list = [False, True]             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 */
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_3, 0, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_True);
  PyList_SET_ITEM(__pyx_t_3, 1, Py_True);
  __Pyx_GIVEREF(Py_True);
  __pyx_v_update_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1661
 *     block_list = [dem_block, labels_block]
 *     update_list = [False, True]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1662
 *     update_list = [False, True]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     block_col_size, block_row_size = dem_band.GetBlockSize()
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_3 = 0;
  __pyx_t_7 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1661
 *     block_list = [dem_block, labels_block]
 *     update_list = [False, True]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":1662
 *     update_list = [False, True]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     block_col_size, block_row_size = dem_band.GetBlockSize()
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_byte); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1661
 *     block_list = [dem_block, labels_block]
 *     update_list = [False, True]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_9);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn_npy_byte, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_cache_dirty = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_cache_dirty.diminfo[0].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cache_dirty.diminfo[0].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cache_dirty.diminfo[1].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cache_dirty.diminfo[1].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_15 = 0;
  __pyx_v_cache_dirty = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1664
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 *     block_col_size, block_row_size = dem_band.GetBlockSize()             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
    PyObject* sequence = __pyx_t_9;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_7);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_10(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_7 = __pyx_t_10(__pyx_t_6); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_6), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L6_unpacking_done:;
  }
  __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_block_col_size = __pyx_t_12;
  __pyx_v_block_row_size = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":1667
 * 
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,             # <<<<<<<<<<<<<<
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 */
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_n_rows); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygeoprocessing\routing\routing_core.pyx":1668
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)             # <<<<<<<<<<<<<<
 * 
 *     cdef int n_global_block_rows = int(ceil(float(n_rows) / block_row_size))
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "pygeoprocessing\routing\routing_core.pyx":1666
 *     block_col_size, block_row_size = dem_band.GetBlockSize()
 * 
 *     cdef BlockCache block_cache = BlockCache(             # <<<<<<<<<<<<<<
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 */
  __pyx_t_16 = PyTuple_New(10); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_16, 4, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_16, 5, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_band_list);
  PyTuple_SET_ITEM(__pyx_t_16, 6, __pyx_v_band_list);
  __Pyx_GIVEREF(__pyx_v_band_list);
  __Pyx_INCREF(__pyx_v_block_list);
  PyTuple_SET_ITEM(__pyx_t_16, 7, __pyx_v_block_list);
  __Pyx_GIVEREF(__pyx_v_block_list);
  __Pyx_INCREF(__pyx_v_update_list);
  PyTuple_SET_ITEM(__pyx_t_16, 8, __pyx_v_update_list);
  __Pyx_GIVEREF(__pyx_v_update_list);
  __Pyx_INCREF(((PyObject *)__pyx_v_cache_dirty));
  PyTuple_SET_ITEM(__pyx_t_16, 9, ((PyObject *)__pyx_v_cache_dirty));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cache_dirty));
  __pyx_t_9 = 0;
  __pyx_t_7 = 0;
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache)), __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_v_block_cache = ((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1670
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 *     cdef int n_global_block_rows = int(ceil(float(n_rows) / block_row_size))             # <<<<<<<<<<<<<<
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))
 * 
 */
  __pyx_v_n_global_block_rows = ((int)ceil((((double)__pyx_v_n_rows) / __pyx_v_block_row_size)));

  /* "pygeoprocessing\routing\routing_core.pyx":1671
 * 
 *     cdef int n_global_block_rows = int(ceil(float(n_rows) / block_row_size))
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))             # <<<<<<<<<<<<<<
 * 
 *     cdef int global_row, global_col
 */
  __pyx_v_n_global_block_cols = ((int)ceil((((double)__pyx_v_n_cols) / __pyx_v_block_col_size)));

  /* "pygeoprocessing\routing\routing_core.pyx":1687
 *     cdef float cell_label, flat_cell_label
 * 
 *     cdef float dem_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         dem_uri)
 * 
 */
  __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1688
 * 
 *     cdef float dem_nodata = pygeoprocessing.get_nodata_from_uri(
 *         dem_uri)             # <<<<<<<<<<<<<<
 * 
 *     cdef time_t last_time, current_time
 */
  __pyx_t_16 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_16) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_dem_uri); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_16); __Pyx_GIVEREF(__pyx_t_16); __pyx_t_16 = NULL;
    __Pyx_INCREF(__pyx_v_dem_uri);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_dem_uri);
    __Pyx_GIVEREF(__pyx_v_dem_uri);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1687
 *     cdef float cell_label, flat_cell_label
 * 
 *     cdef float dem_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         dem_uri)
 * 
 */
  __pyx_t_17 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_17 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_dem_nodata = __pyx_t_17;

  /* "pygeoprocessing\routing\routing_core.pyx":1691
 * 
 *     cdef time_t last_time, current_time
 *     time(&last_time)             # <<<<<<<<<<<<<<
 * 
 *     cdef int flat_cell_index
 */
  time((&__pyx_v_last_time));

  /* "pygeoprocessing\routing\routing_core.pyx":1695
 *     cdef int flat_cell_index
 *     cdef int flat_fill_cell_index
 *     cdef int label = 1             # <<<<<<<<<<<<<<
 *     cdef int fill_cell_row, fill_cell_col
 *     cdef deque[int] to_fill
 */
  __pyx_v_label = 1;

  /* "pygeoprocessing\routing\routing_core.pyx":1699
 *     cdef deque[int] to_fill
 *     cdef float flat_height, current_flat_height
 *     cdef int visit_number = 0             # <<<<<<<<<<<<<<
 *     for _ in xrange(low_edges.size()):
 *         flat_cell_index = low_edges.front()
 */
  __pyx_v_visit_number = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1700
 *     cdef float flat_height, current_flat_height
 *     cdef int visit_number = 0
 *     for _ in xrange(low_edges.size()):             # <<<<<<<<<<<<<<
 *         flat_cell_index = low_edges.front()
 *         low_edges.pop_front()
 */
  __pyx_t_18 = __pyx_v_low_edges.size();
  for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
    __pyx_v__ = __pyx_t_19;

    /* "pygeoprocessing\routing\routing_core.pyx":1701
 *     cdef int visit_number = 0
 *     for _ in xrange(low_edges.size()):
 *         flat_cell_index = low_edges.front()             # <<<<<<<<<<<<<<
 *         low_edges.pop_front()
 *         low_edges.push_back(flat_cell_index)
 */
    __pyx_v_flat_cell_index = __pyx_v_low_edges.front();

    /* "pygeoprocessing\routing\routing_core.pyx":1702
 *     for _ in xrange(low_edges.size()):
 *         flat_cell_index = low_edges.front()
 *         low_edges.pop_front()             # <<<<<<<<<<<<<<
 *         low_edges.push_back(flat_cell_index)
 *         visit_number += 1
 */
    __pyx_v_low_edges.pop_front();

    /* "pygeoprocessing\routing\routing_core.pyx":1703
 *         flat_cell_index = low_edges.front()
 *         low_edges.pop_front()
 *         low_edges.push_back(flat_cell_index)             # <<<<<<<<<<<<<<
 *         visit_number += 1
 *         time(&current_time)
 */
    __pyx_v_low_edges.push_back(__pyx_v_flat_cell_index);

    /* "pygeoprocessing\routing\routing_core.pyx":1704
 *         low_edges.pop_front()
 *         low_edges.push_back(flat_cell_index)
 *         visit_number += 1             # <<<<<<<<<<<<<<
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 */
    __pyx_v_visit_number = (__pyx_v_visit_number + 1);

    /* "pygeoprocessing\routing\routing_core.pyx":1705
 *         low_edges.push_back(flat_cell_index)
 *         visit_number += 1
 *         time(&current_time)             # <<<<<<<<<<<<<<
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(
 */
    time((&__pyx_v_current_time));

    /* "pygeoprocessing\routing\routing_core.pyx":1706
 *         visit_number += 1
 *         time(&current_time)
 *         if current_time - last_time > 5.0:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 "label_flats %.1f%% complete",
 */
    __pyx_t_20 = (((__pyx_v_current_time - __pyx_v_last_time) > 5.0) != 0);
    if (__pyx_t_20) {

      /* "pygeoprocessing\routing\routing_core.pyx":1707
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 "label_flats %.1f%% complete",
 *                 float(visit_number) / low_edges.size() * 100)
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":1709
 *             LOGGER.info(
 *                 "label_flats %.1f%% complete",
 *                 float(visit_number) / low_edges.size() * 100)             # <<<<<<<<<<<<<<
 *             last_time = current_time
 *         global_row = flat_cell_index / n_cols
 */
      __pyx_t_3 = PyFloat_FromDouble(((((double)__pyx_v_visit_number) / __pyx_v_low_edges.size()) * 100.0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_16 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_16)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_4 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_16) {
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_16); __Pyx_GIVEREF(__pyx_t_16); __pyx_t_16 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_label_flats_1f_complete);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, __pyx_kp_s_label_flats_1f_complete);
      __Pyx_GIVEREF(__pyx_kp_s_label_flats_1f_complete);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":1710
 *                 "label_flats %.1f%% complete",
 *                 float(visit_number) / low_edges.size() * 100)
 *             last_time = current_time             # <<<<<<<<<<<<<<
 *         global_row = flat_cell_index / n_cols
 *         global_col = flat_cell_index % n_cols
 */
      __pyx_v_last_time = __pyx_v_current_time;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "pygeoprocessing\routing\routing_core.pyx":1711
 *                 float(visit_number) / low_edges.size() * 100)
 *             last_time = current_time
 *         global_row = flat_cell_index / n_cols             # <<<<<<<<<<<<<<
 *         global_col = flat_cell_index % n_cols
 * 
 */
    __pyx_v_global_row = (__pyx_v_flat_cell_index / __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":1712
 *             last_time = current_time
 *         global_row = flat_cell_index / n_cols
 *         global_col = flat_cell_index % n_cols             # <<<<<<<<<<<<<<
 * 
 *         block_cache.update_cache(
 */
    __pyx_v_global_col = (__pyx_v_flat_cell_index % __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":1714
 *         global_col = flat_cell_index % n_cols
 * 
 *         block_cache.update_cache(             # <<<<<<<<<<<<<<
 *             global_row, global_col,
 *             &cell_row_index, &cell_col_index,
 */
    ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_global_row, __pyx_v_global_col, (&__pyx_v_cell_row_index), (&__pyx_v_cell_col_index), (&__pyx_v_cell_row_block_offset), (&__pyx_v_cell_col_block_offset));

    /* "pygeoprocessing\routing\routing_core.pyx":1719
 *             &cell_row_block_offset, &cell_col_block_offset)
 * 
 *         cell_label = labels_block[cell_row_index, cell_col_index,             # <<<<<<<<<<<<<<
 *             cell_row_block_offset, cell_col_block_offset]
 * 
 */
    __pyx_t_11 = __pyx_v_cell_row_index;
    __pyx_t_12 = __pyx_v_cell_col_index;
    __pyx_t_21 = __pyx_v_cell_row_block_offset;
    __pyx_t_22 = __pyx_v_cell_col_block_offset;
    __pyx_v_cell_label = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_labels_block.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_labels_block.diminfo[1].strides, __pyx_t_21, __pyx_pybuffernd_labels_block.diminfo[2].strides, __pyx_t_22, __pyx_pybuffernd_labels_block.diminfo[3].strides));

    /* "pygeoprocessing\routing\routing_core.pyx":1722
 *             cell_row_block_offset, cell_col_block_offset]
 * 
 *         flat_height = dem_block[cell_row_index, cell_col_index,             # <<<<<<<<<<<<<<
 *             cell_row_block_offset, cell_col_block_offset]
 * 
 */
    __pyx_t_23 = __pyx_v_cell_row_index;
    __pyx_t_24 = __pyx_v_cell_col_index;
    __pyx_t_25 = __pyx_v_cell_row_block_offset;
    __pyx_t_26 = __pyx_v_cell_col_block_offset;
    __pyx_v_flat_height = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_dem_block.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_dem_block.diminfo[1].strides, __pyx_t_25, __pyx_pybuffernd_dem_block.diminfo[2].strides, __pyx_t_26, __pyx_pybuffernd_dem_block.diminfo[3].strides));

    /* "pygeoprocessing\routing\routing_core.pyx":1725
 *             cell_row_block_offset, cell_col_block_offset]
 * 
 *         if cell_label == labels_nodata:             # <<<<<<<<<<<<<<
 *             #label flats
 *             to_fill.push_back(flat_cell_index)
 */
    __pyx_t_20 = ((__pyx_v_cell_label == __pyx_v_labels_nodata) != 0);
    if (__pyx_t_20) {

      /* "pygeoprocessing\routing\routing_core.pyx":1727
 *         if cell_label == labels_nodata:
 *             #label flats
 *             to_fill.push_back(flat_cell_index)             # <<<<<<<<<<<<<<
 *             while not to_fill.empty():
 *                 flat_fill_cell_index = to_fill.front()
 */
      __pyx_v_to_fill.push_back(__pyx_v_flat_cell_index);

      /* "pygeoprocessing\routing\routing_core.pyx":1728
 *             #label flats
 *             to_fill.push_back(flat_cell_index)
 *             while not to_fill.empty():             # <<<<<<<<<<<<<<
 *                 flat_fill_cell_index = to_fill.front()
 *                 to_fill.pop_front()
 */
      while (1) {
        __pyx_t_20 = ((!(__pyx_v_to_fill.empty() != 0)) != 0);
        if (!__pyx_t_20) break;

        /* "pygeoprocessing\routing\routing_core.pyx":1729
 *             to_fill.push_back(flat_cell_index)
 *             while not to_fill.empty():
 *                 flat_fill_cell_index = to_fill.front()             # <<<<<<<<<<<<<<
 *                 to_fill.pop_front()
 *                 fill_cell_row = flat_fill_cell_index / n_cols
 */
        __pyx_v_flat_fill_cell_index = __pyx_v_to_fill.front();

        /* "pygeoprocessing\routing\routing_core.pyx":1730
 *             while not to_fill.empty():
 *                 flat_fill_cell_index = to_fill.front()
 *                 to_fill.pop_front()             # <<<<<<<<<<<<<<
 *                 fill_cell_row = flat_fill_cell_index / n_cols
 *                 fill_cell_col = flat_fill_cell_index % n_cols
 */
        __pyx_v_to_fill.pop_front();

        /* "pygeoprocessing\routing\routing_core.pyx":1731
 *                 flat_fill_cell_index = to_fill.front()
 *                 to_fill.pop_front()
 *                 fill_cell_row = flat_fill_cell_index / n_cols             # <<<<<<<<<<<<<<
 *                 fill_cell_col = flat_fill_cell_index % n_cols
 *                 if (fill_cell_row < 0 or fill_cell_row >= n_rows or
 */
        __pyx_v_fill_cell_row = (__pyx_v_flat_fill_cell_index / __pyx_v_n_cols);

        /* "pygeoprocessing\routing\routing_core.pyx":1732
 *                 to_fill.pop_front()
 *                 fill_cell_row = flat_fill_cell_index / n_cols
 *                 fill_cell_col = flat_fill_cell_index % n_cols             # <<<<<<<<<<<<<<
 *                 if (fill_cell_row < 0 or fill_cell_row >= n_rows or
 *                         fill_cell_col < 0 or fill_cell_col >= n_cols):
 */
        __pyx_v_fill_cell_col = (__pyx_v_flat_fill_cell_index % __pyx_v_n_cols);

        /* "pygeoprocessing\routing\routing_core.pyx":1733
 *                 fill_cell_row = flat_fill_cell_index / n_cols
 *                 fill_cell_col = flat_fill_cell_index % n_cols
 *                 if (fill_cell_row < 0 or fill_cell_row >= n_rows or             # <<<<<<<<<<<<<<
 *                         fill_cell_col < 0 or fill_cell_col >= n_cols):
 *                     continue
 */
        __pyx_t_27 = ((__pyx_v_fill_cell_row < 0) != 0);
        if (!__pyx_t_27) {
        } else {
          __pyx_t_20 = __pyx_t_27;
          goto __pyx_L14_bool_binop_done;
        }
        __pyx_t_27 = ((__pyx_v_fill_cell_row >= __pyx_v_n_rows) != 0);
        if (!__pyx_t_27) {
        } else {
          __pyx_t_20 = __pyx_t_27;
          goto __pyx_L14_bool_binop_done;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1734
 *                 fill_cell_col = flat_fill_cell_index % n_cols
 *                 if (fill_cell_row < 0 or fill_cell_row >= n_rows or
 *                         fill_cell_col < 0 or fill_cell_col >= n_cols):             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_27 = ((__pyx_v_fill_cell_col < 0) != 0);
        if (!__pyx_t_27) {
        } else {
          __pyx_t_20 = __pyx_t_27;
          goto __pyx_L14_bool_binop_done;
        }
        __pyx_t_27 = ((__pyx_v_fill_cell_col >= __pyx_v_n_cols) != 0);
        __pyx_t_20 = __pyx_t_27;
        __pyx_L14_bool_binop_done:;
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1735
 *                 if (fill_cell_row < 0 or fill_cell_row >= n_rows or
 *                         fill_cell_col < 0 or fill_cell_col >= n_cols):
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 block_cache.update_cache(
 */
          goto __pyx_L11_continue;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1737
 *                     continue
 * 
 *                 block_cache.update_cache(             # <<<<<<<<<<<<<<
 *                     fill_cell_row, fill_cell_col,
 *                     &cell_row_index, &cell_col_index,
 */
        ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_fill_cell_row, __pyx_v_fill_cell_col, (&__pyx_v_cell_row_index), (&__pyx_v_cell_col_index), (&__pyx_v_cell_row_block_offset), (&__pyx_v_cell_col_block_offset));

        /* "pygeoprocessing\routing\routing_core.pyx":1742
 *                     &cell_row_block_offset, &cell_col_block_offset)
 * 
 *                 current_flat_height = dem_block[cell_row_index, cell_col_index,             # <<<<<<<<<<<<<<
 *                     cell_row_block_offset, cell_col_block_offset]
 * 
 */
        __pyx_t_28 = __pyx_v_cell_row_index;
        __pyx_t_29 = __pyx_v_cell_col_index;
        __pyx_t_30 = __pyx_v_cell_row_block_offset;
        __pyx_t_31 = __pyx_v_cell_col_block_offset;
        __pyx_v_current_flat_height = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_dem_block.diminfo[0].strides, __pyx_t_29, __pyx_pybuffernd_dem_block.diminfo[1].strides, __pyx_t_30, __pyx_pybuffernd_dem_block.diminfo[2].strides, __pyx_t_31, __pyx_pybuffernd_dem_block.diminfo[3].strides));

        /* "pygeoprocessing\routing\routing_core.pyx":1745
 *                     cell_row_block_offset, cell_col_block_offset]
 * 
 *                 if current_flat_height != flat_height:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_20 = ((__pyx_v_current_flat_height != __pyx_v_flat_height) != 0);
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1746
 * 
 *                 if current_flat_height != flat_height:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 flat_cell_label = labels_block[
 */
          goto __pyx_L11_continue;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1748
 *                     continue
 * 
 *                 flat_cell_label = labels_block[             # <<<<<<<<<<<<<<
 *                     cell_row_index, cell_col_index,
 *                     cell_row_block_offset, cell_col_block_offset]
 */
        __pyx_t_32 = __pyx_v_cell_row_index;
        __pyx_t_33 = __pyx_v_cell_col_index;
        __pyx_t_34 = __pyx_v_cell_row_block_offset;
        __pyx_t_35 = __pyx_v_cell_col_block_offset;
        __pyx_v_flat_cell_label = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.buf, __pyx_t_32, __pyx_pybuffernd_labels_block.diminfo[0].strides, __pyx_t_33, __pyx_pybuffernd_labels_block.diminfo[1].strides, __pyx_t_34, __pyx_pybuffernd_labels_block.diminfo[2].strides, __pyx_t_35, __pyx_pybuffernd_labels_block.diminfo[3].strides));

        /* "pygeoprocessing\routing\routing_core.pyx":1752
 *                     cell_row_block_offset, cell_col_block_offset]
 * 
 *                 if flat_cell_label != labels_nodata:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_20 = ((__pyx_v_flat_cell_label != __pyx_v_labels_nodata) != 0);
        if (__pyx_t_20) {

          /* "pygeoprocessing\routing\routing_core.pyx":1753
 * 
 *                 if flat_cell_label != labels_nodata:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 #set the label
 */
          goto __pyx_L11_continue;
        }

        /* "pygeoprocessing\routing\routing_core.pyx":1758
 *                 labels_block[
 *                     cell_row_index, cell_col_index,
 *                     cell_row_block_offset, cell_col_block_offset] = label             # <<<<<<<<<<<<<<
 *                 cache_dirty[cell_row_index, cell_col_index] = 1
 * 
 */
        __pyx_t_36 = __pyx_v_cell_row_index;
        __pyx_t_37 = __pyx_v_cell_col_index;
        __pyx_t_38 = __pyx_v_cell_row_block_offset;
        __pyx_t_39 = __pyx_v_cell_col_block_offset;
        *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.buf, __pyx_t_36, __pyx_pybuffernd_labels_block.diminfo[0].strides, __pyx_t_37, __pyx_pybuffernd_labels_block.diminfo[1].strides, __pyx_t_38, __pyx_pybuffernd_labels_block.diminfo[2].strides, __pyx_t_39, __pyx_pybuffernd_labels_block.diminfo[3].strides) = __pyx_v_label;

        /* "pygeoprocessing\routing\routing_core.pyx":1759
 *                     cell_row_index, cell_col_index,
 *                     cell_row_block_offset, cell_col_block_offset] = label
 *                 cache_dirty[cell_row_index, cell_col_index] = 1             # <<<<<<<<<<<<<<
 * 
 *                 #visit the neighbors
 */
        __pyx_t_40 = __pyx_v_cell_row_index;
        __pyx_t_41 = __pyx_v_cell_col_index;
        *__Pyx_BufPtrStrided2d(npy_byte *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_40, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_41, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;

        /* "pygeoprocessing\routing\routing_core.pyx":1762
 * 
 *                 #visit the neighbors
 *                 for neighbor_index in xrange(8):             # <<<<<<<<<<<<<<
 *                     neighbor_row = (
 *                         fill_cell_row + neighbor_row_offset[neighbor_index])
 */
        for (__pyx_t_42 = 0; __pyx_t_42 < 8; __pyx_t_42+=1) {
          __pyx_v_neighbor_index = __pyx_t_42;

          /* "pygeoprocessing\routing\routing_core.pyx":1764
 *                 for neighbor_index in xrange(8):
 *                     neighbor_row = (
 *                         fill_cell_row + neighbor_row_offset[neighbor_index])             # <<<<<<<<<<<<<<
 *                     neighbor_col = (
 *                         fill_cell_col + neighbor_col_offset[neighbor_index])
 */
          __pyx_v_neighbor_row = (__pyx_v_fill_cell_row + (__pyx_v_neighbor_row_offset[__pyx_v_neighbor_index]));

          /* "pygeoprocessing\routing\routing_core.pyx":1766
 *                         fill_cell_row + neighbor_row_offset[neighbor_index])
 *                     neighbor_col = (
 *                         fill_cell_col + neighbor_col_offset[neighbor_index])             # <<<<<<<<<<<<<<
 *                     to_fill.push_back(neighbor_row * n_cols + neighbor_col)
 * 
 */
          __pyx_v_neighbor_col = (__pyx_v_fill_cell_col + (__pyx_v_neighbor_col_offset[__pyx_v_neighbor_index]));

          /* "pygeoprocessing\routing\routing_core.pyx":1767
 *                     neighbor_col = (
 *                         fill_cell_col + neighbor_col_offset[neighbor_index])
 *                     to_fill.push_back(neighbor_row * n_cols + neighbor_col)             # <<<<<<<<<<<<<<
 * 
 *             label += 1
 */
          __pyx_v_to_fill.push_back(((__pyx_v_neighbor_row * __pyx_v_n_cols) + __pyx_v_neighbor_col));
        }
        __pyx_L11_continue:;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":1769
 *                     to_fill.push_back(neighbor_row * n_cols + neighbor_col)
 * 
 *             label += 1             # <<<<<<<<<<<<<<
 *     block_cache.flush_cache()
 * 
 */
      __pyx_v_label = (__pyx_v_label + 1);
      goto __pyx_L10;
    }
    __pyx_L10:;
  }

  /* "pygeoprocessing\routing\routing_core.pyx":1770
 * 
 *             label += 1
 *     block_cache.flush_cache()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->flush_cache(__pyx_v_block_cache);

  /* "pygeoprocessing\routing\routing_core.pyx":1620
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef label_flats(dem_uri, deque[int] &low_edges, labels_uri):             # <<<<<<<<<<<<<<
 *     """A flood fill function to give all the cells of each flat a unique
 *         label
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_16);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels_block.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.label_flats", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels_block.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_dem_ds);
  __Pyx_XDECREF(__pyx_v_dem_band);
  __Pyx_XDECREF(__pyx_v_labels_ds);
  __Pyx_XDECREF(__pyx_v_labels_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_labels_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_dem_block);
  __Pyx_XDECREF(__pyx_v_band_list);
  __Pyx_XDECREF(__pyx_v_block_list);
  __Pyx_XDECREF(__pyx_v_update_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_cache_dirty);
  __Pyx_XDECREF((PyObject *)__pyx_v_block_cache);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":1776
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef clean_high_edges(labels_uri, deque[int] &high_edges):             # <<<<<<<<<<<<<<
 *     """Removes any high edges that do not have labels and reports them if so.
 * 
 */

static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_clean_high_edges(PyObject *__pyx_v_labels_uri, std::deque<int>  &__pyx_v_high_edges) {
  PyObject *__pyx_v_labels_ds = NULL;
  PyObject *__pyx_v_labels_band = NULL;
  int __pyx_v_block_col_size;
  int __pyx_v_block_row_size;
  int __pyx_v_n_rows;
  int __pyx_v_n_cols;
  PyArrayObject *__pyx_v_labels_block = 0;
  PyObject *__pyx_v_band_list = NULL;
  PyObject *__pyx_v_block_list = NULL;
  PyObject *__pyx_v_update_list = NULL;
  PyArrayObject *__pyx_v_cache_dirty = 0;
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_block_cache = 0;
  int __pyx_v_labels_nodata;
  int __pyx_v_flat_cell_label;
  int __pyx_v_cell_row_index;
  int __pyx_v_cell_col_index;
  int __pyx_v_cell_row_block_offset;
  int __pyx_v_cell_col_block_offset;
  int __pyx_v_flat_index;
  int __pyx_v_flat_row;
  int __pyx_v_flat_col;
  std::set<int>  __pyx_v_unlabeled_set;
  CYTHON_UNUSED size_t __pyx_v__;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cache_dirty;
  __Pyx_Buffer __pyx_pybuffer_cache_dirty;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_labels_block;
  __Pyx_Buffer __pyx_pybuffer_labels_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  size_t __pyx_t_13;
  size_t __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clean_high_edges", 0);
  __pyx_pybuffer_labels_block.pybuffer.buf = NULL;
  __pyx_pybuffer_labels_block.refcount = 0;
  __pyx_pybuffernd_labels_block.data = NULL;
  __pyx_pybuffernd_labels_block.rcbuffer = &__pyx_pybuffer_labels_block;
  __pyx_pybuffer_cache_dirty.pybuffer.buf = NULL;
  __pyx_pybuffer_cache_dirty.refcount = 0;
  __pyx_pybuffernd_cache_dirty.data = NULL;
  __pyx_pybuffernd_cache_dirty.rcbuffer = &__pyx_pybuffer_cache_dirty;

  /* "pygeoprocessing\routing\routing_core.pyx":1789
 *             nothing"""
 * 
 *     labels_ds = gdal.Open(labels_uri)             # <<<<<<<<<<<<<<
 *     labels_band = labels_ds.GetRasterBand(1)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Open); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_labels_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_labels_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_labels_uri);
    __Pyx_GIVEREF(__pyx_v_labels_uri);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_labels_ds = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1790
 * 
 *     labels_ds = gdal.Open(labels_uri)
 *     labels_band = labels_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_labels_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_labels_band = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1793
 * 
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = labels_band.GetBlockSize()             # <<<<<<<<<<<<<<
 *     cdef int n_rows = labels_ds.RasterYSize
 *     cdef int n_cols = labels_ds.RasterXSize
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_labels_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_4 = __pyx_t_5(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_2), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_block_col_size = __pyx_t_6;
  __pyx_v_block_row_size = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":1794
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = labels_band.GetBlockSize()
 *     cdef int n_rows = labels_ds.RasterYSize             # <<<<<<<<<<<<<<
 *     cdef int n_cols = labels_ds.RasterXSize
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_labels_ds, __pyx_n_s_RasterYSize); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_n_rows = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":1795
 *     block_col_size, block_row_size = labels_band.GetBlockSize()
 *     cdef int n_rows = labels_ds.RasterYSize
 *     cdef int n_cols = labels_ds.RasterXSize             # <<<<<<<<<<<<<<
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_labels_ds, __pyx_n_s_RasterXSize); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_n_cols = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":1797
 *     cdef int n_cols = labels_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1798
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *         dtype=numpy.int32)
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1797
 *     cdef int n_cols = labels_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);

  /* "pygeoprocessing\routing\routing_core.pyx":1799
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)             # <<<<<<<<<<<<<<
 * 
 *     band_list = [labels_band]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1797
 *     cdef int n_cols = labels_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_labels_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn_npy_int32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_labels_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_labels_block.diminfo[0].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_labels_block.diminfo[0].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_labels_block.diminfo[1].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_labels_block.diminfo[1].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_labels_block.diminfo[2].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_labels_block.diminfo[2].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_labels_block.diminfo[3].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_labels_block.diminfo[3].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_labels_block = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1801
 *         dtype=numpy.int32)
 * 
 *     band_list = [labels_band]             # <<<<<<<<<<<<<<
 *     block_list = [labels_block]
 *     update_list = [False]
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_labels_band);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_labels_band);
  __Pyx_GIVEREF(__pyx_v_labels_band);
  __pyx_v_band_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1802
 * 
 *     band_list = [labels_band]
 *     block_list = [labels_block]             # <<<<<<<<<<<<<<
 *     update_list = [False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_labels_block));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_labels_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_labels_block));
  __pyx_v_block_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1803
 *     band_list = [labels_band]
 *     block_list = [labels_block]
 *     update_list = [False]             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_1, 0, Py_False);
  __Pyx_GIVEREF(Py_False);
  __pyx_v_update_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1804
 *     block_list = [labels_block]
 *     update_list = [False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1805
 *     update_list = [False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1805; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1805; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1805; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1804
 *     block_list = [labels_block]
 *     update_list = [False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":1805
 *     update_list = [False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1805; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_byte); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1805; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1804
 *     block_list = [labels_block]
 *     update_list = [False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn_npy_byte, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_cache_dirty = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_cache_dirty.diminfo[0].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cache_dirty.diminfo[0].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cache_dirty.diminfo[1].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cache_dirty.diminfo[1].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_11 = 0;
  __pyx_v_cache_dirty = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1808
 * 
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,             # <<<<<<<<<<<<<<
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_n_rows); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygeoprocessing\routing\routing_core.pyx":1809
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)             # <<<<<<<<<<<<<<
 * 
 *     cdef int labels_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygeoprocessing\routing\routing_core.pyx":1807
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 *     cdef BlockCache block_cache = BlockCache(             # <<<<<<<<<<<<<<
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 */
  __pyx_t_12 = PyTuple_New(10); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_12, 5, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_band_list);
  PyTuple_SET_ITEM(__pyx_t_12, 6, __pyx_v_band_list);
  __Pyx_GIVEREF(__pyx_v_band_list);
  __Pyx_INCREF(__pyx_v_block_list);
  PyTuple_SET_ITEM(__pyx_t_12, 7, __pyx_v_block_list);
  __Pyx_GIVEREF(__pyx_v_block_list);
  __Pyx_INCREF(__pyx_v_update_list);
  PyTuple_SET_ITEM(__pyx_t_12, 8, __pyx_v_update_list);
  __Pyx_GIVEREF(__pyx_v_update_list);
  __Pyx_INCREF(((PyObject *)__pyx_v_cache_dirty));
  PyTuple_SET_ITEM(__pyx_t_12, 9, ((PyObject *)__pyx_v_cache_dirty));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cache_dirty));
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache)), __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_v_block_cache = ((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1811
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 *     cdef int labels_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         labels_uri)
 *     cdef int flat_cell_label
 */
  __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1812
 * 
 *     cdef int labels_nodata = pygeoprocessing.get_nodata_from_uri(
 *         labels_uri)             # <<<<<<<<<<<<<<
 *     cdef int flat_cell_label
 * 
 */
  __pyx_t_12 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_12) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_labels_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_12); __Pyx_GIVEREF(__pyx_t_12); __pyx_t_12 = NULL;
    __Pyx_INCREF(__pyx_v_labels_uri);
    PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_labels_uri);
    __Pyx_GIVEREF(__pyx_v_labels_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1811
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 *     cdef int labels_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         labels_uri)
 *     cdef int flat_cell_label
 */
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_labels_nodata = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":1822
 *     cdef int flat_row, flat_col
 *     cdef c_set[int] unlabeled_set
 *     for _ in xrange(high_edges.size()):             # <<<<<<<<<<<<<<
 *         flat_index = high_edges.front()
 *         high_edges.pop_front()
 */
  __pyx_t_13 = __pyx_v_high_edges.size();
  for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
    __pyx_v__ = __pyx_t_14;

    /* "pygeoprocessing\routing\routing_core.pyx":1823
 *     cdef c_set[int] unlabeled_set
 *     for _ in xrange(high_edges.size()):
 *         flat_index = high_edges.front()             # <<<<<<<<<<<<<<
 *         high_edges.pop_front()
 *         high_edges.push_back(flat_index)
 */
    __pyx_v_flat_index = __pyx_v_high_edges.front();

    /* "pygeoprocessing\routing\routing_core.pyx":1824
 *     for _ in xrange(high_edges.size()):
 *         flat_index = high_edges.front()
 *         high_edges.pop_front()             # <<<<<<<<<<<<<<
 *         high_edges.push_back(flat_index)
 *         flat_row = flat_index / n_cols
 */
    __pyx_v_high_edges.pop_front();

    /* "pygeoprocessing\routing\routing_core.pyx":1825
 *         flat_index = high_edges.front()
 *         high_edges.pop_front()
 *         high_edges.push_back(flat_index)             # <<<<<<<<<<<<<<
 *         flat_row = flat_index / n_cols
 *         flat_col = flat_index % n_cols
 */
    __pyx_v_high_edges.push_back(__pyx_v_flat_index);

    /* "pygeoprocessing\routing\routing_core.pyx":1826
 *         high_edges.pop_front()
 *         high_edges.push_back(flat_index)
 *         flat_row = flat_index / n_cols             # <<<<<<<<<<<<<<
 *         flat_col = flat_index % n_cols
 * 
 */
    __pyx_v_flat_row = (__pyx_v_flat_index / __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":1827
 *         high_edges.push_back(flat_index)
 *         flat_row = flat_index / n_cols
 *         flat_col = flat_index % n_cols             # <<<<<<<<<<<<<<
 * 
 *         block_cache.update_cache(
 */
    __pyx_v_flat_col = (__pyx_v_flat_index % __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":1829
 *         flat_col = flat_index % n_cols
 * 
 *         block_cache.update_cache(             # <<<<<<<<<<<<<<
 *             flat_row, flat_col,
 *             &cell_row_index, &cell_col_index,
 */
    ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_flat_row, __pyx_v_flat_col, (&__pyx_v_cell_row_index), (&__pyx_v_cell_col_index), (&__pyx_v_cell_row_block_offset), (&__pyx_v_cell_col_block_offset));

    /* "pygeoprocessing\routing\routing_core.pyx":1834
 *             &cell_row_block_offset, &cell_col_block_offset)
 * 
 *         flat_cell_label = labels_block[             # <<<<<<<<<<<<<<
 *             cell_row_index, cell_col_index,
 *             cell_row_block_offset, cell_col_block_offset]
 */
    __pyx_t_7 = __pyx_v_cell_row_index;
    __pyx_t_6 = __pyx_v_cell_col_index;
    __pyx_t_15 = __pyx_v_cell_row_block_offset;
    __pyx_t_16 = __pyx_v_cell_col_block_offset;
    __pyx_v_flat_cell_label = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_labels_block.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_labels_block.diminfo[1].strides, __pyx_t_15, __pyx_pybuffernd_labels_block.diminfo[2].strides, __pyx_t_16, __pyx_pybuffernd_labels_block.diminfo[3].strides));

    /* "pygeoprocessing\routing\routing_core.pyx":1839
 * 
 *         #this is a flat that does not have an outlet
 *         if flat_cell_label == labels_nodata:             # <<<<<<<<<<<<<<
 *             unlabeled_set.insert(flat_index)
 * 
 */
    __pyx_t_17 = ((__pyx_v_flat_cell_label == __pyx_v_labels_nodata) != 0);
    if (__pyx_t_17) {

      /* "pygeoprocessing\routing\routing_core.pyx":1840
 *         #this is a flat that does not have an outlet
 *         if flat_cell_label == labels_nodata:
 *             unlabeled_set.insert(flat_index)             # <<<<<<<<<<<<<<
 * 
 *     if unlabeled_set.size() > 0:
 */
      try {
        __pyx_v_unlabeled_set.insert(__pyx_v_flat_index);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      goto __pyx_L7;
    }
    __pyx_L7:;
  }

  /* "pygeoprocessing\routing\routing_core.pyx":1842
 *             unlabeled_set.insert(flat_index)
 * 
 *     if unlabeled_set.size() > 0:             # <<<<<<<<<<<<<<
 *         #remove high edges that are unlabeled
 *         for _ in xrange(high_edges.size()):
 */
  __pyx_t_17 = ((__pyx_v_unlabeled_set.size() > 0) != 0);
  if (__pyx_t_17) {

    /* "pygeoprocessing\routing\routing_core.pyx":1844
 *     if unlabeled_set.size() > 0:
 *         #remove high edges that are unlabeled
 *         for _ in xrange(high_edges.size()):             # <<<<<<<<<<<<<<
 *             flat_index = high_edges.front()
 *             high_edges.pop_front()
 */
    __pyx_t_13 = __pyx_v_high_edges.size();
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_v__ = __pyx_t_14;

      /* "pygeoprocessing\routing\routing_core.pyx":1845
 *         #remove high edges that are unlabeled
 *         for _ in xrange(high_edges.size()):
 *             flat_index = high_edges.front()             # <<<<<<<<<<<<<<
 *             high_edges.pop_front()
 *             if unlabeled_set.find(flat_index) != unlabeled_set.end():
 */
      __pyx_v_flat_index = __pyx_v_high_edges.front();

      /* "pygeoprocessing\routing\routing_core.pyx":1846
 *         for _ in xrange(high_edges.size()):
 *             flat_index = high_edges.front()
 *             high_edges.pop_front()             # <<<<<<<<<<<<<<
 *             if unlabeled_set.find(flat_index) != unlabeled_set.end():
 *                 high_edges.push_back(flat_index)
 */
      __pyx_v_high_edges.pop_front();

      /* "pygeoprocessing\routing\routing_core.pyx":1847
 *             flat_index = high_edges.front()
 *             high_edges.pop_front()
 *             if unlabeled_set.find(flat_index) != unlabeled_set.end():             # <<<<<<<<<<<<<<
 *                 high_edges.push_back(flat_index)
 *         LOGGER.warn("Not all flats have outlets")
 */
      __pyx_t_17 = ((__pyx_v_unlabeled_set.find(__pyx_v_flat_index) != __pyx_v_unlabeled_set.end()) != 0);
      if (__pyx_t_17) {

        /* "pygeoprocessing\routing\routing_core.pyx":1848
 *             high_edges.pop_front()
 *             if unlabeled_set.find(flat_index) != unlabeled_set.end():
 *                 high_edges.push_back(flat_index)             # <<<<<<<<<<<<<<
 *         LOGGER.warn("Not all flats have outlets")
 *     block_cache.flush_cache()
 */
        __pyx_v_high_edges.push_back(__pyx_v_flat_index);
        goto __pyx_L11;
      }
      __pyx_L11:;
    }

    /* "pygeoprocessing\routing\routing_core.pyx":1849
 *             if unlabeled_set.find(flat_index) != unlabeled_set.end():
 *                 high_edges.push_back(flat_index)
 *         LOGGER.warn("Not all flats have outlets")             # <<<<<<<<<<<<<<
 *     block_cache.flush_cache()
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "pygeoprocessing\routing\routing_core.pyx":1850
 *                 high_edges.push_back(flat_index)
 *         LOGGER.warn("Not all flats have outlets")
 *     block_cache.flush_cache()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->flush_cache(__pyx_v_block_cache);

  /* "pygeoprocessing\routing\routing_core.pyx":1776
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef clean_high_edges(labels_uri, deque[int] &high_edges):             # <<<<<<<<<<<<<<
 *     """Removes any high edges that do not have labels and reports them if so.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_12);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels_block.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.clean_high_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels_block.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_labels_ds);
  __Pyx_XDECREF(__pyx_v_labels_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_labels_block);
  __Pyx_XDECREF(__pyx_v_band_list);
  __Pyx_XDECREF(__pyx_v_block_list);
  __Pyx_XDECREF(__pyx_v_update_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_cache_dirty);
  __Pyx_XDECREF((PyObject *)__pyx_v_block_cache);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":1856
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef drain_flats(             # <<<<<<<<<<<<<<
 *         deque[int] &high_edges, deque[int] &low_edges, labels_uri,
 *         flow_direction_uri, flat_mask_uri):
 */

static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_drain_flats(std::deque<int>  &__pyx_v_high_edges, std::deque<int>  &__pyx_v_low_edges, PyObject *__pyx_v_labels_uri, PyObject *__pyx_v_flow_direction_uri, PyObject *__pyx_v_flat_mask_uri) {
  std::map<int,int>  __pyx_v_flat_height;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drain_flats", 0);

  /* "pygeoprocessing\routing\routing_core.pyx":1881
 *     cdef map[int, int] flat_height
 * 
 *     LOGGER.info('draining away from higher')             # <<<<<<<<<<<<<<
 *     away_from_higher(
 *         high_edges, labels_uri, flow_direction_uri, flat_mask_uri, flat_height)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1882
 * 
 *     LOGGER.info('draining away from higher')
 *     away_from_higher(             # <<<<<<<<<<<<<<
 *         high_edges, labels_uri, flow_direction_uri, flat_mask_uri, flat_height)
 * 
 */
  __pyx_t_1 = __pyx_f_15pygeoprocessing_7routing_12routing_core_away_from_higher(__pyx_v_high_edges, __pyx_v_labels_uri, __pyx_v_flow_direction_uri, __pyx_v_flat_mask_uri, __pyx_v_flat_height); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1885
 *         high_edges, labels_uri, flow_direction_uri, flat_mask_uri, flat_height)
 * 
 *     LOGGER.info('draining towards lower')             # <<<<<<<<<<<<<<
 *     towards_lower(
 *         low_edges, labels_uri, flow_direction_uri, flat_mask_uri, flat_height)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1886
 * 
 *     LOGGER.info('draining towards lower')
 *     towards_lower(             # <<<<<<<<<<<<<<
 *         low_edges, labels_uri, flow_direction_uri, flat_mask_uri, flat_height)
 * 
 */
  __pyx_t_1 = __pyx_f_15pygeoprocessing_7routing_12routing_core_towards_lower(__pyx_v_low_edges, __pyx_v_labels_uri, __pyx_v_flow_direction_uri, __pyx_v_flat_mask_uri, __pyx_v_flat_height); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1856
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef drain_flats(             # <<<<<<<<<<<<<<
 *         deque[int] &high_edges, deque[int] &low_edges, labels_uri,
 *         flow_direction_uri, flat_mask_uri):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.drain_flats", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":1893
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef away_from_higher(             # <<<<<<<<<<<<<<
 *         deque[int] &high_edges, labels_uri, flow_direction_uri, flat_mask_uri,
 *         map[int, int] &flat_height):
 */

static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_away_from_higher(std::deque<int>  &__pyx_v_high_edges, PyObject *__pyx_v_labels_uri, PyObject *__pyx_v_flow_direction_uri, PyObject *__pyx_v_flat_mask_uri, std::map<int,int>  &__pyx_v_flat_height) {
  int *__pyx_v_neighbor_row_offset;
  int *__pyx_v_neighbor_col_offset;
  int __pyx_v_flat_mask_nodata;
  PyObject *__pyx_v_labels_ds = NULL;
  PyObject *__pyx_v_labels_band = NULL;
  PyObject *__pyx_v_flat_mask_ds = NULL;
  PyObject *__pyx_v_flat_mask_band = NULL;
  PyObject *__pyx_v_flow_direction_ds = NULL;
  PyObject *__pyx_v_flow_direction_band = NULL;
  int __pyx_v_block_col_size;
  int __pyx_v_block_row_size;
  int __pyx_v_n_rows;
  int __pyx_v_n_cols;
  PyArrayObject *__pyx_v_labels_block = 0;
  PyArrayObject *__pyx_v_flat_mask_block = 0;
  PyArrayObject *__pyx_v_flow_direction_block = 0;
  PyObject *__pyx_v_band_list = NULL;
  PyObject *__pyx_v_block_list = NULL;
  PyObject *__pyx_v_update_list = NULL;
  PyArrayObject *__pyx_v_cache_dirty = 0;
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_block_cache = 0;
  int __pyx_v_cell_row_index;
  int __pyx_v_cell_col_index;
  int __pyx_v_cell_row_block_offset;
  int __pyx_v_cell_col_block_offset;
  int __pyx_v_loops;
  int __pyx_v_neighbor_row;
  int __pyx_v_neighbor_col;
  int __pyx_v_flat_index;
  int __pyx_v_flat_row;
  int __pyx_v_flat_col;
  int __pyx_v_flat_mask;
  int __pyx_v_labels_nodata;
  int __pyx_v_cell_label;
  int __pyx_v_neighbor_label;
  float __pyx_v_neighbor_flow;
  float __pyx_v_flow_nodata;
  time_t __pyx_v_last_time;
  time_t __pyx_v_current_time;
  std::deque<int>  __pyx_v_high_edges_queue;
  CYTHON_UNUSED size_t __pyx_v__;
  long __pyx_v_marker;
  long __pyx_v_neighbor_index;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cache_dirty;
  __Pyx_Buffer __pyx_pybuffer_cache_dirty;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flat_mask_block;
  __Pyx_Buffer __pyx_pybuffer_flat_mask_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flow_direction_block;
  __Pyx_Buffer __pyx_pybuffer_flow_direction_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_labels_block;
  __Pyx_Buffer __pyx_pybuffer_labels_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[8];
  int __pyx_t_2[8];
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  PyArrayObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  float __pyx_t_18;
  size_t __pyx_t_19;
  size_t __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  int __pyx_t_25;
  int __pyx_t_26;
  int __pyx_t_27;
  int __pyx_t_28;
  int __pyx_t_29;
  int __pyx_t_30;
  int __pyx_t_31;
  int __pyx_t_32;
  int __pyx_t_33;
  long __pyx_t_34;
  int __pyx_t_35;
  int __pyx_t_36;
  int __pyx_t_37;
  int __pyx_t_38;
  int __pyx_t_39;
  int __pyx_t_40;
  int __pyx_t_41;
  int __pyx_t_42;
  int __pyx_t_43;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("away_from_higher", 0);
  __pyx_pybuffer_labels_block.pybuffer.buf = NULL;
  __pyx_pybuffer_labels_block.refcount = 0;
  __pyx_pybuffernd_labels_block.data = NULL;
  __pyx_pybuffernd_labels_block.rcbuffer = &__pyx_pybuffer_labels_block;
  __pyx_pybuffer_flat_mask_block.pybuffer.buf = NULL;
  __pyx_pybuffer_flat_mask_block.refcount = 0;
  __pyx_pybuffernd_flat_mask_block.data = NULL;
  __pyx_pybuffernd_flat_mask_block.rcbuffer = &__pyx_pybuffer_flat_mask_block;
  __pyx_pybuffer_flow_direction_block.pybuffer.buf = NULL;
  __pyx_pybuffer_flow_direction_block.refcount = 0;
  __pyx_pybuffernd_flow_direction_block.data = NULL;
  __pyx_pybuffernd_flow_direction_block.rcbuffer = &__pyx_pybuffer_flow_direction_block;
  __pyx_pybuffer_cache_dirty.pybuffer.buf = NULL;
  __pyx_pybuffer_cache_dirty.refcount = 0;
  __pyx_pybuffernd_cache_dirty.data = NULL;
  __pyx_pybuffernd_cache_dirty.rcbuffer = &__pyx_pybuffer_cache_dirty;

  /* "pygeoprocessing\routing\routing_core.pyx":1923
 *             nothing"""
 * 
 *     cdef int *neighbor_row_offset = [0, -1, -1, -1,  0,  1, 1, 1]             # <<<<<<<<<<<<<<
 *     cdef int *neighbor_col_offset = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 */
  __pyx_t_1[0] = 0;
  __pyx_t_1[1] = -1;
  __pyx_t_1[2] = -1;
  __pyx_t_1[3] = -1;
  __pyx_t_1[4] = 0;
  __pyx_t_1[5] = 1;
  __pyx_t_1[6] = 1;
  __pyx_t_1[7] = 1;
  __pyx_v_neighbor_row_offset = __pyx_t_1;

  /* "pygeoprocessing\routing\routing_core.pyx":1924
 * 
 *     cdef int *neighbor_row_offset = [0, -1, -1, -1,  0,  1, 1, 1]
 *     cdef int *neighbor_col_offset = [1,  1,  0, -1, -1, -1, 0, 1]             # <<<<<<<<<<<<<<
 * 
 *     cdef int flat_mask_nodata = -9999
 */
  __pyx_t_2[0] = 1;
  __pyx_t_2[1] = 1;
  __pyx_t_2[2] = 0;
  __pyx_t_2[3] = -1;
  __pyx_t_2[4] = -1;
  __pyx_t_2[5] = -1;
  __pyx_t_2[6] = 0;
  __pyx_t_2[7] = 1;
  __pyx_v_neighbor_col_offset = __pyx_t_2;

  /* "pygeoprocessing\routing\routing_core.pyx":1926
 *     cdef int *neighbor_col_offset = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 *     cdef int flat_mask_nodata = -9999             # <<<<<<<<<<<<<<
 *     #fill up the flat mask with 0s so it can be used to route a dem later
 *     pygeoprocessing.new_raster_from_base_uri(
 */
  __pyx_v_flat_mask_nodata = -9999;

  /* "pygeoprocessing\routing\routing_core.pyx":1928
 *     cdef int flat_mask_nodata = -9999
 *     #fill up the flat mask with 0s so it can be used to route a dem later
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         labels_uri, flat_mask_uri, 'GTiff', flat_mask_nodata,
 *         gdal.GDT_Int32, fill_value=0)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_new_raster_from_base_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1929
 *     #fill up the flat mask with 0s so it can be used to route a dem later
 *     pygeoprocessing.new_raster_from_base_uri(
 *         labels_uri, flat_mask_uri, 'GTiff', flat_mask_nodata,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Int32, fill_value=0)
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_flat_mask_nodata); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygeoprocessing\routing\routing_core.pyx":1930
 *     pygeoprocessing.new_raster_from_base_uri(
 *         labels_uri, flat_mask_uri, 'GTiff', flat_mask_nodata,
 *         gdal.GDT_Int32, fill_value=0)             # <<<<<<<<<<<<<<
 * 
 *     labels_ds = gdal.Open(labels_uri)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_GDT_Int32); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1928
 *     cdef int flat_mask_nodata = -9999
 *     #fill up the flat mask with 0s so it can be used to route a dem later
 *     pygeoprocessing.new_raster_from_base_uri(             # <<<<<<<<<<<<<<
 *         labels_uri, flat_mask_uri, 'GTiff', flat_mask_nodata,
 *         gdal.GDT_Int32, fill_value=0)
 */
  __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_labels_uri);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_labels_uri);
  __Pyx_GIVEREF(__pyx_v_labels_uri);
  __Pyx_INCREF(__pyx_v_flat_mask_uri);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_flat_mask_uri);
  __Pyx_GIVEREF(__pyx_v_flat_mask_uri);
  __Pyx_INCREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_n_s_GTiff);
  __Pyx_GIVEREF(__pyx_n_s_GTiff);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_fill_value, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1932
 *         gdal.GDT_Int32, fill_value=0)
 * 
 *     labels_ds = gdal.Open(labels_uri)             # <<<<<<<<<<<<<<
 *     labels_band = labels_ds.GetRasterBand(1)
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_Open); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_labels_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_v_labels_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_labels_uri);
    __Pyx_GIVEREF(__pyx_v_labels_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_labels_ds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1933
 * 
 *     labels_ds = gdal.Open(labels_uri)
 *     labels_band = labels_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_labels_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_labels_band = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1934
 *     labels_ds = gdal.Open(labels_uri)
 *     labels_band = labels_ds.GetRasterBand(1)
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)             # <<<<<<<<<<<<<<
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Open); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (__pyx_t_3) {
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_flat_mask_uri);
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_flat_mask_uri);
  __Pyx_GIVEREF(__pyx_v_flat_mask_uri);
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_flat_mask_ds = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1935
 *     labels_band = labels_ds.GetRasterBand(1)
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_flat_mask_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_flat_mask_band = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1936
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)
 *     flow_direction_ds = gdal.Open(flow_direction_uri)             # <<<<<<<<<<<<<<
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)
 * 
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Open); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_flow_direction_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_flow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_flow_direction_ds = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1937
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_direction_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_flow_direction_band = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1940
 * 
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = labels_band.GetBlockSize()             # <<<<<<<<<<<<<<
 *     cdef int n_rows = labels_ds.RasterYSize
 *     cdef int n_cols = labels_ds.RasterXSize
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_labels_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
    PyObject* sequence = __pyx_t_8;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_6);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_5); if (unlikely(!__pyx_t_6)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_6);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_5), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_block_col_size = __pyx_t_10;
  __pyx_v_block_row_size = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":1941
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = labels_band.GetBlockSize()
 *     cdef int n_rows = labels_ds.RasterYSize             # <<<<<<<<<<<<<<
 *     cdef int n_cols = labels_ds.RasterXSize
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_labels_ds, __pyx_n_s_RasterYSize); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_n_rows = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":1942
 *     block_col_size, block_row_size = labels_band.GetBlockSize()
 *     cdef int n_rows = labels_ds.RasterYSize
 *     cdef int n_cols = labels_ds.RasterXSize             # <<<<<<<<<<<<<<
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_labels_ds, __pyx_n_s_RasterXSize); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_n_cols = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":1944
 *     cdef int n_cols = labels_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1945
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = PyTuple_New(4); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_8 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1944
 *     cdef int n_cols = labels_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  __pyx_t_12 = 0;
  __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);

  /* "pygeoprocessing\routing\routing_core.pyx":1946
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int32); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1944
 *     cdef int n_cols = labels_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, __pyx_t_12); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_labels_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn_npy_int32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_labels_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_labels_block.diminfo[0].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_labels_block.diminfo[0].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_labels_block.diminfo[1].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_labels_block.diminfo[1].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_labels_block.diminfo[2].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_labels_block.diminfo[2].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_labels_block.diminfo[3].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_labels_block.diminfo[3].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_13 = 0;
  __pyx_v_labels_block = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1947
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1948
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flow_direction_block = (
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1947
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);

  /* "pygeoprocessing\routing\routing_core.pyx":1949
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flow_direction_block = (
 *         numpy.zeros(
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int32); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1947
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn_npy_int32, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_flat_mask_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_flat_mask_block.diminfo[0].strides = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flat_mask_block.diminfo[0].shape = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flat_mask_block.diminfo[1].strides = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flat_mask_block.diminfo[1].shape = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_flat_mask_block.diminfo[2].strides = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_flat_mask_block.diminfo[2].shape = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_flat_mask_block.diminfo[3].strides = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_flat_mask_block.diminfo[3].shape = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_14 = 0;
  __pyx_v_flat_mask_block = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1951
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flow_direction_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int32))
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1952
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flow_direction_block = (
 *         numpy.zeros(
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *             dtype=numpy.int32))
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_12 = 0;
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1951
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flow_direction_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int32))
 */
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":1953
 *         numpy.zeros(
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int32))             # <<<<<<<<<<<<<<
 * 
 *     band_list = [labels_band, flat_mask_band, flow_direction_band]
 */
  __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1951
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flow_direction_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int32))
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn_npy_int32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_flow_direction_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1950; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_flow_direction_block.diminfo[0].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flow_direction_block.diminfo[0].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flow_direction_block.diminfo[1].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flow_direction_block.diminfo[1].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_flow_direction_block.diminfo[2].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_flow_direction_block.diminfo[2].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_flow_direction_block.diminfo[3].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_flow_direction_block.diminfo[3].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_15 = 0;
  __pyx_v_flow_direction_block = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1955
 *             dtype=numpy.int32))
 * 
 *     band_list = [labels_band, flat_mask_band, flow_direction_band]             # <<<<<<<<<<<<<<
 *     block_list = [labels_block, flat_mask_block, flow_direction_block]
 *     update_list = [False, True, False]
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_labels_band);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_v_labels_band);
  __Pyx_GIVEREF(__pyx_v_labels_band);
  __Pyx_INCREF(__pyx_v_flat_mask_band);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_v_flat_mask_band);
  __Pyx_GIVEREF(__pyx_v_flat_mask_band);
  __Pyx_INCREF(__pyx_v_flow_direction_band);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_v_flow_direction_band);
  __Pyx_GIVEREF(__pyx_v_flow_direction_band);
  __pyx_v_band_list = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1956
 * 
 *     band_list = [labels_band, flat_mask_band, flow_direction_band]
 *     block_list = [labels_block, flat_mask_block, flow_direction_block]             # <<<<<<<<<<<<<<
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_labels_block));
  PyList_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_labels_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_labels_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_flat_mask_block));
  PyList_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_flat_mask_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_flat_mask_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_flow_direction_block));
  PyList_SET_ITEM(__pyx_t_5, 2, ((PyObject *)__pyx_v_flow_direction_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_flow_direction_block));
  __pyx_v_block_list = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1957
 *     band_list = [labels_band, flat_mask_band, flow_direction_band]
 *     block_list = [labels_block, flat_mask_block, flow_direction_block]
 *     update_list = [False, True, False]             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_5, 0, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_True);
  PyList_SET_ITEM(__pyx_t_5, 1, Py_True);
  __Pyx_GIVEREF(Py_True);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_5, 2, Py_False);
  __Pyx_GIVEREF(Py_False);
  __pyx_v_update_list = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1958
 *     block_list = [labels_block, flat_mask_block, flow_direction_block]
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1959
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1958
 *     block_list = [labels_block, flat_mask_block, flow_direction_block]
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);

  /* "pygeoprocessing\routing\routing_core.pyx":1959
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_byte); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1958
 *     block_list = [labels_block, flat_mask_block, flow_direction_block]
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_12) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_12, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_16 = ((PyArrayObject *)__pyx_t_12);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn_npy_byte, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_cache_dirty = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_cache_dirty.diminfo[0].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cache_dirty.diminfo[0].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cache_dirty.diminfo[1].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cache_dirty.diminfo[1].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_16 = 0;
  __pyx_v_cache_dirty = ((PyArrayObject *)__pyx_t_12);
  __pyx_t_12 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1962
 * 
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,             # <<<<<<<<<<<<<<
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 */
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_n_rows); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "pygeoprocessing\routing\routing_core.pyx":1963
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)             # <<<<<<<<<<<<<<
 * 
 *     cdef int cell_row_index, cell_col_index
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygeoprocessing\routing\routing_core.pyx":1961
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 *     cdef BlockCache block_cache = BlockCache(             # <<<<<<<<<<<<<<
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 */
  __pyx_t_17 = PyTuple_New(10); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_17, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_17, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_17, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_17, 5, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_band_list);
  PyTuple_SET_ITEM(__pyx_t_17, 6, __pyx_v_band_list);
  __Pyx_GIVEREF(__pyx_v_band_list);
  __Pyx_INCREF(__pyx_v_block_list);
  PyTuple_SET_ITEM(__pyx_t_17, 7, __pyx_v_block_list);
  __Pyx_GIVEREF(__pyx_v_block_list);
  __Pyx_INCREF(__pyx_v_update_list);
  PyTuple_SET_ITEM(__pyx_t_17, 8, __pyx_v_update_list);
  __Pyx_GIVEREF(__pyx_v_update_list);
  __Pyx_INCREF(((PyObject *)__pyx_v_cache_dirty));
  PyTuple_SET_ITEM(__pyx_t_17, 9, ((PyObject *)__pyx_v_cache_dirty));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cache_dirty));
  __pyx_t_12 = 0;
  __pyx_t_8 = 0;
  __pyx_t_6 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache)), __pyx_t_17, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_v_block_cache = ((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1969
 *     cdef int cell_row_block_offset, cell_col_block_offset
 * 
 *     cdef int loops = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef int neighbor_row, neighbor_col
 */
  __pyx_v_loops = 1;

  /* "pygeoprocessing\routing\routing_core.pyx":1975
 *     cdef int flat_row, flat_col
 *     cdef int flat_mask
 *     cdef int labels_nodata = pygeoprocessing.get_nodata_from_uri(labels_uri)             # <<<<<<<<<<<<<<
 *     cdef int cell_label, neighbor_label
 *     cdef float neighbor_flow
 */
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_17) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_labels_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_17); __Pyx_GIVEREF(__pyx_t_17); __pyx_t_17 = NULL;
    __Pyx_INCREF(__pyx_v_labels_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_labels_uri);
    __Pyx_GIVEREF(__pyx_v_labels_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_labels_nodata = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":1978
 *     cdef int cell_label, neighbor_label
 *     cdef float neighbor_flow
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri)
 * 
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1979
 *     cdef float neighbor_flow
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(
 *         flow_direction_uri)             # <<<<<<<<<<<<<<
 * 
 *     cdef time_t last_time, current_time
 */
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_flow_direction_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_17 = PyTuple_New(1+1); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_17, 0+1, __pyx_v_flow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_17, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1978
 *     cdef int cell_label, neighbor_label
 *     cdef float neighbor_flow
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri)
 * 
 */
  __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_18 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_nodata = __pyx_t_18;

  /* "pygeoprocessing\routing\routing_core.pyx":1982
 * 
 *     cdef time_t last_time, current_time
 *     time(&last_time)             # <<<<<<<<<<<<<<
 * 
 *     cdef deque[int] high_edges_queue
 */
  time((&__pyx_v_last_time));

  /* "pygeoprocessing\routing\routing_core.pyx":1987
 * 
 *     #seed the queue with the high edges
 *     for _ in xrange(high_edges.size()):             # <<<<<<<<<<<<<<
 *         flat_index = high_edges.front()
 *         high_edges.pop_front()
 */
  __pyx_t_19 = __pyx_v_high_edges.size();
  for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
    __pyx_v__ = __pyx_t_20;

    /* "pygeoprocessing\routing\routing_core.pyx":1988
 *     #seed the queue with the high edges
 *     for _ in xrange(high_edges.size()):
 *         flat_index = high_edges.front()             # <<<<<<<<<<<<<<
 *         high_edges.pop_front()
 *         high_edges.push_back(flat_index)
 */
    __pyx_v_flat_index = __pyx_v_high_edges.front();

    /* "pygeoprocessing\routing\routing_core.pyx":1989
 *     for _ in xrange(high_edges.size()):
 *         flat_index = high_edges.front()
 *         high_edges.pop_front()             # <<<<<<<<<<<<<<
 *         high_edges.push_back(flat_index)
 *         high_edges_queue.push_back(flat_index)
 */
    __pyx_v_high_edges.pop_front();

    /* "pygeoprocessing\routing\routing_core.pyx":1990
 *         flat_index = high_edges.front()
 *         high_edges.pop_front()
 *         high_edges.push_back(flat_index)             # <<<<<<<<<<<<<<
 *         high_edges_queue.push_back(flat_index)
 * 
 */
    __pyx_v_high_edges.push_back(__pyx_v_flat_index);

    /* "pygeoprocessing\routing\routing_core.pyx":1991
 *         high_edges.pop_front()
 *         high_edges.push_back(flat_index)
 *         high_edges_queue.push_back(flat_index)             # <<<<<<<<<<<<<<
 * 
 *     marker = -1
 */
    __pyx_v_high_edges_queue.push_back(__pyx_v_flat_index);
  }

  /* "pygeoprocessing\routing\routing_core.pyx":1993
 *         high_edges_queue.push_back(flat_index)
 * 
 *     marker = -1             # <<<<<<<<<<<<<<
 *     high_edges_queue.push_back(marker)
 * 
 */
  __pyx_v_marker = -1;

  /* "pygeoprocessing\routing\routing_core.pyx":1994
 * 
 *     marker = -1
 *     high_edges_queue.push_back(marker)             # <<<<<<<<<<<<<<
 * 
 *     while high_edges_queue.size() > 1:
 */
  __pyx_v_high_edges_queue.push_back(__pyx_v_marker);

  /* "pygeoprocessing\routing\routing_core.pyx":1996
 *     high_edges_queue.push_back(marker)
 * 
 *     while high_edges_queue.size() > 1:             # <<<<<<<<<<<<<<
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 */
  while (1) {
    __pyx_t_21 = ((__pyx_v_high_edges_queue.size() > 1) != 0);
    if (!__pyx_t_21) break;

    /* "pygeoprocessing\routing\routing_core.pyx":1997
 * 
 *     while high_edges_queue.size() > 1:
 *         time(&current_time)             # <<<<<<<<<<<<<<
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(
 */
    time((&__pyx_v_current_time));

    /* "pygeoprocessing\routing\routing_core.pyx":1998
 *     while high_edges_queue.size() > 1:
 *         time(&current_time)
 *         if current_time - last_time > 5.0:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 "away_from_higher, work queue size: %d complete",
 */
    __pyx_t_21 = (((__pyx_v_current_time - __pyx_v_last_time) > 5.0) != 0);
    if (__pyx_t_21) {

      /* "pygeoprocessing\routing\routing_core.pyx":1999
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 "away_from_higher, work queue size: %d complete",
 *                 high_edges_queue.size())
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":2001
 *             LOGGER.info(
 *                 "away_from_higher, work queue size: %d complete",
 *                 high_edges_queue.size())             # <<<<<<<<<<<<<<
 *             last_time = current_time
 * 
 */
      __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_high_edges_queue.size()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_17))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_17);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_17, function);
          __pyx_t_7 = 1;
        }
      }
      __pyx_t_6 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_5) {
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_away_from_higher_work_queue_size);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_kp_s_away_from_higher_work_queue_size);
      __Pyx_GIVEREF(__pyx_kp_s_away_from_higher_work_queue_size);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":2002
 *                 "away_from_higher, work queue size: %d complete",
 *                 high_edges_queue.size())
 *             last_time = current_time             # <<<<<<<<<<<<<<
 * 
 *         flat_index = high_edges_queue.front()
 */
      __pyx_v_last_time = __pyx_v_current_time;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "pygeoprocessing\routing\routing_core.pyx":2004
 *             last_time = current_time
 * 
 *         flat_index = high_edges_queue.front()             # <<<<<<<<<<<<<<
 *         high_edges_queue.pop_front()
 *         if flat_index == marker:
 */
    __pyx_v_flat_index = __pyx_v_high_edges_queue.front();

    /* "pygeoprocessing\routing\routing_core.pyx":2005
 * 
 *         flat_index = high_edges_queue.front()
 *         high_edges_queue.pop_front()             # <<<<<<<<<<<<<<
 *         if flat_index == marker:
 *             loops += 1
 */
    __pyx_v_high_edges_queue.pop_front();

    /* "pygeoprocessing\routing\routing_core.pyx":2006
 *         flat_index = high_edges_queue.front()
 *         high_edges_queue.pop_front()
 *         if flat_index == marker:             # <<<<<<<<<<<<<<
 *             loops += 1
 *             high_edges_queue.push_back(marker)
 */
    __pyx_t_21 = ((__pyx_v_flat_index == __pyx_v_marker) != 0);
    if (__pyx_t_21) {

      /* "pygeoprocessing\routing\routing_core.pyx":2007
 *         high_edges_queue.pop_front()
 *         if flat_index == marker:
 *             loops += 1             # <<<<<<<<<<<<<<
 *             high_edges_queue.push_back(marker)
 *             continue
 */
      __pyx_v_loops = (__pyx_v_loops + 1);

      /* "pygeoprocessing\routing\routing_core.pyx":2008
 *         if flat_index == marker:
 *             loops += 1
 *             high_edges_queue.push_back(marker)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_v_high_edges_queue.push_back(__pyx_v_marker);

      /* "pygeoprocessing\routing\routing_core.pyx":2009
 *             loops += 1
 *             high_edges_queue.push_back(marker)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         flat_row = flat_index / n_cols
 */
      goto __pyx_L7_continue;
    }

    /* "pygeoprocessing\routing\routing_core.pyx":2011
 *             continue
 * 
 *         flat_row = flat_index / n_cols             # <<<<<<<<<<<<<<
 *         flat_col = flat_index % n_cols
 * 
 */
    __pyx_v_flat_row = (__pyx_v_flat_index / __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":2012
 * 
 *         flat_row = flat_index / n_cols
 *         flat_col = flat_index % n_cols             # <<<<<<<<<<<<<<
 * 
 *         block_cache.update_cache(
 */
    __pyx_v_flat_col = (__pyx_v_flat_index % __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":2014
 *         flat_col = flat_index % n_cols
 * 
 *         block_cache.update_cache(             # <<<<<<<<<<<<<<
 *             flat_row, flat_col,
 *             &cell_row_index, &cell_col_index,
 */
    ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_flat_row, __pyx_v_flat_col, (&__pyx_v_cell_row_index), (&__pyx_v_cell_col_index), (&__pyx_v_cell_row_block_offset), (&__pyx_v_cell_col_block_offset));

    /* "pygeoprocessing\routing\routing_core.pyx":2019
 *             &cell_row_block_offset, &cell_col_block_offset)
 * 
 *         flat_mask = flat_mask_block[             # <<<<<<<<<<<<<<
 *             cell_row_index, cell_col_index,
 *             cell_row_block_offset, cell_col_block_offset]
 */
    __pyx_t_11 = __pyx_v_cell_row_index;
    __pyx_t_10 = __pyx_v_cell_col_index;
    __pyx_t_22 = __pyx_v_cell_row_block_offset;
    __pyx_t_23 = __pyx_v_cell_col_block_offset;
    __pyx_v_flat_mask = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_flat_mask_block.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_flat_mask_block.diminfo[1].strides, __pyx_t_22, __pyx_pybuffernd_flat_mask_block.diminfo[2].strides, __pyx_t_23, __pyx_pybuffernd_flat_mask_block.diminfo[3].strides));

    /* "pygeoprocessing\routing\routing_core.pyx":2023
 *             cell_row_block_offset, cell_col_block_offset]
 * 
 *         cell_label = labels_block[             # <<<<<<<<<<<<<<
 *             cell_row_index, cell_col_index,
 *             cell_row_block_offset, cell_col_block_offset]
 */
    __pyx_t_24 = __pyx_v_cell_row_index;
    __pyx_t_25 = __pyx_v_cell_col_index;
    __pyx_t_26 = __pyx_v_cell_row_block_offset;
    __pyx_t_27 = __pyx_v_cell_col_block_offset;
    __pyx_v_cell_label = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_labels_block.diminfo[0].strides, __pyx_t_25, __pyx_pybuffernd_labels_block.diminfo[1].strides, __pyx_t_26, __pyx_pybuffernd_labels_block.diminfo[2].strides, __pyx_t_27, __pyx_pybuffernd_labels_block.diminfo[3].strides));

    /* "pygeoprocessing\routing\routing_core.pyx":2027
 *             cell_row_block_offset, cell_col_block_offset]
 * 
 *         if flat_mask != 0:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    __pyx_t_21 = ((__pyx_v_flat_mask != 0) != 0);
    if (__pyx_t_21) {

      /* "pygeoprocessing\routing\routing_core.pyx":2028
 * 
 *         if flat_mask != 0:
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         #update the cell mask and the max height of the flat
 */
      goto __pyx_L7_continue;
    }

    /* "pygeoprocessing\routing\routing_core.pyx":2034
 *         flat_mask_block[
 *             cell_row_index, cell_col_index,
 *             cell_row_block_offset, cell_col_block_offset] = -loops             # <<<<<<<<<<<<<<
 *         cache_dirty[cell_row_index, cell_col_index] = 1
 *         flat_height[cell_label] = loops
 */
    __pyx_t_28 = __pyx_v_cell_row_index;
    __pyx_t_29 = __pyx_v_cell_col_index;
    __pyx_t_30 = __pyx_v_cell_row_block_offset;
    __pyx_t_31 = __pyx_v_cell_col_block_offset;
    *__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_flat_mask_block.diminfo[0].strides, __pyx_t_29, __pyx_pybuffernd_flat_mask_block.diminfo[1].strides, __pyx_t_30, __pyx_pybuffernd_flat_mask_block.diminfo[2].strides, __pyx_t_31, __pyx_pybuffernd_flat_mask_block.diminfo[3].strides) = (-__pyx_v_loops);

    /* "pygeoprocessing\routing\routing_core.pyx":2035
 *             cell_row_index, cell_col_index,
 *             cell_row_block_offset, cell_col_block_offset] = -loops
 *         cache_dirty[cell_row_index, cell_col_index] = 1             # <<<<<<<<<<<<<<
 *         flat_height[cell_label] = loops
 * 
 */
    __pyx_t_32 = __pyx_v_cell_row_index;
    __pyx_t_33 = __pyx_v_cell_col_index;
    *__Pyx_BufPtrStrided2d(npy_byte *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_32, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_33, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;

    /* "pygeoprocessing\routing\routing_core.pyx":2036
 *             cell_row_block_offset, cell_col_block_offset] = -loops
 *         cache_dirty[cell_row_index, cell_col_index] = 1
 *         flat_height[cell_label] = loops             # <<<<<<<<<<<<<<
 * 
 *         #visit the neighbors
 */
    (__pyx_v_flat_height[__pyx_v_cell_label]) = __pyx_v_loops;

    /* "pygeoprocessing\routing\routing_core.pyx":2039
 * 
 *         #visit the neighbors
 *         for neighbor_index in xrange(8):             # <<<<<<<<<<<<<<
 *             neighbor_row = (
 *                 flat_row + neighbor_row_offset[neighbor_index])
 */
    for (__pyx_t_34 = 0; __pyx_t_34 < 8; __pyx_t_34+=1) {
      __pyx_v_neighbor_index = __pyx_t_34;

      /* "pygeoprocessing\routing\routing_core.pyx":2041
 *         for neighbor_index in xrange(8):
 *             neighbor_row = (
 *                 flat_row + neighbor_row_offset[neighbor_index])             # <<<<<<<<<<<<<<
 *             neighbor_col = (
 *                 flat_col + neighbor_col_offset[neighbor_index])
 */
      __pyx_v_neighbor_row = (__pyx_v_flat_row + (__pyx_v_neighbor_row_offset[__pyx_v_neighbor_index]));

      /* "pygeoprocessing\routing\routing_core.pyx":2043
 *                 flat_row + neighbor_row_offset[neighbor_index])
 *             neighbor_col = (
 *                 flat_col + neighbor_col_offset[neighbor_index])             # <<<<<<<<<<<<<<
 * 
 *             if (neighbor_row < 0 or neighbor_row >= n_rows or
 */
      __pyx_v_neighbor_col = (__pyx_v_flat_col + (__pyx_v_neighbor_col_offset[__pyx_v_neighbor_index]));

      /* "pygeoprocessing\routing\routing_core.pyx":2045
 *                 flat_col + neighbor_col_offset[neighbor_index])
 * 
 *             if (neighbor_row < 0 or neighbor_row >= n_rows or             # <<<<<<<<<<<<<<
 *                     neighbor_col < 0 or neighbor_col >= n_cols):
 *                 continue
 */
      __pyx_t_35 = ((__pyx_v_neighbor_row < 0) != 0);
      if (!__pyx_t_35) {
      } else {
        __pyx_t_21 = __pyx_t_35;
        goto __pyx_L15_bool_binop_done;
      }
      __pyx_t_35 = ((__pyx_v_neighbor_row >= __pyx_v_n_rows) != 0);
      if (!__pyx_t_35) {
      } else {
        __pyx_t_21 = __pyx_t_35;
        goto __pyx_L15_bool_binop_done;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":2046
 * 
 *             if (neighbor_row < 0 or neighbor_row >= n_rows or
 *                     neighbor_col < 0 or neighbor_col >= n_cols):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_35 = ((__pyx_v_neighbor_col < 0) != 0);
      if (!__pyx_t_35) {
      } else {
        __pyx_t_21 = __pyx_t_35;
        goto __pyx_L15_bool_binop_done;
      }
      __pyx_t_35 = ((__pyx_v_neighbor_col >= __pyx_v_n_cols) != 0);
      __pyx_t_21 = __pyx_t_35;
      __pyx_L15_bool_binop_done:;
      if (__pyx_t_21) {

        /* "pygeoprocessing\routing\routing_core.pyx":2047
 *             if (neighbor_row < 0 or neighbor_row >= n_rows or
 *                     neighbor_col < 0 or neighbor_col >= n_cols):
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             block_cache.update_cache(
 */
        goto __pyx_L12_continue;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":2049
 *                 continue
 * 
 *             block_cache.update_cache(             # <<<<<<<<<<<<<<
 *                 neighbor_row, neighbor_col,
 *                 &cell_row_index, &cell_col_index,
 */
      ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_neighbor_row, __pyx_v_neighbor_col, (&__pyx_v_cell_row_index), (&__pyx_v_cell_col_index), (&__pyx_v_cell_row_block_offset), (&__pyx_v_cell_col_block_offset));

      /* "pygeoprocessing\routing\routing_core.pyx":2054
 *                 &cell_row_block_offset, &cell_col_block_offset)
 * 
 *             neighbor_label = labels_block[             # <<<<<<<<<<<<<<
 *                 cell_row_index, cell_col_index,
 *                 cell_row_block_offset, cell_col_block_offset]
 */
      __pyx_t_36 = __pyx_v_cell_row_index;
      __pyx_t_37 = __pyx_v_cell_col_index;
      __pyx_t_38 = __pyx_v_cell_row_block_offset;
      __pyx_t_39 = __pyx_v_cell_col_block_offset;
      __pyx_v_neighbor_label = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.buf, __pyx_t_36, __pyx_pybuffernd_labels_block.diminfo[0].strides, __pyx_t_37, __pyx_pybuffernd_labels_block.diminfo[1].strides, __pyx_t_38, __pyx_pybuffernd_labels_block.diminfo[2].strides, __pyx_t_39, __pyx_pybuffernd_labels_block.diminfo[3].strides));

      /* "pygeoprocessing\routing\routing_core.pyx":2058
 *                 cell_row_block_offset, cell_col_block_offset]
 * 
 *             neighbor_flow = flow_direction_block[             # <<<<<<<<<<<<<<
 *                 cell_row_index, cell_col_index,
 *                 cell_row_block_offset, cell_col_block_offset]
 */
      __pyx_t_40 = __pyx_v_cell_row_index;
      __pyx_t_41 = __pyx_v_cell_col_index;
      __pyx_t_42 = __pyx_v_cell_row_block_offset;
      __pyx_t_43 = __pyx_v_cell_col_block_offset;
      __pyx_v_neighbor_flow = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.buf, __pyx_t_40, __pyx_pybuffernd_flow_direction_block.diminfo[0].strides, __pyx_t_41, __pyx_pybuffernd_flow_direction_block.diminfo[1].strides, __pyx_t_42, __pyx_pybuffernd_flow_direction_block.diminfo[2].strides, __pyx_t_43, __pyx_pybuffernd_flow_direction_block.diminfo[3].strides));

      /* "pygeoprocessing\routing\routing_core.pyx":2062
 *                 cell_row_block_offset, cell_col_block_offset]
 * 
 *             if (neighbor_label != labels_nodata and             # <<<<<<<<<<<<<<
 *                     neighbor_label == cell_label and
 *                     neighbor_flow == flow_nodata):
 */
      __pyx_t_35 = ((__pyx_v_neighbor_label != __pyx_v_labels_nodata) != 0);
      if (__pyx_t_35) {
      } else {
        __pyx_t_21 = __pyx_t_35;
        goto __pyx_L20_bool_binop_done;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":2063
 * 
 *             if (neighbor_label != labels_nodata and
 *                     neighbor_label == cell_label and             # <<<<<<<<<<<<<<
 *                     neighbor_flow == flow_nodata):
 *                 high_edges_queue.push_back(neighbor_row * n_cols + neighbor_col)
 */
      __pyx_t_35 = ((__pyx_v_neighbor_label == __pyx_v_cell_label) != 0);
      if (__pyx_t_35) {
      } else {
        __pyx_t_21 = __pyx_t_35;
        goto __pyx_L20_bool_binop_done;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":2064
 *             if (neighbor_label != labels_nodata and
 *                     neighbor_label == cell_label and
 *                     neighbor_flow == flow_nodata):             # <<<<<<<<<<<<<<
 *                 high_edges_queue.push_back(neighbor_row * n_cols + neighbor_col)
 * 
 */
      __pyx_t_35 = ((__pyx_v_neighbor_flow == __pyx_v_flow_nodata) != 0);
      __pyx_t_21 = __pyx_t_35;
      __pyx_L20_bool_binop_done:;
      if (__pyx_t_21) {

        /* "pygeoprocessing\routing\routing_core.pyx":2065
 *                     neighbor_label == cell_label and
 *                     neighbor_flow == flow_nodata):
 *                 high_edges_queue.push_back(neighbor_row * n_cols + neighbor_col)             # <<<<<<<<<<<<<<
 * 
 *     block_cache.flush_cache()
 */
        __pyx_v_high_edges_queue.push_back(((__pyx_v_neighbor_row * __pyx_v_n_cols) + __pyx_v_neighbor_col));
        goto __pyx_L19;
      }
      __pyx_L19:;
      __pyx_L12_continue:;
    }
    __pyx_L7_continue:;
  }

  /* "pygeoprocessing\routing\routing_core.pyx":2067
 *                 high_edges_queue.push_back(neighbor_row * n_cols + neighbor_col)
 * 
 *     block_cache.flush_cache()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->flush_cache(__pyx_v_block_cache);

  /* "pygeoprocessing\routing\routing_core.pyx":1893
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef away_from_higher(             # <<<<<<<<<<<<<<
 *         deque[int] &high_edges, labels_uri, flow_direction_uri, flat_mask_uri,
 *         map[int, int] &flat_height):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_17);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels_block.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.away_from_higher", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels_block.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_labels_ds);
  __Pyx_XDECREF(__pyx_v_labels_band);
  __Pyx_XDECREF(__pyx_v_flat_mask_ds);
  __Pyx_XDECREF(__pyx_v_flat_mask_band);
  __Pyx_XDECREF(__pyx_v_flow_direction_ds);
  __Pyx_XDECREF(__pyx_v_flow_direction_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_labels_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_flat_mask_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_direction_block);
  __Pyx_XDECREF(__pyx_v_band_list);
  __Pyx_XDECREF(__pyx_v_block_list);
  __Pyx_XDECREF(__pyx_v_update_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_cache_dirty);
  __Pyx_XDECREF((PyObject *)__pyx_v_block_cache);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":2073
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef towards_lower(             # <<<<<<<<<<<<<<
 *         deque[int] &low_edges, labels_uri, flow_direction_uri, flat_mask_uri,
 *         map[int, int] &flat_height):
 */

static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_towards_lower(std::deque<int>  &__pyx_v_low_edges, PyObject *__pyx_v_labels_uri, PyObject *__pyx_v_flow_direction_uri, PyObject *__pyx_v_flat_mask_uri, std::map<int,int>  &__pyx_v_flat_height) {
  int *__pyx_v_neighbor_row_offset;
  int *__pyx_v_neighbor_col_offset;
  CYTHON_UNUSED PyObject *__pyx_v_flat_mask_nodata = NULL;
  PyObject *__pyx_v_labels_ds = NULL;
  PyObject *__pyx_v_labels_band = NULL;
  PyObject *__pyx_v_flat_mask_ds = NULL;
  PyObject *__pyx_v_flat_mask_band = NULL;
  PyObject *__pyx_v_flow_direction_ds = NULL;
  PyObject *__pyx_v_flow_direction_band = NULL;
  int __pyx_v_block_col_size;
  int __pyx_v_block_row_size;
  int __pyx_v_n_rows;
  int __pyx_v_n_cols;
  PyArrayObject *__pyx_v_labels_block = 0;
  PyArrayObject *__pyx_v_flat_mask_block = 0;
  PyArrayObject *__pyx_v_flow_direction_block = 0;
  PyObject *__pyx_v_band_list = NULL;
  PyObject *__pyx_v_block_list = NULL;
  PyObject *__pyx_v_update_list = NULL;
  PyArrayObject *__pyx_v_cache_dirty = 0;
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_block_cache = 0;
  int __pyx_v_cell_row_index;
  int __pyx_v_cell_col_index;
  int __pyx_v_cell_row_block_offset;
  int __pyx_v_cell_col_block_offset;
  int __pyx_v_loops;
  std::deque<int>  __pyx_v_low_edges_queue;
  int __pyx_v_neighbor_row;
  int __pyx_v_neighbor_col;
  int __pyx_v_flat_index;
  int __pyx_v_flat_row;
  int __pyx_v_flat_col;
  int __pyx_v_flat_mask;
  int __pyx_v_labels_nodata;
  int __pyx_v_cell_label;
  int __pyx_v_neighbor_label;
  float __pyx_v_neighbor_flow;
  float __pyx_v_flow_nodata;
  CYTHON_UNUSED size_t __pyx_v__;
  time_t __pyx_v_last_time;
  time_t __pyx_v_current_time;
  long __pyx_v_marker;
  long __pyx_v_neighbor_index;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cache_dirty;
  __Pyx_Buffer __pyx_pybuffer_cache_dirty;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flat_mask_block;
  __Pyx_Buffer __pyx_pybuffer_flat_mask_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flow_direction_block;
  __Pyx_Buffer __pyx_pybuffer_flow_direction_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_labels_block;
  __Pyx_Buffer __pyx_pybuffer_labels_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[8];
  int __pyx_t_2[8];
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  PyArrayObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  float __pyx_t_18;
  size_t __pyx_t_19;
  size_t __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  int __pyx_t_25;
  int __pyx_t_26;
  int __pyx_t_27;
  int __pyx_t_28;
  int __pyx_t_29;
  int __pyx_t_30;
  int __pyx_t_31;
  int __pyx_t_32;
  int __pyx_t_33;
  int __pyx_t_34;
  int __pyx_t_35;
  int __pyx_t_36;
  int __pyx_t_37;
  long __pyx_t_38;
  int __pyx_t_39;
  int __pyx_t_40;
  int __pyx_t_41;
  int __pyx_t_42;
  int __pyx_t_43;
  int __pyx_t_44;
  int __pyx_t_45;
  int __pyx_t_46;
  int __pyx_t_47;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("towards_lower", 0);
  __pyx_pybuffer_labels_block.pybuffer.buf = NULL;
  __pyx_pybuffer_labels_block.refcount = 0;
  __pyx_pybuffernd_labels_block.data = NULL;
  __pyx_pybuffernd_labels_block.rcbuffer = &__pyx_pybuffer_labels_block;
  __pyx_pybuffer_flat_mask_block.pybuffer.buf = NULL;
  __pyx_pybuffer_flat_mask_block.refcount = 0;
  __pyx_pybuffernd_flat_mask_block.data = NULL;
  __pyx_pybuffernd_flat_mask_block.rcbuffer = &__pyx_pybuffer_flat_mask_block;
  __pyx_pybuffer_flow_direction_block.pybuffer.buf = NULL;
  __pyx_pybuffer_flow_direction_block.refcount = 0;
  __pyx_pybuffernd_flow_direction_block.data = NULL;
  __pyx_pybuffernd_flow_direction_block.rcbuffer = &__pyx_pybuffer_flow_direction_block;
  __pyx_pybuffer_cache_dirty.pybuffer.buf = NULL;
  __pyx_pybuffer_cache_dirty.refcount = 0;
  __pyx_pybuffernd_cache_dirty.data = NULL;
  __pyx_pybuffernd_cache_dirty.rcbuffer = &__pyx_pybuffer_cache_dirty;

  /* "pygeoprocessing\routing\routing_core.pyx":2099
 *             nothing"""
 * 
 *     cdef int *neighbor_row_offset = [0, -1, -1, -1,  0,  1, 1, 1]             # <<<<<<<<<<<<<<
 *     cdef int *neighbor_col_offset = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 */
  __pyx_t_1[0] = 0;
  __pyx_t_1[1] = -1;
  __pyx_t_1[2] = -1;
  __pyx_t_1[3] = -1;
  __pyx_t_1[4] = 0;
  __pyx_t_1[5] = 1;
  __pyx_t_1[6] = 1;
  __pyx_t_1[7] = 1;
  __pyx_v_neighbor_row_offset = __pyx_t_1;

  /* "pygeoprocessing\routing\routing_core.pyx":2100
 * 
 *     cdef int *neighbor_row_offset = [0, -1, -1, -1,  0,  1, 1, 1]
 *     cdef int *neighbor_col_offset = [1,  1,  0, -1, -1, -1, 0, 1]             # <<<<<<<<<<<<<<
 * 
 *     flat_mask_nodata = pygeoprocessing.get_nodata_from_uri(flat_mask_uri)
 */
  __pyx_t_2[0] = 1;
  __pyx_t_2[1] = 1;
  __pyx_t_2[2] = 0;
  __pyx_t_2[3] = -1;
  __pyx_t_2[4] = -1;
  __pyx_t_2[5] = -1;
  __pyx_t_2[6] = 0;
  __pyx_t_2[7] = 1;
  __pyx_v_neighbor_col_offset = __pyx_t_2;

  /* "pygeoprocessing\routing\routing_core.pyx":2102
 *     cdef int *neighbor_col_offset = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 *     flat_mask_nodata = pygeoprocessing.get_nodata_from_uri(flat_mask_uri)             # <<<<<<<<<<<<<<
 * 
 *     labels_ds = gdal.Open(labels_uri)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_flat_mask_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_flat_mask_uri);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_flat_mask_uri);
    __Pyx_GIVEREF(__pyx_v_flat_mask_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_flat_mask_nodata = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2104
 *     flat_mask_nodata = pygeoprocessing.get_nodata_from_uri(flat_mask_uri)
 * 
 *     labels_ds = gdal.Open(labels_uri)             # <<<<<<<<<<<<<<
 *     labels_band = labels_ds.GetRasterBand(1)
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Open); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_labels_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_labels_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_labels_uri);
    __Pyx_GIVEREF(__pyx_v_labels_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_labels_ds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2105
 * 
 *     labels_ds = gdal.Open(labels_uri)
 *     labels_band = labels_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_labels_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_labels_band = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2106
 *     labels_ds = gdal.Open(labels_uri)
 *     labels_band = labels_ds.GetRasterBand(1)
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)             # <<<<<<<<<<<<<<
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Open); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (__pyx_t_3) {
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_flat_mask_uri);
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_flat_mask_uri);
  __Pyx_GIVEREF(__pyx_v_flat_mask_uri);
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_flat_mask_ds = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2107
 *     labels_band = labels_ds.GetRasterBand(1)
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_flat_mask_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_flat_mask_band = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2108
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)
 *     flow_direction_ds = gdal.Open(flow_direction_uri)             # <<<<<<<<<<<<<<
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_Open); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_flow_direction_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_flow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_flow_direction_ds = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2109
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_direction_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_flow_direction_band = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2112
 * 
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = labels_band.GetBlockSize()             # <<<<<<<<<<<<<<
 *     cdef int n_rows = labels_ds.RasterYSize
 *     cdef int n_cols = labels_ds.RasterXSize
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_labels_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
    PyObject* sequence = __pyx_t_8;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_5 = __pyx_t_9(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_6), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_block_col_size = __pyx_t_10;
  __pyx_v_block_row_size = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":2113
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = labels_band.GetBlockSize()
 *     cdef int n_rows = labels_ds.RasterYSize             # <<<<<<<<<<<<<<
 *     cdef int n_cols = labels_ds.RasterXSize
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_labels_ds, __pyx_n_s_RasterYSize); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_n_rows = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":2114
 *     block_col_size, block_row_size = labels_band.GetBlockSize()
 *     cdef int n_rows = labels_ds.RasterYSize
 *     cdef int n_cols = labels_ds.RasterXSize             # <<<<<<<<<<<<<<
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_labels_ds, __pyx_n_s_RasterXSize); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_n_cols = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":2116
 *     cdef int n_cols = labels_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2117
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = PyTuple_New(4); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_8 = 0;
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2116
 *     cdef int n_cols = labels_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  __pyx_t_12 = 0;
  __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);

  /* "pygeoprocessing\routing\routing_core.pyx":2118
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int32); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2116
 *     cdef int n_cols = labels_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] labels_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_12); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_labels_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn_npy_int32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_labels_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_labels_block.diminfo[0].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_labels_block.diminfo[0].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_labels_block.diminfo[1].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_labels_block.diminfo[1].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_labels_block.diminfo[2].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_labels_block.diminfo[2].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_labels_block.diminfo[3].strides = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_labels_block.diminfo[3].shape = __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_13 = 0;
  __pyx_v_labels_block = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2119
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2120
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flow_direction_block = (
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2119
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);

  /* "pygeoprocessing\routing\routing_core.pyx":2121
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flow_direction_block = (
 *         numpy.zeros(
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int32); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2119
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.int32)
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn_npy_int32, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_flat_mask_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_flat_mask_block.diminfo[0].strides = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flat_mask_block.diminfo[0].shape = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flat_mask_block.diminfo[1].strides = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flat_mask_block.diminfo[1].shape = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_flat_mask_block.diminfo[2].strides = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_flat_mask_block.diminfo[2].shape = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_flat_mask_block.diminfo[3].strides = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_flat_mask_block.diminfo[3].shape = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_14 = 0;
  __pyx_v_flat_mask_block = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2123
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flow_direction_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int32))
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2124
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flow_direction_block = (
 *         numpy.zeros(
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *             dtype=numpy.int32))
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_6 = 0;
  __pyx_t_12 = 0;
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2123
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flow_direction_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int32))
 */
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":2125
 *         numpy.zeros(
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int32))             # <<<<<<<<<<<<<<
 * 
 *     band_list = [labels_band, flat_mask_band, flow_direction_band]
 */
  __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_int32); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2123
 *         dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flow_direction_block = (
 *         numpy.zeros(             # <<<<<<<<<<<<<<
 *             (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *             dtype=numpy.int32))
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn_npy_int32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_flow_direction_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_flow_direction_block.diminfo[0].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flow_direction_block.diminfo[0].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flow_direction_block.diminfo[1].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flow_direction_block.diminfo[1].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_flow_direction_block.diminfo[2].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_flow_direction_block.diminfo[2].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_flow_direction_block.diminfo[3].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_flow_direction_block.diminfo[3].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_15 = 0;
  __pyx_v_flow_direction_block = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2127
 *             dtype=numpy.int32))
 * 
 *     band_list = [labels_band, flat_mask_band, flow_direction_band]             # <<<<<<<<<<<<<<
 *     block_list = [labels_block, flat_mask_block, flow_direction_block]
 *     update_list = [False, True, False]
 */
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_labels_band);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_labels_band);
  __Pyx_GIVEREF(__pyx_v_labels_band);
  __Pyx_INCREF(__pyx_v_flat_mask_band);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_v_flat_mask_band);
  __Pyx_GIVEREF(__pyx_v_flat_mask_band);
  __Pyx_INCREF(__pyx_v_flow_direction_band);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_v_flow_direction_band);
  __Pyx_GIVEREF(__pyx_v_flow_direction_band);
  __pyx_v_band_list = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2128
 * 
 *     band_list = [labels_band, flat_mask_band, flow_direction_band]
 *     block_list = [labels_block, flat_mask_block, flow_direction_block]             # <<<<<<<<<<<<<<
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 */
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)__pyx_v_labels_block));
  PyList_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_labels_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_labels_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_flat_mask_block));
  PyList_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_v_flat_mask_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_flat_mask_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_flow_direction_block));
  PyList_SET_ITEM(__pyx_t_6, 2, ((PyObject *)__pyx_v_flow_direction_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_flow_direction_block));
  __pyx_v_block_list = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2129
 *     band_list = [labels_band, flat_mask_band, flow_direction_band]
 *     block_list = [labels_block, flat_mask_block, flow_direction_block]
 *     update_list = [False, True, False]             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 */
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_6, 0, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_True);
  PyList_SET_ITEM(__pyx_t_6, 1, Py_True);
  __Pyx_GIVEREF(Py_True);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_6, 2, Py_False);
  __Pyx_GIVEREF(Py_False);
  __pyx_v_update_list = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2130
 *     block_list = [labels_block, flat_mask_block, flow_direction_block]
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2131
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2130
 *     block_list = [labels_block, flat_mask_block, flow_direction_block]
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);

  /* "pygeoprocessing\routing\routing_core.pyx":2131
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_byte); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2130
 *     block_list = [labels_block, flat_mask_block, flow_direction_block]
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_12) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_12, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_16 = ((PyArrayObject *)__pyx_t_12);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn_npy_byte, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_cache_dirty = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_cache_dirty.diminfo[0].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cache_dirty.diminfo[0].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cache_dirty.diminfo[1].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cache_dirty.diminfo[1].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_16 = 0;
  __pyx_v_cache_dirty = ((PyArrayObject *)__pyx_t_12);
  __pyx_t_12 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2134
 * 
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,             # <<<<<<<<<<<<<<
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 */
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_n_rows); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);

  /* "pygeoprocessing\routing\routing_core.pyx":2135
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)             # <<<<<<<<<<<<<<
 * 
 *     cdef int cell_row_index, cell_col_index
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygeoprocessing\routing\routing_core.pyx":2133
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 *     cdef BlockCache block_cache = BlockCache(             # <<<<<<<<<<<<<<
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 */
  __pyx_t_17 = PyTuple_New(10); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_17, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_17, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_17, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_17, 5, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_band_list);
  PyTuple_SET_ITEM(__pyx_t_17, 6, __pyx_v_band_list);
  __Pyx_GIVEREF(__pyx_v_band_list);
  __Pyx_INCREF(__pyx_v_block_list);
  PyTuple_SET_ITEM(__pyx_t_17, 7, __pyx_v_block_list);
  __Pyx_GIVEREF(__pyx_v_block_list);
  __Pyx_INCREF(__pyx_v_update_list);
  PyTuple_SET_ITEM(__pyx_t_17, 8, __pyx_v_update_list);
  __Pyx_GIVEREF(__pyx_v_update_list);
  __Pyx_INCREF(((PyObject *)__pyx_v_cache_dirty));
  PyTuple_SET_ITEM(__pyx_t_17, 9, ((PyObject *)__pyx_v_cache_dirty));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cache_dirty));
  __pyx_t_12 = 0;
  __pyx_t_8 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache)), __pyx_t_17, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_v_block_cache = ((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2141
 *     cdef int cell_row_block_offset, cell_col_block_offset
 * 
 *     cdef int loops = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef deque[int] low_edges_queue
 */
  __pyx_v_loops = 1;

  /* "pygeoprocessing\routing\routing_core.pyx":2148
 *     cdef int flat_row, flat_col
 *     cdef int flat_mask
 *     cdef int labels_nodata = pygeoprocessing.get_nodata_from_uri(labels_uri)             # <<<<<<<<<<<<<<
 *     cdef int cell_label, neighbor_label
 *     cdef float neighbor_flow
 */
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_17) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_labels_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_17); __Pyx_GIVEREF(__pyx_t_17); __pyx_t_17 = NULL;
    __Pyx_INCREF(__pyx_v_labels_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_labels_uri);
    __Pyx_GIVEREF(__pyx_v_labels_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_labels_nodata = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":2151
 *     cdef int cell_label, neighbor_label
 *     cdef float neighbor_flow
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri)
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2152
 *     cdef float neighbor_flow
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(
 *         flow_direction_uri)             # <<<<<<<<<<<<<<
 * 
 *     #seed the queue with the low edges
 */
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_flow_direction_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_17 = PyTuple_New(1+1); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_17, 0+1, __pyx_v_flow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_17, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2151
 *     cdef int cell_label, neighbor_label
 *     cdef float neighbor_flow
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri)
 * 
 */
  __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_18 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_nodata = __pyx_t_18;

  /* "pygeoprocessing\routing\routing_core.pyx":2155
 * 
 *     #seed the queue with the low edges
 *     for _ in xrange(low_edges.size()):             # <<<<<<<<<<<<<<
 *         flat_index = low_edges.front()
 *         low_edges.pop_front()
 */
  __pyx_t_19 = __pyx_v_low_edges.size();
  for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
    __pyx_v__ = __pyx_t_20;

    /* "pygeoprocessing\routing\routing_core.pyx":2156
 *     #seed the queue with the low edges
 *     for _ in xrange(low_edges.size()):
 *         flat_index = low_edges.front()             # <<<<<<<<<<<<<<
 *         low_edges.pop_front()
 *         low_edges.push_back(flat_index)
 */
    __pyx_v_flat_index = __pyx_v_low_edges.front();

    /* "pygeoprocessing\routing\routing_core.pyx":2157
 *     for _ in xrange(low_edges.size()):
 *         flat_index = low_edges.front()
 *         low_edges.pop_front()             # <<<<<<<<<<<<<<
 *         low_edges.push_back(flat_index)
 *         low_edges_queue.push_back(flat_index)
 */
    __pyx_v_low_edges.pop_front();

    /* "pygeoprocessing\routing\routing_core.pyx":2158
 *         flat_index = low_edges.front()
 *         low_edges.pop_front()
 *         low_edges.push_back(flat_index)             # <<<<<<<<<<<<<<
 *         low_edges_queue.push_back(flat_index)
 * 
 */
    __pyx_v_low_edges.push_back(__pyx_v_flat_index);

    /* "pygeoprocessing\routing\routing_core.pyx":2159
 *         low_edges.pop_front()
 *         low_edges.push_back(flat_index)
 *         low_edges_queue.push_back(flat_index)             # <<<<<<<<<<<<<<
 * 
 *     cdef time_t last_time, current_time
 */
    __pyx_v_low_edges_queue.push_back(__pyx_v_flat_index);
  }

  /* "pygeoprocessing\routing\routing_core.pyx":2162
 * 
 *     cdef time_t last_time, current_time
 *     time(&last_time)             # <<<<<<<<<<<<<<
 * 
 *     marker = -1
 */
  time((&__pyx_v_last_time));

  /* "pygeoprocessing\routing\routing_core.pyx":2164
 *     time(&last_time)
 * 
 *     marker = -1             # <<<<<<<<<<<<<<
 *     low_edges_queue.push_back(marker)
 *     while low_edges_queue.size() > 1:
 */
  __pyx_v_marker = -1;

  /* "pygeoprocessing\routing\routing_core.pyx":2165
 * 
 *     marker = -1
 *     low_edges_queue.push_back(marker)             # <<<<<<<<<<<<<<
 *     while low_edges_queue.size() > 1:
 * 
 */
  __pyx_v_low_edges_queue.push_back(__pyx_v_marker);

  /* "pygeoprocessing\routing\routing_core.pyx":2166
 *     marker = -1
 *     low_edges_queue.push_back(marker)
 *     while low_edges_queue.size() > 1:             # <<<<<<<<<<<<<<
 * 
 *         time(&current_time)
 */
  while (1) {
    __pyx_t_21 = ((__pyx_v_low_edges_queue.size() > 1) != 0);
    if (!__pyx_t_21) break;

    /* "pygeoprocessing\routing\routing_core.pyx":2168
 *     while low_edges_queue.size() > 1:
 * 
 *         time(&current_time)             # <<<<<<<<<<<<<<
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(
 */
    time((&__pyx_v_current_time));

    /* "pygeoprocessing\routing\routing_core.pyx":2169
 * 
 *         time(&current_time)
 *         if current_time - last_time > 5.0:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 "toward_lower work queue size: %d", low_edges_queue.size())
 */
    __pyx_t_21 = (((__pyx_v_current_time - __pyx_v_last_time) > 5.0) != 0);
    if (__pyx_t_21) {

      /* "pygeoprocessing\routing\routing_core.pyx":2170
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 "toward_lower work queue size: %d", low_edges_queue.size())
 *             last_time = current_time
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":2171
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(
 *                 "toward_lower work queue size: %d", low_edges_queue.size())             # <<<<<<<<<<<<<<
 *             last_time = current_time
 * 
 */
      __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_low_edges_queue.size()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_17))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_17);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_17, function);
          __pyx_t_7 = 1;
        }
      }
      __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_6) {
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_toward_lower_work_queue_size_d);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_kp_s_toward_lower_work_queue_size_d);
      __Pyx_GIVEREF(__pyx_kp_s_toward_lower_work_queue_size_d);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":2172
 *             LOGGER.info(
 *                 "toward_lower work queue size: %d", low_edges_queue.size())
 *             last_time = current_time             # <<<<<<<<<<<<<<
 * 
 *         flat_index = low_edges_queue.front()
 */
      __pyx_v_last_time = __pyx_v_current_time;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "pygeoprocessing\routing\routing_core.pyx":2174
 *             last_time = current_time
 * 
 *         flat_index = low_edges_queue.front()             # <<<<<<<<<<<<<<
 *         low_edges_queue.pop_front()
 *         if flat_index == marker:
 */
    __pyx_v_flat_index = __pyx_v_low_edges_queue.front();

    /* "pygeoprocessing\routing\routing_core.pyx":2175
 * 
 *         flat_index = low_edges_queue.front()
 *         low_edges_queue.pop_front()             # <<<<<<<<<<<<<<
 *         if flat_index == marker:
 *             loops += 1
 */
    __pyx_v_low_edges_queue.pop_front();

    /* "pygeoprocessing\routing\routing_core.pyx":2176
 *         flat_index = low_edges_queue.front()
 *         low_edges_queue.pop_front()
 *         if flat_index == marker:             # <<<<<<<<<<<<<<
 *             loops += 1
 *             low_edges_queue.push_back(marker)
 */
    __pyx_t_21 = ((__pyx_v_flat_index == __pyx_v_marker) != 0);
    if (__pyx_t_21) {

      /* "pygeoprocessing\routing\routing_core.pyx":2177
 *         low_edges_queue.pop_front()
 *         if flat_index == marker:
 *             loops += 1             # <<<<<<<<<<<<<<
 *             low_edges_queue.push_back(marker)
 *             continue
 */
      __pyx_v_loops = (__pyx_v_loops + 1);

      /* "pygeoprocessing\routing\routing_core.pyx":2178
 *         if flat_index == marker:
 *             loops += 1
 *             low_edges_queue.push_back(marker)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_v_low_edges_queue.push_back(__pyx_v_marker);

      /* "pygeoprocessing\routing\routing_core.pyx":2179
 *             loops += 1
 *             low_edges_queue.push_back(marker)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         flat_row = flat_index / n_cols
 */
      goto __pyx_L7_continue;
    }

    /* "pygeoprocessing\routing\routing_core.pyx":2181
 *             continue
 * 
 *         flat_row = flat_index / n_cols             # <<<<<<<<<<<<<<
 *         flat_col = flat_index % n_cols
 * 
 */
    __pyx_v_flat_row = (__pyx_v_flat_index / __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":2182
 * 
 *         flat_row = flat_index / n_cols
 *         flat_col = flat_index % n_cols             # <<<<<<<<<<<<<<
 * 
 *         block_cache.update_cache(
 */
    __pyx_v_flat_col = (__pyx_v_flat_index % __pyx_v_n_cols);

    /* "pygeoprocessing\routing\routing_core.pyx":2184
 *         flat_col = flat_index % n_cols
 * 
 *         block_cache.update_cache(             # <<<<<<<<<<<<<<
 *             flat_row, flat_col,
 *             &cell_row_index, &cell_col_index,
 */
    ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_flat_row, __pyx_v_flat_col, (&__pyx_v_cell_row_index), (&__pyx_v_cell_col_index), (&__pyx_v_cell_row_block_offset), (&__pyx_v_cell_col_block_offset));

    /* "pygeoprocessing\routing\routing_core.pyx":2189
 *             &cell_row_block_offset, &cell_col_block_offset)
 * 
 *         flat_mask = flat_mask_block[             # <<<<<<<<<<<<<<
 *             cell_row_index, cell_col_index,
 *             cell_row_block_offset, cell_col_block_offset]
 */
    __pyx_t_11 = __pyx_v_cell_row_index;
    __pyx_t_10 = __pyx_v_cell_col_index;
    __pyx_t_22 = __pyx_v_cell_row_block_offset;
    __pyx_t_23 = __pyx_v_cell_col_block_offset;
    __pyx_v_flat_mask = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_flat_mask_block.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_flat_mask_block.diminfo[1].strides, __pyx_t_22, __pyx_pybuffernd_flat_mask_block.diminfo[2].strides, __pyx_t_23, __pyx_pybuffernd_flat_mask_block.diminfo[3].strides));

    /* "pygeoprocessing\routing\routing_core.pyx":2193
 *             cell_row_block_offset, cell_col_block_offset]
 * 
 *         if flat_mask > 0:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    __pyx_t_21 = ((__pyx_v_flat_mask > 0) != 0);
    if (__pyx_t_21) {

      /* "pygeoprocessing\routing\routing_core.pyx":2194
 * 
 *         if flat_mask > 0:
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         cell_label = labels_block[
 */
      goto __pyx_L7_continue;
    }

    /* "pygeoprocessing\routing\routing_core.pyx":2196
 *             continue
 * 
 *         cell_label = labels_block[             # <<<<<<<<<<<<<<
 *             cell_row_index, cell_col_index,
 *             cell_row_block_offset, cell_col_block_offset]
 */
    __pyx_t_24 = __pyx_v_cell_row_index;
    __pyx_t_25 = __pyx_v_cell_col_index;
    __pyx_t_26 = __pyx_v_cell_row_block_offset;
    __pyx_t_27 = __pyx_v_cell_col_block_offset;
    __pyx_v_cell_label = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_labels_block.diminfo[0].strides, __pyx_t_25, __pyx_pybuffernd_labels_block.diminfo[1].strides, __pyx_t_26, __pyx_pybuffernd_labels_block.diminfo[2].strides, __pyx_t_27, __pyx_pybuffernd_labels_block.diminfo[3].strides));

    /* "pygeoprocessing\routing\routing_core.pyx":2200
 *             cell_row_block_offset, cell_col_block_offset]
 * 
 *         if flat_mask < 0:             # <<<<<<<<<<<<<<
 *             flat_mask_block[
 *                 cell_row_index, cell_col_index,
 */
    __pyx_t_21 = ((__pyx_v_flat_mask < 0) != 0);
    if (__pyx_t_21) {

      /* "pygeoprocessing\routing\routing_core.pyx":2203
 *             flat_mask_block[
 *                 cell_row_index, cell_col_index,
 *                 cell_row_block_offset, cell_col_block_offset] = (             # <<<<<<<<<<<<<<
 *                     flat_height[cell_label] + flat_mask + 2 * loops)
 *         else:
 */
      __pyx_t_28 = __pyx_v_cell_row_index;
      __pyx_t_29 = __pyx_v_cell_col_index;
      __pyx_t_30 = __pyx_v_cell_row_block_offset;
      __pyx_t_31 = __pyx_v_cell_col_block_offset;
      *__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_flat_mask_block.diminfo[0].strides, __pyx_t_29, __pyx_pybuffernd_flat_mask_block.diminfo[1].strides, __pyx_t_30, __pyx_pybuffernd_flat_mask_block.diminfo[2].strides, __pyx_t_31, __pyx_pybuffernd_flat_mask_block.diminfo[3].strides) = (((__pyx_v_flat_height[__pyx_v_cell_label]) + __pyx_v_flat_mask) + (2 * __pyx_v_loops));
      goto __pyx_L12;
    }
    /*else*/ {

      /* "pygeoprocessing\routing\routing_core.pyx":2208
 *             flat_mask_block[
 *                 cell_row_index, cell_col_index,
 *                 cell_row_block_offset, cell_col_block_offset] = 2 * loops             # <<<<<<<<<<<<<<
 *         cache_dirty[cell_row_index, cell_col_index] = 1
 * 
 */
      __pyx_t_32 = __pyx_v_cell_row_index;
      __pyx_t_33 = __pyx_v_cell_col_index;
      __pyx_t_34 = __pyx_v_cell_row_block_offset;
      __pyx_t_35 = __pyx_v_cell_col_block_offset;
      *__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.buf, __pyx_t_32, __pyx_pybuffernd_flat_mask_block.diminfo[0].strides, __pyx_t_33, __pyx_pybuffernd_flat_mask_block.diminfo[1].strides, __pyx_t_34, __pyx_pybuffernd_flat_mask_block.diminfo[2].strides, __pyx_t_35, __pyx_pybuffernd_flat_mask_block.diminfo[3].strides) = (2 * __pyx_v_loops);
    }
    __pyx_L12:;

    /* "pygeoprocessing\routing\routing_core.pyx":2209
 *                 cell_row_index, cell_col_index,
 *                 cell_row_block_offset, cell_col_block_offset] = 2 * loops
 *         cache_dirty[cell_row_index, cell_col_index] = 1             # <<<<<<<<<<<<<<
 * 
 *         #visit the neighbors
 */
    __pyx_t_36 = __pyx_v_cell_row_index;
    __pyx_t_37 = __pyx_v_cell_col_index;
    *__Pyx_BufPtrStrided2d(npy_byte *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_36, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_37, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;

    /* "pygeoprocessing\routing\routing_core.pyx":2212
 * 
 *         #visit the neighbors
 *         for neighbor_index in xrange(8):             # <<<<<<<<<<<<<<
 *             neighbor_row = (
 *                 flat_row + neighbor_row_offset[neighbor_index])
 */
    for (__pyx_t_38 = 0; __pyx_t_38 < 8; __pyx_t_38+=1) {
      __pyx_v_neighbor_index = __pyx_t_38;

      /* "pygeoprocessing\routing\routing_core.pyx":2214
 *         for neighbor_index in xrange(8):
 *             neighbor_row = (
 *                 flat_row + neighbor_row_offset[neighbor_index])             # <<<<<<<<<<<<<<
 *             neighbor_col = (
 *                 flat_col + neighbor_col_offset[neighbor_index])
 */
      __pyx_v_neighbor_row = (__pyx_v_flat_row + (__pyx_v_neighbor_row_offset[__pyx_v_neighbor_index]));

      /* "pygeoprocessing\routing\routing_core.pyx":2216
 *                 flat_row + neighbor_row_offset[neighbor_index])
 *             neighbor_col = (
 *                 flat_col + neighbor_col_offset[neighbor_index])             # <<<<<<<<<<<<<<
 * 
 *             if (neighbor_row < 0 or neighbor_row >= n_rows or
 */
      __pyx_v_neighbor_col = (__pyx_v_flat_col + (__pyx_v_neighbor_col_offset[__pyx_v_neighbor_index]));

      /* "pygeoprocessing\routing\routing_core.pyx":2218
 *                 flat_col + neighbor_col_offset[neighbor_index])
 * 
 *             if (neighbor_row < 0 or neighbor_row >= n_rows or             # <<<<<<<<<<<<<<
 *                     neighbor_col < 0 or neighbor_col >= n_cols):
 *                 continue
 */
      __pyx_t_39 = ((__pyx_v_neighbor_row < 0) != 0);
      if (!__pyx_t_39) {
      } else {
        __pyx_t_21 = __pyx_t_39;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_39 = ((__pyx_v_neighbor_row >= __pyx_v_n_rows) != 0);
      if (!__pyx_t_39) {
      } else {
        __pyx_t_21 = __pyx_t_39;
        goto __pyx_L16_bool_binop_done;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":2219
 * 
 *             if (neighbor_row < 0 or neighbor_row >= n_rows or
 *                     neighbor_col < 0 or neighbor_col >= n_cols):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_39 = ((__pyx_v_neighbor_col < 0) != 0);
      if (!__pyx_t_39) {
      } else {
        __pyx_t_21 = __pyx_t_39;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_39 = ((__pyx_v_neighbor_col >= __pyx_v_n_cols) != 0);
      __pyx_t_21 = __pyx_t_39;
      __pyx_L16_bool_binop_done:;
      if (__pyx_t_21) {

        /* "pygeoprocessing\routing\routing_core.pyx":2220
 *             if (neighbor_row < 0 or neighbor_row >= n_rows or
 *                     neighbor_col < 0 or neighbor_col >= n_cols):
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             block_cache.update_cache(
 */
        goto __pyx_L13_continue;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":2222
 *                 continue
 * 
 *             block_cache.update_cache(             # <<<<<<<<<<<<<<
 *                 neighbor_row, neighbor_col,
 *                 &cell_row_index, &cell_col_index,
 */
      ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_neighbor_row, __pyx_v_neighbor_col, (&__pyx_v_cell_row_index), (&__pyx_v_cell_col_index), (&__pyx_v_cell_row_block_offset), (&__pyx_v_cell_col_block_offset));

      /* "pygeoprocessing\routing\routing_core.pyx":2227
 *                 &cell_row_block_offset, &cell_col_block_offset)
 * 
 *             neighbor_label = labels_block[             # <<<<<<<<<<<<<<
 *                 cell_row_index, cell_col_index,
 *                 cell_row_block_offset, cell_col_block_offset]
 */
      __pyx_t_40 = __pyx_v_cell_row_index;
      __pyx_t_41 = __pyx_v_cell_col_index;
      __pyx_t_42 = __pyx_v_cell_row_block_offset;
      __pyx_t_43 = __pyx_v_cell_col_block_offset;
      __pyx_v_neighbor_label = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_labels_block.rcbuffer->pybuffer.buf, __pyx_t_40, __pyx_pybuffernd_labels_block.diminfo[0].strides, __pyx_t_41, __pyx_pybuffernd_labels_block.diminfo[1].strides, __pyx_t_42, __pyx_pybuffernd_labels_block.diminfo[2].strides, __pyx_t_43, __pyx_pybuffernd_labels_block.diminfo[3].strides));

      /* "pygeoprocessing\routing\routing_core.pyx":2231
 *                 cell_row_block_offset, cell_col_block_offset]
 * 
 *             neighbor_flow = flow_direction_block[             # <<<<<<<<<<<<<<
 *                 cell_row_index, cell_col_index,
 *                 cell_row_block_offset, cell_col_block_offset]
 */
      __pyx_t_44 = __pyx_v_cell_row_index;
      __pyx_t_45 = __pyx_v_cell_col_index;
      __pyx_t_46 = __pyx_v_cell_row_block_offset;
      __pyx_t_47 = __pyx_v_cell_col_block_offset;
      __pyx_v_neighbor_flow = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.buf, __pyx_t_44, __pyx_pybuffernd_flow_direction_block.diminfo[0].strides, __pyx_t_45, __pyx_pybuffernd_flow_direction_block.diminfo[1].strides, __pyx_t_46, __pyx_pybuffernd_flow_direction_block.diminfo[2].strides, __pyx_t_47, __pyx_pybuffernd_flow_direction_block.diminfo[3].strides));

      /* "pygeoprocessing\routing\routing_core.pyx":2235
 *                 cell_row_block_offset, cell_col_block_offset]
 * 
 *             if (neighbor_label != labels_nodata and             # <<<<<<<<<<<<<<
 *                     neighbor_label == cell_label and
 *                     neighbor_flow == flow_nodata):
 */
      __pyx_t_39 = ((__pyx_v_neighbor_label != __pyx_v_labels_nodata) != 0);
      if (__pyx_t_39) {
      } else {
        __pyx_t_21 = __pyx_t_39;
        goto __pyx_L21_bool_binop_done;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":2236
 * 
 *             if (neighbor_label != labels_nodata and
 *                     neighbor_label == cell_label and             # <<<<<<<<<<<<<<
 *                     neighbor_flow == flow_nodata):
 *                 low_edges_queue.push_back(neighbor_row * n_cols + neighbor_col)
 */
      __pyx_t_39 = ((__pyx_v_neighbor_label == __pyx_v_cell_label) != 0);
      if (__pyx_t_39) {
      } else {
        __pyx_t_21 = __pyx_t_39;
        goto __pyx_L21_bool_binop_done;
      }

      /* "pygeoprocessing\routing\routing_core.pyx":2237
 *             if (neighbor_label != labels_nodata and
 *                     neighbor_label == cell_label and
 *                     neighbor_flow == flow_nodata):             # <<<<<<<<<<<<<<
 *                 low_edges_queue.push_back(neighbor_row * n_cols + neighbor_col)
 * 
 */
      __pyx_t_39 = ((__pyx_v_neighbor_flow == __pyx_v_flow_nodata) != 0);
      __pyx_t_21 = __pyx_t_39;
      __pyx_L21_bool_binop_done:;
      if (__pyx_t_21) {

        /* "pygeoprocessing\routing\routing_core.pyx":2238
 *                     neighbor_label == cell_label and
 *                     neighbor_flow == flow_nodata):
 *                 low_edges_queue.push_back(neighbor_row * n_cols + neighbor_col)             # <<<<<<<<<<<<<<
 * 
 *     block_cache.flush_cache()
 */
        __pyx_v_low_edges_queue.push_back(((__pyx_v_neighbor_row * __pyx_v_n_cols) + __pyx_v_neighbor_col));
        goto __pyx_L20;
      }
      __pyx_L20:;
      __pyx_L13_continue:;
    }
    __pyx_L7_continue:;
  }

  /* "pygeoprocessing\routing\routing_core.pyx":2240
 *                 low_edges_queue.push_back(neighbor_row * n_cols + neighbor_col)
 * 
 *     block_cache.flush_cache()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->flush_cache(__pyx_v_block_cache);

  /* "pygeoprocessing\routing\routing_core.pyx":2073
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef towards_lower(             # <<<<<<<<<<<<<<
 *         deque[int] &low_edges, labels_uri, flow_direction_uri, flat_mask_uri,
 *         map[int, int] &flat_height):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_17);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels_block.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.towards_lower", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels_block.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_flat_mask_nodata);
  __Pyx_XDECREF(__pyx_v_labels_ds);
  __Pyx_XDECREF(__pyx_v_labels_band);
  __Pyx_XDECREF(__pyx_v_flat_mask_ds);
  __Pyx_XDECREF(__pyx_v_flat_mask_band);
  __Pyx_XDECREF(__pyx_v_flow_direction_ds);
  __Pyx_XDECREF(__pyx_v_flow_direction_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_labels_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_flat_mask_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_direction_block);
  __Pyx_XDECREF(__pyx_v_band_list);
  __Pyx_XDECREF(__pyx_v_block_list);
  __Pyx_XDECREF(__pyx_v_update_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_cache_dirty);
  __Pyx_XDECREF((PyObject *)__pyx_v_block_cache);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":2246
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def flow_direction_inf_masked_flow_dirs(             # <<<<<<<<<<<<<<
 *         flat_mask_uri, labels_uri, flow_direction_uri):
 *     """Calculates the D-infinity flow algorithm for regions defined from flat
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_11flow_direction_inf_masked_flow_dirs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15pygeoprocessing_7routing_12routing_core_10flow_direction_inf_masked_flow_dirs[] = "Calculates the D-infinity flow algorithm for regions defined from flat\n        drainage resolution.\n\n        Flow algorithm from: Tarboton, \"A new method for the determination of\n        flow directions and upslope areas in grid digital elevation models,\"\n        Water Resources Research, vol. 33, no. 2, pages 309 - 319, February\n        1997.\n\n        Also resolves flow directions in flat areas of DEM.\n\n        flat_mask_uri (string) - (input) a uri to a single band GDAL Dataset\n            that has offset values from the flat region resolution algorithm.\n            The offsets in flat_mask are the relative heights only within the\n            flat regions defined in labels_uri.\n        labels_uri (string) - (input) a uri to a single band integer gdal\n                dataset that contain labels for the cells that lie in\n                flat regions of the DEM.\n        flow_direction_uri - (input/output) a uri to an existing GDAL dataset\n            of same size as dem_uri.  Flow direction will be defined in regions\n            that have nodata values in them that overlap regions of labels_uri.\n            This is so this function can be used as a two pass filter for\n            resolving flow directions on a raw dem, then filling plateaus and\n            doing another pass.\n\n       returns nothing";
static PyMethodDef __pyx_mdef_15pygeoprocessing_7routing_12routing_core_11flow_direction_inf_masked_flow_dirs = {"flow_direction_inf_masked_flow_dirs", (PyCFunction)__pyx_pw_15pygeoprocessing_7routing_12routing_core_11flow_direction_inf_masked_flow_dirs, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15pygeoprocessing_7routing_12routing_core_10flow_direction_inf_masked_flow_dirs};
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_11flow_direction_inf_masked_flow_dirs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_flat_mask_uri = 0;
  PyObject *__pyx_v_labels_uri = 0;
  PyObject *__pyx_v_flow_direction_uri = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flow_direction_inf_masked_flow_dirs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flat_mask_uri,&__pyx_n_s_labels_uri,&__pyx_n_s_flow_direction_uri,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flat_mask_uri)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_labels_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flow_direction_inf_masked_flow_dirs", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flow_direction_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flow_direction_inf_masked_flow_dirs", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flow_direction_inf_masked_flow_dirs") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_flat_mask_uri = values[0];
    __pyx_v_labels_uri = values[1];
    __pyx_v_flow_direction_uri = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flow_direction_inf_masked_flow_dirs", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.flow_direction_inf_masked_flow_dirs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pygeoprocessing_7routing_12routing_core_10flow_direction_inf_masked_flow_dirs(__pyx_self, __pyx_v_flat_mask_uri, __pyx_v_labels_uri, __pyx_v_flow_direction_uri);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_10flow_direction_inf_masked_flow_dirs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flat_mask_uri, PyObject *__pyx_v_labels_uri, PyObject *__pyx_v_flow_direction_uri) {
  int __pyx_v_n_cols;
  int __pyx_v_n_rows;
  int __pyx_v_max_index;
  int __pyx_v_facet_index;
  double __pyx_v_e_0;
  double __pyx_v_e_1;
  double __pyx_v_e_2;
  double __pyx_v_s_1;
  double __pyx_v_s_2;
  double __pyx_v_d_1;
  double __pyx_v_d_2;
  double __pyx_v_flow_direction;
  double __pyx_v_slope;
  double __pyx_v_flow_direction_max_slope;
  double __pyx_v_slope_max;
  PyObject *__pyx_v_flat_mask_ds = NULL;
  PyObject *__pyx_v_flat_mask_band = NULL;
  int *__pyx_v_e_0_offsets;
  int *__pyx_v_e_1_offsets;
  int *__pyx_v_e_2_offsets;
  int *__pyx_v_a_c;
  int *__pyx_v_a_f;
  CYTHON_UNUSED int *__pyx_v_row_offsets;
  CYTHON_UNUSED int *__pyx_v_col_offsets;
  double __pyx_v_max_r;
  float __pyx_v_flow_nodata;
  PyObject *__pyx_v_flow_direction_dataset = NULL;
  PyObject *__pyx_v_flow_band = NULL;
  float __pyx_v_label_nodata;
  PyObject *__pyx_v_label_dataset = NULL;
  PyObject *__pyx_v_label_band = NULL;
  int __pyx_v_block_row_size;
  int __pyx_v_block_col_size;
  int __pyx_v_global_row;
  int __pyx_v_global_col;
  int __pyx_v_e_0_row;
  int __pyx_v_e_0_col;
  int __pyx_v_e_1_row;
  int __pyx_v_e_1_col;
  int __pyx_v_e_2_row;
  int __pyx_v_e_2_col;
  int __pyx_v_e_0_row_index;
  int __pyx_v_e_0_col_index;
  int __pyx_v_e_0_row_block_offset;
  int __pyx_v_e_0_col_block_offset;
  int __pyx_v_e_1_row_index;
  int __pyx_v_e_1_col_index;
  int __pyx_v_e_1_row_block_offset;
  int __pyx_v_e_1_col_block_offset;
  int __pyx_v_e_2_row_index;
  int __pyx_v_e_2_col_index;
  int __pyx_v_e_2_row_block_offset;
  int __pyx_v_e_2_col_block_offset;
  int __pyx_v_global_block_row;
  int __pyx_v_global_block_col;
  PyArrayObject *__pyx_v_flow_block = 0;
  PyArrayObject *__pyx_v_flat_mask_block = 0;
  PyArrayObject *__pyx_v_label_block = 0;
  PyObject *__pyx_v_band_list = NULL;
  PyObject *__pyx_v_block_list = NULL;
  PyObject *__pyx_v_update_list = NULL;
  PyArrayObject *__pyx_v_cache_dirty = 0;
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_block_cache = 0;
  int __pyx_v_n_global_block_rows;
  int __pyx_v_n_global_block_cols;
  time_t __pyx_v_last_time;
  time_t __pyx_v_current_time;
  float __pyx_v_current_flow;
  int __pyx_v_current_label;
  int __pyx_v_e_1_label;
  int __pyx_v_e_2_label;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cache_dirty;
  __Pyx_Buffer __pyx_pybuffer_cache_dirty;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flat_mask_block;
  __Pyx_Buffer __pyx_pybuffer_flat_mask_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flow_block;
  __Pyx_Buffer __pyx_pybuffer_flow_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_label_block;
  __Pyx_Buffer __pyx_pybuffer_label_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5[16];
  int __pyx_t_6[16];
  int __pyx_t_7[16];
  int __pyx_t_8[8];
  int __pyx_t_9[8];
  int __pyx_t_10[8];
  int __pyx_t_11[8];
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  int __pyx_t_14;
  double __pyx_t_15;
  float __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyArrayObject *__pyx_t_20 = NULL;
  PyArrayObject *__pyx_t_21 = NULL;
  PyArrayObject *__pyx_t_22 = NULL;
  PyArrayObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  int __pyx_t_25;
  int __pyx_t_26;
  int __pyx_t_27;
  int __pyx_t_28;
  long __pyx_t_29;
  long __pyx_t_30;
  int __pyx_t_31;
  long __pyx_t_32;
  int __pyx_t_33;
  int __pyx_t_34;
  int __pyx_t_35;
  int __pyx_t_36;
  int __pyx_t_37;
  int __pyx_t_38;
  int __pyx_t_39;
  int __pyx_t_40;
  int __pyx_t_41;
  int __pyx_t_42;
  int __pyx_t_43;
  int __pyx_t_44;
  int __pyx_t_45;
  int __pyx_t_46;
  int __pyx_t_47;
  int __pyx_t_48;
  int __pyx_t_49;
  int __pyx_t_50;
  int __pyx_t_51;
  int __pyx_t_52;
  int __pyx_t_53;
  int __pyx_t_54;
  int __pyx_t_55;
  int __pyx_t_56;
  int __pyx_t_57;
  int __pyx_t_58;
  int __pyx_t_59;
  int __pyx_t_60;
  int __pyx_t_61;
  int __pyx_t_62;
  int __pyx_t_63;
  int __pyx_t_64;
  int __pyx_t_65;
  int __pyx_t_66;
  int __pyx_t_67;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flow_direction_inf_masked_flow_dirs", 0);
  __pyx_pybuffer_flow_block.pybuffer.buf = NULL;
  __pyx_pybuffer_flow_block.refcount = 0;
  __pyx_pybuffernd_flow_block.data = NULL;
  __pyx_pybuffernd_flow_block.rcbuffer = &__pyx_pybuffer_flow_block;
  __pyx_pybuffer_flat_mask_block.pybuffer.buf = NULL;
  __pyx_pybuffer_flat_mask_block.refcount = 0;
  __pyx_pybuffernd_flat_mask_block.data = NULL;
  __pyx_pybuffernd_flat_mask_block.rcbuffer = &__pyx_pybuffer_flat_mask_block;
  __pyx_pybuffer_label_block.pybuffer.buf = NULL;
  __pyx_pybuffer_label_block.refcount = 0;
  __pyx_pybuffernd_label_block.data = NULL;
  __pyx_pybuffernd_label_block.rcbuffer = &__pyx_pybuffer_label_block;
  __pyx_pybuffer_cache_dirty.pybuffer.buf = NULL;
  __pyx_pybuffer_cache_dirty.refcount = 0;
  __pyx_pybuffernd_cache_dirty.data = NULL;
  __pyx_pybuffernd_cache_dirty.rcbuffer = &__pyx_pybuffer_cache_dirty;

  /* "pygeoprocessing\routing\routing_core.pyx":2278
 *         flow_direction_max_slope, slope_max, nodata_flow
 * 
 *     flat_mask_ds = gdal.Open(flat_mask_uri)             # <<<<<<<<<<<<<<
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Open); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_flat_mask_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_flat_mask_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_flat_mask_uri);
    __Pyx_GIVEREF(__pyx_v_flat_mask_uri);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flat_mask_ds = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2279
 * 
 *     flat_mask_ds = gdal.Open(flat_mask_uri)
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     #facet elevation and factors for slope and flow_direction calculations
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_flat_mask_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_flat_mask_band = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2285
 *     #THIS IS IMPORTANT:  The order is row (j), column (i), transposed to GDAL
 *     #convention.
 *     cdef int *e_0_offsets = [+0, +0,             # <<<<<<<<<<<<<<
 *                              +0, +0,
 *                              +0, +0,
 */
  __pyx_t_5[0] = 0;
  __pyx_t_5[1] = 0;
  __pyx_t_5[2] = 0;
  __pyx_t_5[3] = 0;
  __pyx_t_5[4] = 0;
  __pyx_t_5[5] = 0;
  __pyx_t_5[6] = 0;
  __pyx_t_5[7] = 0;
  __pyx_t_5[8] = 0;
  __pyx_t_5[9] = 0;
  __pyx_t_5[10] = 0;
  __pyx_t_5[11] = 0;
  __pyx_t_5[12] = 0;
  __pyx_t_5[13] = 0;
  __pyx_t_5[14] = 0;
  __pyx_t_5[15] = 0;
  __pyx_v_e_0_offsets = __pyx_t_5;

  /* "pygeoprocessing\routing\routing_core.pyx":2293
 *                              +0, +0,
 *                              +0, +0]
 *     cdef int *e_1_offsets = [+0, +1,             # <<<<<<<<<<<<<<
 *                              -1, +0,
 *                              -1, +0,
 */
  __pyx_t_6[0] = 0;
  __pyx_t_6[1] = 1;
  __pyx_t_6[2] = -1;
  __pyx_t_6[3] = 0;
  __pyx_t_6[4] = -1;
  __pyx_t_6[5] = 0;
  __pyx_t_6[6] = 0;
  __pyx_t_6[7] = -1;
  __pyx_t_6[8] = 0;
  __pyx_t_6[9] = -1;
  __pyx_t_6[10] = 1;
  __pyx_t_6[11] = 0;
  __pyx_t_6[12] = 1;
  __pyx_t_6[13] = 0;
  __pyx_t_6[14] = 0;
  __pyx_t_6[15] = 1;
  __pyx_v_e_1_offsets = __pyx_t_6;

  /* "pygeoprocessing\routing\routing_core.pyx":2301
 *                              +1, +0,
 *                              +0, +1]
 *     cdef int *e_2_offsets = [-1, +1,             # <<<<<<<<<<<<<<
 *                              -1, +1,
 *                              -1, -1,
 */
  __pyx_t_7[0] = -1;
  __pyx_t_7[1] = 1;
  __pyx_t_7[2] = -1;
  __pyx_t_7[3] = 1;
  __pyx_t_7[4] = -1;
  __pyx_t_7[5] = -1;
  __pyx_t_7[6] = -1;
  __pyx_t_7[7] = -1;
  __pyx_t_7[8] = 1;
  __pyx_t_7[9] = -1;
  __pyx_t_7[10] = 1;
  __pyx_t_7[11] = -1;
  __pyx_t_7[12] = 1;
  __pyx_t_7[13] = 1;
  __pyx_t_7[14] = 1;
  __pyx_t_7[15] = 1;
  __pyx_v_e_2_offsets = __pyx_t_7;

  /* "pygeoprocessing\routing\routing_core.pyx":2309
 *                              +1, +1,
 *                              +1, +1]
 *     cdef int *a_c = [0, 1, 1, 2, 2, 3, 3, 4]             # <<<<<<<<<<<<<<
 *     cdef int *a_f = [1, -1, 1, -1, 1, -1, 1, -1]
 * 
 */
  __pyx_t_8[0] = 0;
  __pyx_t_8[1] = 1;
  __pyx_t_8[2] = 1;
  __pyx_t_8[3] = 2;
  __pyx_t_8[4] = 2;
  __pyx_t_8[5] = 3;
  __pyx_t_8[6] = 3;
  __pyx_t_8[7] = 4;
  __pyx_v_a_c = __pyx_t_8;

  /* "pygeoprocessing\routing\routing_core.pyx":2310
 *                              +1, +1]
 *     cdef int *a_c = [0, 1, 1, 2, 2, 3, 3, 4]
 *     cdef int *a_f = [1, -1, 1, -1, 1, -1, 1, -1]             # <<<<<<<<<<<<<<
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]
 */
  __pyx_t_9[0] = 1;
  __pyx_t_9[1] = -1;
  __pyx_t_9[2] = 1;
  __pyx_t_9[3] = -1;
  __pyx_t_9[4] = 1;
  __pyx_t_9[5] = -1;
  __pyx_t_9[6] = 1;
  __pyx_t_9[7] = -1;
  __pyx_v_a_f = __pyx_t_9;

  /* "pygeoprocessing\routing\routing_core.pyx":2312
 *     cdef int *a_f = [1, -1, 1, -1, 1, -1, 1, -1]
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]             # <<<<<<<<<<<<<<
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 */
  __pyx_t_10[0] = 0;
  __pyx_t_10[1] = -1;
  __pyx_t_10[2] = -1;
  __pyx_t_10[3] = -1;
  __pyx_t_10[4] = 0;
  __pyx_t_10[5] = 1;
  __pyx_t_10[6] = 1;
  __pyx_t_10[7] = 1;
  __pyx_v_row_offsets = __pyx_t_10;

  /* "pygeoprocessing\routing\routing_core.pyx":2313
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]             # <<<<<<<<<<<<<<
 * 
 *     n_rows, n_cols = pygeoprocessing.get_row_col_from_uri(flat_mask_uri)
 */
  __pyx_t_11[0] = 1;
  __pyx_t_11[1] = 1;
  __pyx_t_11[2] = 0;
  __pyx_t_11[3] = -1;
  __pyx_t_11[4] = -1;
  __pyx_t_11[5] = -1;
  __pyx_t_11[6] = 0;
  __pyx_t_11[7] = 1;
  __pyx_v_col_offsets = __pyx_t_11;

  /* "pygeoprocessing\routing\routing_core.pyx":2315
 *     cdef int *col_offsets = [1,  1,  0, -1, -1, -1, 0, 1]
 * 
 *     n_rows, n_cols = pygeoprocessing.get_row_col_from_uri(flat_mask_uri)             # <<<<<<<<<<<<<<
 *     d_1 = pygeoprocessing.get_cell_size_from_uri(flat_mask_uri)
 *     d_2 = d_1
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_row_col_from_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_flat_mask_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_flat_mask_uri);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_flat_mask_uri);
    __Pyx_GIVEREF(__pyx_v_flat_mask_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_12 = Py_TYPE(__pyx_t_1)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_12(__pyx_t_1); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_2 = __pyx_t_12(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_1), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = NULL;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_12 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_n_rows = __pyx_t_13;
  __pyx_v_n_cols = __pyx_t_14;

  /* "pygeoprocessing\routing\routing_core.pyx":2316
 * 
 *     n_rows, n_cols = pygeoprocessing.get_row_col_from_uri(flat_mask_uri)
 *     d_1 = pygeoprocessing.get_cell_size_from_uri(flat_mask_uri)             # <<<<<<<<<<<<<<
 *     d_2 = d_1
 *     cdef double max_r = numpy.pi / 4.0
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_cell_size_from_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_flat_mask_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_flat_mask_uri);
    PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_v_flat_mask_uri);
    __Pyx_GIVEREF(__pyx_v_flat_mask_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_d_1 = __pyx_t_15;

  /* "pygeoprocessing\routing\routing_core.pyx":2317
 *     n_rows, n_cols = pygeoprocessing.get_row_col_from_uri(flat_mask_uri)
 *     d_1 = pygeoprocessing.get_cell_size_from_uri(flat_mask_uri)
 *     d_2 = d_1             # <<<<<<<<<<<<<<
 *     cdef double max_r = numpy.pi / 4.0
 * 
 */
  __pyx_v_d_2 = __pyx_v_d_1;

  /* "pygeoprocessing\routing\routing_core.pyx":2318
 *     d_1 = pygeoprocessing.get_cell_size_from_uri(flat_mask_uri)
 *     d_2 = d_1
 *     cdef double max_r = numpy.pi / 4.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_pi); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_float_4_0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_max_r = __pyx_t_15;

  /* "pygeoprocessing\routing\routing_core.pyx":2321
 * 
 * 
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri)
 *     flow_direction_dataset = gdal.Open(flow_direction_uri, gdal.GA_Update)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2322
 * 
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(
 *         flow_direction_uri)             # <<<<<<<<<<<<<<
 *     flow_direction_dataset = gdal.Open(flow_direction_uri, gdal.GA_Update)
 *     flow_band = flow_direction_dataset.GetRasterBand(1)
 */
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_flow_direction_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_flow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2321
 * 
 * 
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri)
 *     flow_direction_dataset = gdal.Open(flow_direction_uri, gdal.GA_Update)
 */
  __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_nodata = __pyx_t_16;

  /* "pygeoprocessing\routing\routing_core.pyx":2323
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(
 *         flow_direction_uri)
 *     flow_direction_dataset = gdal.Open(flow_direction_uri, gdal.GA_Update)             # <<<<<<<<<<<<<<
 *     flow_band = flow_direction_dataset.GetRasterBand(1)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Open); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_17 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_17 = 1;
    }
  }
  __pyx_t_18 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  if (__pyx_t_1) {
    PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
  }
  __Pyx_INCREF(__pyx_v_flow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_17, __pyx_v_flow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_17, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_18, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_flow_direction_dataset = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2324
 *         flow_direction_uri)
 *     flow_direction_dataset = gdal.Open(flow_direction_uri, gdal.GA_Update)
 *     flow_band = flow_direction_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef float label_nodata = pygeoprocessing.get_nodata_from_uri(labels_uri)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_direction_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_band = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2326
 *     flow_band = flow_direction_dataset.GetRasterBand(1)
 * 
 *     cdef float label_nodata = pygeoprocessing.get_nodata_from_uri(labels_uri)             # <<<<<<<<<<<<<<
 *     label_dataset = gdal.Open(labels_uri)
 *     label_band = label_dataset.GetRasterBand(1)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_18))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_18);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_18, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_18, __pyx_v_labels_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_labels_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_labels_uri);
    __Pyx_GIVEREF(__pyx_v_labels_uri);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_label_nodata = __pyx_t_16;

  /* "pygeoprocessing\routing\routing_core.pyx":2327
 * 
 *     cdef float label_nodata = pygeoprocessing.get_nodata_from_uri(labels_uri)
 *     label_dataset = gdal.Open(labels_uri)             # <<<<<<<<<<<<<<
 *     label_band = label_dataset.GetRasterBand(1)
 * 
 */
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_Open); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_18) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_labels_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_18); __Pyx_GIVEREF(__pyx_t_18); __pyx_t_18 = NULL;
    __Pyx_INCREF(__pyx_v_labels_uri);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_labels_uri);
    __Pyx_GIVEREF(__pyx_v_labels_uri);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_label_dataset = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2328
 *     cdef float label_nodata = pygeoprocessing.get_nodata_from_uri(labels_uri)
 *     label_dataset = gdal.Open(labels_uri)
 *     label_band = label_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     #center point of global index
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_label_dataset, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_label_band = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2332
 *     #center point of global index
 *     cdef int block_row_size, block_col_size
 *     block_col_size, block_row_size = flat_mask_band.GetBlockSize()             # <<<<<<<<<<<<<<
 *     cdef int global_row, global_col, e_0_row, e_0_col, e_1_row, e_1_col, e_2_row, e_2_col #index into the overall raster
 *     cdef int e_0_row_index, e_0_col_index #the index of the cache block
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_flat_mask_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
    PyObject* sequence = __pyx_t_4;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_18 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_12 = Py_TYPE(__pyx_t_18)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_12(__pyx_t_18); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_12(__pyx_t_18); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_18), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = NULL;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_12 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L6_unpacking_done:;
  }
  __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_block_col_size = __pyx_t_14;
  __pyx_v_block_row_size = __pyx_t_13;

  /* "pygeoprocessing\routing\routing_core.pyx":2349
 * 
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     #flat_mask block is a 64 bit float so it can capture the resolution of small flat_mask offsets
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2350
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     #flat_mask block is a 64 bit float so it can capture the resolution of small flat_mask offsets
 *     #from the plateau resolution algorithm.
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = PyTuple_New(4); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_19, 2, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_19, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_18 = 0;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2349
 * 
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     #flat_mask block is a 64 bit float so it can capture the resolution of small flat_mask offsets
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  __pyx_t_19 = 0;
  __pyx_t_19 = PyDict_New(); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);

  /* "pygeoprocessing\routing\routing_core.pyx":2350
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     #flat_mask block is a 64 bit float so it can capture the resolution of small flat_mask offsets
 *     #from the plateau resolution algorithm.
 */
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_float32); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  if (PyDict_SetItem(__pyx_t_19, __pyx_n_s_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2349
 * 
 *     #define all the caches
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32)
 *     #flat_mask block is a 64 bit float so it can capture the resolution of small flat_mask offsets
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_19); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_20 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_20, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_flow_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_flow_block.diminfo[0].strides = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flow_block.diminfo[0].shape = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flow_block.diminfo[1].strides = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flow_block.diminfo[1].shape = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_flow_block.diminfo[2].strides = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_flow_block.diminfo[2].shape = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_flow_block.diminfo[3].strides = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_flow_block.diminfo[3].shape = __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_20 = 0;
  __pyx_v_flow_block = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2353
 *     #flat_mask block is a 64 bit float so it can capture the resolution of small flat_mask offsets
 *     #from the plateau resolution algorithm.
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] label_block = numpy.zeros(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2354
 *     #from the plateau resolution algorithm.
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] label_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_18 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2353
 *     #flat_mask block is a 64 bit float so it can capture the resolution of small flat_mask offsets
 *     #from the plateau resolution algorithm.
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] label_block = numpy.zeros(
 */
  __pyx_t_18 = PyTuple_New(1); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":2354
 *     #from the plateau resolution algorithm.
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] label_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2353
 *     #flat_mask block is a 64 bit float so it can capture the resolution of small flat_mask offsets
 *     #from the plateau resolution algorithm.
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] label_block = numpy.zeros(
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_t_18, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_21 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_21, &__Pyx_TypeInfo_nn_npy_int32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_flat_mask_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_flat_mask_block.diminfo[0].strides = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flat_mask_block.diminfo[0].shape = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flat_mask_block.diminfo[1].strides = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flat_mask_block.diminfo[1].shape = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_flat_mask_block.diminfo[2].strides = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_flat_mask_block.diminfo[2].shape = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_flat_mask_block.diminfo[3].strides = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_flat_mask_block.diminfo[3].shape = __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_21 = 0;
  __pyx_v_flat_mask_block = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2355
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] label_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2356
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] label_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 * 
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_19 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2355
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] label_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 * 
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pygeoprocessing\routing\routing_core.pyx":2356
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] label_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 * 
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 */
  __pyx_t_19 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_int32); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_18) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2355
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] flat_mask_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=4] label_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int32)
 * 
 */
  __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_18) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_18, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_22 = ((PyArrayObject *)__pyx_t_18);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_label_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_22, &__Pyx_TypeInfo_nn_npy_int32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_label_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_label_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_label_block.diminfo[0].strides = __pyx_pybuffernd_label_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_label_block.diminfo[0].shape = __pyx_pybuffernd_label_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_label_block.diminfo[1].strides = __pyx_pybuffernd_label_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_label_block.diminfo[1].shape = __pyx_pybuffernd_label_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_label_block.diminfo[2].strides = __pyx_pybuffernd_label_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_label_block.diminfo[2].shape = __pyx_pybuffernd_label_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_label_block.diminfo[3].strides = __pyx_pybuffernd_label_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_label_block.diminfo[3].shape = __pyx_pybuffernd_label_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_22 = 0;
  __pyx_v_label_block = ((PyArrayObject *)__pyx_t_18);
  __pyx_t_18 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2359
 * 
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 *     band_list = [flat_mask_band, flow_band, label_band]             # <<<<<<<<<<<<<<
 *     block_list = [flat_mask_block, flow_block, label_block]
 *     update_list = [False, True, False]
 */
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_INCREF(__pyx_v_flat_mask_band);
  PyList_SET_ITEM(__pyx_t_18, 0, __pyx_v_flat_mask_band);
  __Pyx_GIVEREF(__pyx_v_flat_mask_band);
  __Pyx_INCREF(__pyx_v_flow_band);
  PyList_SET_ITEM(__pyx_t_18, 1, __pyx_v_flow_band);
  __Pyx_GIVEREF(__pyx_v_flow_band);
  __Pyx_INCREF(__pyx_v_label_band);
  PyList_SET_ITEM(__pyx_t_18, 2, __pyx_v_label_band);
  __Pyx_GIVEREF(__pyx_v_label_band);
  __pyx_v_band_list = ((PyObject*)__pyx_t_18);
  __pyx_t_18 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2360
 *     #the BlockCache object needs parallel lists of bands, blocks, and boolean tags to indicate which ones are updated
 *     band_list = [flat_mask_band, flow_band, label_band]
 *     block_list = [flat_mask_block, flow_block, label_block]             # <<<<<<<<<<<<<<
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 */
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_INCREF(((PyObject *)__pyx_v_flat_mask_block));
  PyList_SET_ITEM(__pyx_t_18, 0, ((PyObject *)__pyx_v_flat_mask_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_flat_mask_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_flow_block));
  PyList_SET_ITEM(__pyx_t_18, 1, ((PyObject *)__pyx_v_flow_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_flow_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_label_block));
  PyList_SET_ITEM(__pyx_t_18, 2, ((PyObject *)__pyx_v_label_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_label_block));
  __pyx_v_block_list = ((PyObject*)__pyx_t_18);
  __pyx_t_18 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2361
 *     band_list = [flat_mask_band, flow_band, label_band]
 *     block_list = [flat_mask_block, flow_block, label_block]
 *     update_list = [False, True, False]             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_18, 0, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_True);
  PyList_SET_ITEM(__pyx_t_18, 1, Py_True);
  __Pyx_GIVEREF(Py_True);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_18, 2, Py_False);
  __Pyx_GIVEREF(Py_False);
  __pyx_v_update_list = ((PyObject*)__pyx_t_18);
  __pyx_t_18 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2362
 *     block_list = [flat_mask_block, flow_block, label_block]
 *     update_list = [False, True, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_18 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_byte); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_19) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_23 = ((PyArrayObject *)__pyx_t_19);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer, (PyObject*)__pyx_t_23, &__Pyx_TypeInfo_nn_npy_byte, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_cache_dirty = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_cache_dirty.diminfo[0].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cache_dirty.diminfo[0].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cache_dirty.diminfo[1].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cache_dirty.diminfo[1].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_23 = 0;
  __pyx_v_cache_dirty = ((PyArrayObject *)__pyx_t_19);
  __pyx_t_19 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2365
 * 
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size, block_col_size, band_list, block_list, update_list, cache_dirty)             # <<<<<<<<<<<<<<
 * 
 *     cdef int row_offset, col_offset
 */
  __pyx_t_19 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n_rows); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygeoprocessing\routing\routing_core.pyx":2364
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros((N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 *     cdef BlockCache block_cache = BlockCache(             # <<<<<<<<<<<<<<
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size, block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 */
  __pyx_t_24 = PyTuple_New(10); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  PyTuple_SET_ITEM(__pyx_t_24, 0, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_24, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_24, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_24, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_24, 4, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_24, 5, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_band_list);
  PyTuple_SET_ITEM(__pyx_t_24, 6, __pyx_v_band_list);
  __Pyx_GIVEREF(__pyx_v_band_list);
  __Pyx_INCREF(__pyx_v_block_list);
  PyTuple_SET_ITEM(__pyx_t_24, 7, __pyx_v_block_list);
  __Pyx_GIVEREF(__pyx_v_block_list);
  __Pyx_INCREF(__pyx_v_update_list);
  PyTuple_SET_ITEM(__pyx_t_24, 8, __pyx_v_update_list);
  __Pyx_GIVEREF(__pyx_v_update_list);
  __Pyx_INCREF(((PyObject *)__pyx_v_cache_dirty));
  PyTuple_SET_ITEM(__pyx_t_24, 9, ((PyObject *)__pyx_v_cache_dirty));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cache_dirty));
  __pyx_t_19 = 0;
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_18 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache)), __pyx_t_24, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_v_block_cache = ((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2369
 *     cdef int row_offset, col_offset
 * 
 *     cdef int n_global_block_rows = int(ceil(float(n_rows) / block_row_size))             # <<<<<<<<<<<<<<
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))
 *     cdef time_t last_time, current_time
 */
  __pyx_v_n_global_block_rows = ((int)ceil((((double)__pyx_v_n_rows) / __pyx_v_block_row_size)));

  /* "pygeoprocessing\routing\routing_core.pyx":2370
 * 
 *     cdef int n_global_block_rows = int(ceil(float(n_rows) / block_row_size))
 *     cdef int n_global_block_cols = int(ceil(float(n_cols) / block_col_size))             # <<<<<<<<<<<<<<
 *     cdef time_t last_time, current_time
 *     cdef float current_flow
 */
  __pyx_v_n_global_block_cols = ((int)ceil((((double)__pyx_v_n_cols) / __pyx_v_block_col_size)));

  /* "pygeoprocessing\routing\routing_core.pyx":2374
 *     cdef float current_flow
 *     cdef int current_label, e_1_label, e_2_label
 *     time(&last_time)             # <<<<<<<<<<<<<<
 *     #flow not defined on the edges, so just go 1 row in
 *     for global_block_row in xrange(n_global_block_rows):
 */
  time((&__pyx_v_last_time));

  /* "pygeoprocessing\routing\routing_core.pyx":2376
 *     time(&last_time)
 *     #flow not defined on the edges, so just go 1 row in
 *     for global_block_row in xrange(n_global_block_rows):             # <<<<<<<<<<<<<<
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 */
  __pyx_t_13 = __pyx_v_n_global_block_rows;
  for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
    __pyx_v_global_block_row = __pyx_t_14;

    /* "pygeoprocessing\routing\routing_core.pyx":2377
 *     #flow not defined on the edges, so just go 1 row in
 *     for global_block_row in xrange(n_global_block_rows):
 *         time(&current_time)             # <<<<<<<<<<<<<<
 *         if current_time - last_time > 5.0:
 *             LOGGER.info("flow_direction_inf %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 */
    time((&__pyx_v_current_time));

    /* "pygeoprocessing\routing\routing_core.pyx":2378
 *     for global_block_row in xrange(n_global_block_rows):
 *         time(&current_time)
 *         if current_time - last_time > 5.0:             # <<<<<<<<<<<<<<
 *             LOGGER.info("flow_direction_inf %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 *             last_time = current_time
 */
    __pyx_t_25 = (((__pyx_v_current_time - __pyx_v_last_time) > 5.0) != 0);
    if (__pyx_t_25) {

      /* "pygeoprocessing\routing\routing_core.pyx":2379
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 *             LOGGER.info("flow_direction_inf %.1f%% complete", (global_row + 1.0) / n_rows * 100)             # <<<<<<<<<<<<<<
 *             last_time = current_time
 *         for global_block_col in xrange(n_global_block_cols):
 */
      __pyx_t_24 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_24);
      __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_24, __pyx_n_s_info); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __pyx_t_24 = PyFloat_FromDouble((((__pyx_v_global_row + 1.0) / __pyx_v_n_rows) * 100.0)); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_24);
      __pyx_t_2 = NULL;
      __pyx_t_17 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_18))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_18);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_18, function);
          __pyx_t_17 = 1;
        }
      }
      __pyx_t_3 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_flow_direction_inf_1f_complete);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_17, __pyx_kp_s_flow_direction_inf_1f_complete);
      __Pyx_GIVEREF(__pyx_kp_s_flow_direction_inf_1f_complete);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_17, __pyx_t_24);
      __Pyx_GIVEREF(__pyx_t_24);
      __pyx_t_24 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":2380
 *         if current_time - last_time > 5.0:
 *             LOGGER.info("flow_direction_inf %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 *             last_time = current_time             # <<<<<<<<<<<<<<
 *         for global_block_col in xrange(n_global_block_cols):
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 */
      __pyx_v_last_time = __pyx_v_current_time;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "pygeoprocessing\routing\routing_core.pyx":2381
 *             LOGGER.info("flow_direction_inf %.1f%% complete", (global_row + 1.0) / n_rows * 100)
 *             last_time = current_time
 *         for global_block_col in xrange(n_global_block_cols):             # <<<<<<<<<<<<<<
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):
 */
    __pyx_t_26 = __pyx_v_n_global_block_cols;
    for (__pyx_t_27 = 0; __pyx_t_27 < __pyx_t_26; __pyx_t_27+=1) {
      __pyx_v_global_block_col = __pyx_t_27;

      /* "pygeoprocessing\routing\routing_core.pyx":2382
 *             last_time = current_time
 *         for global_block_col in xrange(n_global_block_cols):
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):             # <<<<<<<<<<<<<<
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):
 *                     #is cache block not loaded?
 */
      __pyx_t_28 = __pyx_v_n_rows;
      __pyx_t_29 = ((__pyx_v_global_block_row + 1) * __pyx_v_block_row_size);
      if (((__pyx_t_28 < __pyx_t_29) != 0)) {
        __pyx_t_30 = __pyx_t_28;
      } else {
        __pyx_t_30 = __pyx_t_29;
      }
      __pyx_t_29 = __pyx_t_30;
      for (__pyx_t_28 = (__pyx_v_global_block_row * __pyx_v_block_row_size); __pyx_t_28 < __pyx_t_29; __pyx_t_28+=1) {
        __pyx_v_global_row = __pyx_t_28;

        /* "pygeoprocessing\routing\routing_core.pyx":2383
 *         for global_block_col in xrange(n_global_block_cols):
 *             for global_row in xrange(global_block_row*block_row_size, min((global_block_row+1)*block_row_size, n_rows)):
 *                 for global_col in xrange(global_block_col*block_col_size, min((global_block_col+1)*block_col_size, n_cols)):             # <<<<<<<<<<<<<<
 *                     #is cache block not loaded?
 * 
 */
        __pyx_t_31 = __pyx_v_n_cols;
        __pyx_t_30 = ((__pyx_v_global_block_col + 1) * __pyx_v_block_col_size);
        if (((__pyx_t_31 < __pyx_t_30) != 0)) {
          __pyx_t_32 = __pyx_t_31;
        } else {
          __pyx_t_32 = __pyx_t_30;
        }
        __pyx_t_30 = __pyx_t_32;
        for (__pyx_t_31 = (__pyx_v_global_block_col * __pyx_v_block_col_size); __pyx_t_31 < __pyx_t_30; __pyx_t_31+=1) {
          __pyx_v_global_col = __pyx_t_31;

          /* "pygeoprocessing\routing\routing_core.pyx":2386
 *                     #is cache block not loaded?
 * 
 *                     e_0_row = e_0_offsets[0] + global_row             # <<<<<<<<<<<<<<
 *                     e_0_col = e_0_offsets[1] + global_col
 * 
 */
          __pyx_v_e_0_row = ((__pyx_v_e_0_offsets[0]) + __pyx_v_global_row);

          /* "pygeoprocessing\routing\routing_core.pyx":2387
 * 
 *                     e_0_row = e_0_offsets[0] + global_row
 *                     e_0_col = e_0_offsets[1] + global_col             # <<<<<<<<<<<<<<
 * 
 *                     block_cache.update_cache(e_0_row, e_0_col, &e_0_row_index, &e_0_col_index, &e_0_row_block_offset, &e_0_col_block_offset)
 */
          __pyx_v_e_0_col = ((__pyx_v_e_0_offsets[1]) + __pyx_v_global_col);

          /* "pygeoprocessing\routing\routing_core.pyx":2389
 *                     e_0_col = e_0_offsets[1] + global_col
 * 
 *                     block_cache.update_cache(e_0_row, e_0_col, &e_0_row_index, &e_0_col_index, &e_0_row_block_offset, &e_0_col_block_offset)             # <<<<<<<<<<<<<<
 * 
 *                     current_label = label_block[
 */
          ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_e_0_row, __pyx_v_e_0_col, (&__pyx_v_e_0_row_index), (&__pyx_v_e_0_col_index), (&__pyx_v_e_0_row_block_offset), (&__pyx_v_e_0_col_block_offset));

          /* "pygeoprocessing\routing\routing_core.pyx":2391
 *                     block_cache.update_cache(e_0_row, e_0_col, &e_0_row_index, &e_0_col_index, &e_0_row_block_offset, &e_0_col_block_offset)
 * 
 *                     current_label = label_block[             # <<<<<<<<<<<<<<
 *                         e_0_row_index, e_0_col_index,
 *                         e_0_row_block_offset, e_0_col_block_offset]
 */
          __pyx_t_33 = __pyx_v_e_0_row_index;
          __pyx_t_34 = __pyx_v_e_0_col_index;
          __pyx_t_35 = __pyx_v_e_0_row_block_offset;
          __pyx_t_36 = __pyx_v_e_0_col_block_offset;
          __pyx_v_current_label = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_label_block.rcbuffer->pybuffer.buf, __pyx_t_33, __pyx_pybuffernd_label_block.diminfo[0].strides, __pyx_t_34, __pyx_pybuffernd_label_block.diminfo[1].strides, __pyx_t_35, __pyx_pybuffernd_label_block.diminfo[2].strides, __pyx_t_36, __pyx_pybuffernd_label_block.diminfo[3].strides));

          /* "pygeoprocessing\routing\routing_core.pyx":2396
 * 
 *                     #if a label isn't defiend we're not in a flat region
 *                     if current_label == label_nodata:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_25 = ((__pyx_v_current_label == __pyx_v_label_nodata) != 0);
          if (__pyx_t_25) {

            /* "pygeoprocessing\routing\routing_core.pyx":2397
 *                     #if a label isn't defiend we're not in a flat region
 *                     if current_label == label_nodata:
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     current_flow = flow_block[
 */
            goto __pyx_L14_continue;
          }

          /* "pygeoprocessing\routing\routing_core.pyx":2399
 *                         continue
 * 
 *                     current_flow = flow_block[             # <<<<<<<<<<<<<<
 *                         e_0_row_index, e_0_col_index,
 *                         e_0_row_block_offset, e_0_col_block_offset]
 */
          __pyx_t_37 = __pyx_v_e_0_row_index;
          __pyx_t_38 = __pyx_v_e_0_col_index;
          __pyx_t_39 = __pyx_v_e_0_row_block_offset;
          __pyx_t_40 = __pyx_v_e_0_col_block_offset;
          __pyx_v_current_flow = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.buf, __pyx_t_37, __pyx_pybuffernd_flow_block.diminfo[0].strides, __pyx_t_38, __pyx_pybuffernd_flow_block.diminfo[1].strides, __pyx_t_39, __pyx_pybuffernd_flow_block.diminfo[2].strides, __pyx_t_40, __pyx_pybuffernd_flow_block.diminfo[3].strides));

          /* "pygeoprocessing\routing\routing_core.pyx":2406
 *                     #direction raster, perhaps from an earlier iteration in a
 *                     #multiphase flow resolution algorithm
 *                     if current_flow != flow_nodata:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_25 = ((__pyx_v_current_flow != __pyx_v_flow_nodata) != 0);
          if (__pyx_t_25) {

            /* "pygeoprocessing\routing\routing_core.pyx":2407
 *                     #multiphase flow resolution algorithm
 *                     if current_flow != flow_nodata:
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     e_0 = flat_mask_block[e_0_row_index, e_0_col_index, e_0_row_block_offset, e_0_col_block_offset]
 */
            goto __pyx_L14_continue;
          }

          /* "pygeoprocessing\routing\routing_core.pyx":2409
 *                         continue
 * 
 *                     e_0 = flat_mask_block[e_0_row_index, e_0_col_index, e_0_row_block_offset, e_0_col_block_offset]             # <<<<<<<<<<<<<<
 *                     #skip if we're on a nodata pixel skip
 * 
 */
          __pyx_t_41 = __pyx_v_e_0_row_index;
          __pyx_t_42 = __pyx_v_e_0_col_index;
          __pyx_t_43 = __pyx_v_e_0_row_block_offset;
          __pyx_t_44 = __pyx_v_e_0_col_block_offset;
          __pyx_v_e_0 = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.buf, __pyx_t_41, __pyx_pybuffernd_flat_mask_block.diminfo[0].strides, __pyx_t_42, __pyx_pybuffernd_flat_mask_block.diminfo[1].strides, __pyx_t_43, __pyx_pybuffernd_flat_mask_block.diminfo[2].strides, __pyx_t_44, __pyx_pybuffernd_flat_mask_block.diminfo[3].strides));

          /* "pygeoprocessing\routing\routing_core.pyx":2413
 * 
 *                     #Calculate the flow flow_direction for each facet
 *                     slope_max = 0 #use this to keep track of the maximum down-slope             # <<<<<<<<<<<<<<
 *                     flow_direction_max_slope = 0 #flow direction on max downward slope
 *                     max_index = 0 #index to keep track of max slope facet
 */
          __pyx_v_slope_max = 0.0;

          /* "pygeoprocessing\routing\routing_core.pyx":2414
 *                     #Calculate the flow flow_direction for each facet
 *                     slope_max = 0 #use this to keep track of the maximum down-slope
 *                     flow_direction_max_slope = 0 #flow direction on max downward slope             # <<<<<<<<<<<<<<
 *                     max_index = 0 #index to keep track of max slope facet
 * 
 */
          __pyx_v_flow_direction_max_slope = 0.0;

          /* "pygeoprocessing\routing\routing_core.pyx":2415
 *                     slope_max = 0 #use this to keep track of the maximum down-slope
 *                     flow_direction_max_slope = 0 #flow direction on max downward slope
 *                     max_index = 0 #index to keep track of max slope facet             # <<<<<<<<<<<<<<
 * 
 *                     for facet_index in range(8):
 */
          __pyx_v_max_index = 0;

          /* "pygeoprocessing\routing\routing_core.pyx":2417
 *                     max_index = 0 #index to keep track of max slope facet
 * 
 *                     for facet_index in range(8):             # <<<<<<<<<<<<<<
 *                         #This defines the three points the facet
 * 
 */
          for (__pyx_t_45 = 0; __pyx_t_45 < 8; __pyx_t_45+=1) {
            __pyx_v_facet_index = __pyx_t_45;

            /* "pygeoprocessing\routing\routing_core.pyx":2420
 *                         #This defines the three points the facet
 * 
 *                         e_1_row = e_1_offsets[facet_index * 2 + 0] + global_row             # <<<<<<<<<<<<<<
 *                         e_1_col = e_1_offsets[facet_index * 2 + 1] + global_col
 *                         e_2_row = e_2_offsets[facet_index * 2 + 0] + global_row
 */
            __pyx_v_e_1_row = ((__pyx_v_e_1_offsets[((__pyx_v_facet_index * 2) + 0)]) + __pyx_v_global_row);

            /* "pygeoprocessing\routing\routing_core.pyx":2421
 * 
 *                         e_1_row = e_1_offsets[facet_index * 2 + 0] + global_row
 *                         e_1_col = e_1_offsets[facet_index * 2 + 1] + global_col             # <<<<<<<<<<<<<<
 *                         e_2_row = e_2_offsets[facet_index * 2 + 0] + global_row
 *                         e_2_col = e_2_offsets[facet_index * 2 + 1] + global_col
 */
            __pyx_v_e_1_col = ((__pyx_v_e_1_offsets[((__pyx_v_facet_index * 2) + 1)]) + __pyx_v_global_col);

            /* "pygeoprocessing\routing\routing_core.pyx":2422
 *                         e_1_row = e_1_offsets[facet_index * 2 + 0] + global_row
 *                         e_1_col = e_1_offsets[facet_index * 2 + 1] + global_col
 *                         e_2_row = e_2_offsets[facet_index * 2 + 0] + global_row             # <<<<<<<<<<<<<<
 *                         e_2_col = e_2_offsets[facet_index * 2 + 1] + global_col
 *                         #make sure one of the facets doesn't hang off the edge
 */
            __pyx_v_e_2_row = ((__pyx_v_e_2_offsets[((__pyx_v_facet_index * 2) + 0)]) + __pyx_v_global_row);

            /* "pygeoprocessing\routing\routing_core.pyx":2423
 *                         e_1_col = e_1_offsets[facet_index * 2 + 1] + global_col
 *                         e_2_row = e_2_offsets[facet_index * 2 + 0] + global_row
 *                         e_2_col = e_2_offsets[facet_index * 2 + 1] + global_col             # <<<<<<<<<<<<<<
 *                         #make sure one of the facets doesn't hang off the edge
 *                         if (e_1_row < 0 or e_1_row >= n_rows or
 */
            __pyx_v_e_2_col = ((__pyx_v_e_2_offsets[((__pyx_v_facet_index * 2) + 1)]) + __pyx_v_global_col);

            /* "pygeoprocessing\routing\routing_core.pyx":2425
 *                         e_2_col = e_2_offsets[facet_index * 2 + 1] + global_col
 *                         #make sure one of the facets doesn't hang off the edge
 *                         if (e_1_row < 0 or e_1_row >= n_rows or             # <<<<<<<<<<<<<<
 *                             e_2_row < 0 or e_2_row >= n_rows or
 *                             e_1_col < 0 or e_1_col >= n_cols or
 */
            __pyx_t_46 = ((__pyx_v_e_1_row < 0) != 0);
            if (!__pyx_t_46) {
            } else {
              __pyx_t_25 = __pyx_t_46;
              goto __pyx_L21_bool_binop_done;
            }
            __pyx_t_46 = ((__pyx_v_e_1_row >= __pyx_v_n_rows) != 0);
            if (!__pyx_t_46) {
            } else {
              __pyx_t_25 = __pyx_t_46;
              goto __pyx_L21_bool_binop_done;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":2426
 *                         #make sure one of the facets doesn't hang off the edge
 *                         if (e_1_row < 0 or e_1_row >= n_rows or
 *                             e_2_row < 0 or e_2_row >= n_rows or             # <<<<<<<<<<<<<<
 *                             e_1_col < 0 or e_1_col >= n_cols or
 *                             e_2_col < 0 or e_2_col >= n_cols):
 */
            __pyx_t_46 = ((__pyx_v_e_2_row < 0) != 0);
            if (!__pyx_t_46) {
            } else {
              __pyx_t_25 = __pyx_t_46;
              goto __pyx_L21_bool_binop_done;
            }
            __pyx_t_46 = ((__pyx_v_e_2_row >= __pyx_v_n_rows) != 0);
            if (!__pyx_t_46) {
            } else {
              __pyx_t_25 = __pyx_t_46;
              goto __pyx_L21_bool_binop_done;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":2427
 *                         if (e_1_row < 0 or e_1_row >= n_rows or
 *                             e_2_row < 0 or e_2_row >= n_rows or
 *                             e_1_col < 0 or e_1_col >= n_cols or             # <<<<<<<<<<<<<<
 *                             e_2_col < 0 or e_2_col >= n_cols):
 *                             continue
 */
            __pyx_t_46 = ((__pyx_v_e_1_col < 0) != 0);
            if (!__pyx_t_46) {
            } else {
              __pyx_t_25 = __pyx_t_46;
              goto __pyx_L21_bool_binop_done;
            }
            __pyx_t_46 = ((__pyx_v_e_1_col >= __pyx_v_n_cols) != 0);
            if (!__pyx_t_46) {
            } else {
              __pyx_t_25 = __pyx_t_46;
              goto __pyx_L21_bool_binop_done;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":2428
 *                             e_2_row < 0 or e_2_row >= n_rows or
 *                             e_1_col < 0 or e_1_col >= n_cols or
 *                             e_2_col < 0 or e_2_col >= n_cols):             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            __pyx_t_46 = ((__pyx_v_e_2_col < 0) != 0);
            if (!__pyx_t_46) {
            } else {
              __pyx_t_25 = __pyx_t_46;
              goto __pyx_L21_bool_binop_done;
            }
            __pyx_t_46 = ((__pyx_v_e_2_col >= __pyx_v_n_cols) != 0);
            __pyx_t_25 = __pyx_t_46;
            __pyx_L21_bool_binop_done:;
            if (__pyx_t_25) {

              /* "pygeoprocessing\routing\routing_core.pyx":2429
 *                             e_1_col < 0 or e_1_col >= n_cols or
 *                             e_2_col < 0 or e_2_col >= n_cols):
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         block_cache.update_cache(e_1_row, e_1_col, &e_1_row_index, &e_1_col_index, &e_1_row_block_offset, &e_1_col_block_offset)
 */
              goto __pyx_L18_continue;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":2431
 *                             continue
 * 
 *                         block_cache.update_cache(e_1_row, e_1_col, &e_1_row_index, &e_1_col_index, &e_1_row_block_offset, &e_1_col_block_offset)             # <<<<<<<<<<<<<<
 *                         block_cache.update_cache(e_2_row, e_2_col, &e_2_row_index, &e_2_col_index, &e_2_row_block_offset, &e_2_col_block_offset)
 * 
 */
            ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_e_1_row, __pyx_v_e_1_col, (&__pyx_v_e_1_row_index), (&__pyx_v_e_1_col_index), (&__pyx_v_e_1_row_block_offset), (&__pyx_v_e_1_col_block_offset));

            /* "pygeoprocessing\routing\routing_core.pyx":2432
 * 
 *                         block_cache.update_cache(e_1_row, e_1_col, &e_1_row_index, &e_1_col_index, &e_1_row_block_offset, &e_1_col_block_offset)
 *                         block_cache.update_cache(e_2_row, e_2_col, &e_2_row_index, &e_2_col_index, &e_2_row_block_offset, &e_2_col_block_offset)             # <<<<<<<<<<<<<<
 * 
 *                         e_1 = flat_mask_block[e_1_row_index, e_1_col_index, e_1_row_block_offset, e_1_col_block_offset]
 */
            ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_e_2_row, __pyx_v_e_2_col, (&__pyx_v_e_2_row_index), (&__pyx_v_e_2_col_index), (&__pyx_v_e_2_row_block_offset), (&__pyx_v_e_2_col_block_offset));

            /* "pygeoprocessing\routing\routing_core.pyx":2434
 *                         block_cache.update_cache(e_2_row, e_2_col, &e_2_row_index, &e_2_col_index, &e_2_row_block_offset, &e_2_col_block_offset)
 * 
 *                         e_1 = flat_mask_block[e_1_row_index, e_1_col_index, e_1_row_block_offset, e_1_col_block_offset]             # <<<<<<<<<<<<<<
 *                         e_2 = flat_mask_block[e_2_row_index, e_2_col_index, e_2_row_block_offset, e_2_col_block_offset]
 * 
 */
            __pyx_t_47 = __pyx_v_e_1_row_index;
            __pyx_t_48 = __pyx_v_e_1_col_index;
            __pyx_t_49 = __pyx_v_e_1_row_block_offset;
            __pyx_t_50 = __pyx_v_e_1_col_block_offset;
            __pyx_v_e_1 = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.buf, __pyx_t_47, __pyx_pybuffernd_flat_mask_block.diminfo[0].strides, __pyx_t_48, __pyx_pybuffernd_flat_mask_block.diminfo[1].strides, __pyx_t_49, __pyx_pybuffernd_flat_mask_block.diminfo[2].strides, __pyx_t_50, __pyx_pybuffernd_flat_mask_block.diminfo[3].strides));

            /* "pygeoprocessing\routing\routing_core.pyx":2435
 * 
 *                         e_1 = flat_mask_block[e_1_row_index, e_1_col_index, e_1_row_block_offset, e_1_col_block_offset]
 *                         e_2 = flat_mask_block[e_2_row_index, e_2_col_index, e_2_row_block_offset, e_2_col_block_offset]             # <<<<<<<<<<<<<<
 * 
 *                         e_1_label = label_block[e_1_row_index, e_1_col_index, e_1_row_block_offset, e_1_col_block_offset]
 */
            __pyx_t_51 = __pyx_v_e_2_row_index;
            __pyx_t_52 = __pyx_v_e_2_col_index;
            __pyx_t_53 = __pyx_v_e_2_row_block_offset;
            __pyx_t_54 = __pyx_v_e_2_col_block_offset;
            __pyx_v_e_2 = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer.buf, __pyx_t_51, __pyx_pybuffernd_flat_mask_block.diminfo[0].strides, __pyx_t_52, __pyx_pybuffernd_flat_mask_block.diminfo[1].strides, __pyx_t_53, __pyx_pybuffernd_flat_mask_block.diminfo[2].strides, __pyx_t_54, __pyx_pybuffernd_flat_mask_block.diminfo[3].strides));

            /* "pygeoprocessing\routing\routing_core.pyx":2437
 *                         e_2 = flat_mask_block[e_2_row_index, e_2_col_index, e_2_row_block_offset, e_2_col_block_offset]
 * 
 *                         e_1_label = label_block[e_1_row_index, e_1_col_index, e_1_row_block_offset, e_1_col_block_offset]             # <<<<<<<<<<<<<<
 *                         e_2_label = label_block[e_2_row_index, e_2_col_index, e_2_row_block_offset, e_2_col_block_offset]
 * 
 */
            __pyx_t_55 = __pyx_v_e_1_row_index;
            __pyx_t_56 = __pyx_v_e_1_col_index;
            __pyx_t_57 = __pyx_v_e_1_row_block_offset;
            __pyx_t_58 = __pyx_v_e_1_col_block_offset;
            __pyx_v_e_1_label = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_label_block.rcbuffer->pybuffer.buf, __pyx_t_55, __pyx_pybuffernd_label_block.diminfo[0].strides, __pyx_t_56, __pyx_pybuffernd_label_block.diminfo[1].strides, __pyx_t_57, __pyx_pybuffernd_label_block.diminfo[2].strides, __pyx_t_58, __pyx_pybuffernd_label_block.diminfo[3].strides));

            /* "pygeoprocessing\routing\routing_core.pyx":2438
 * 
 *                         e_1_label = label_block[e_1_row_index, e_1_col_index, e_1_row_block_offset, e_1_col_block_offset]
 *                         e_2_label = label_block[e_2_row_index, e_2_col_index, e_2_row_block_offset, e_2_col_block_offset]             # <<<<<<<<<<<<<<
 * 
 *                         #if labels aren't t the same as the current, we can't flow to them
 */
            __pyx_t_59 = __pyx_v_e_2_row_index;
            __pyx_t_60 = __pyx_v_e_2_col_index;
            __pyx_t_61 = __pyx_v_e_2_row_block_offset;
            __pyx_t_62 = __pyx_v_e_2_col_block_offset;
            __pyx_v_e_2_label = (*__Pyx_BufPtrStrided4d(npy_int32 *, __pyx_pybuffernd_label_block.rcbuffer->pybuffer.buf, __pyx_t_59, __pyx_pybuffernd_label_block.diminfo[0].strides, __pyx_t_60, __pyx_pybuffernd_label_block.diminfo[1].strides, __pyx_t_61, __pyx_pybuffernd_label_block.diminfo[2].strides, __pyx_t_62, __pyx_pybuffernd_label_block.diminfo[3].strides));

            /* "pygeoprocessing\routing\routing_core.pyx":2441
 * 
 *                         #if labels aren't t the same as the current, we can't flow to them
 *                         if e_1_label != current_label and e_2_label != current_label:             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            __pyx_t_46 = ((__pyx_v_e_1_label != __pyx_v_current_label) != 0);
            if (__pyx_t_46) {
            } else {
              __pyx_t_25 = __pyx_t_46;
              goto __pyx_L30_bool_binop_done;
            }
            __pyx_t_46 = ((__pyx_v_e_2_label != __pyx_v_current_label) != 0);
            __pyx_t_25 = __pyx_t_46;
            __pyx_L30_bool_binop_done:;
            if (__pyx_t_25) {

              /* "pygeoprocessing\routing\routing_core.pyx":2442
 *                         #if labels aren't t the same as the current, we can't flow to them
 *                         if e_1_label != current_label and e_2_label != current_label:
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         #s_1 is slope along straight edge
 */
              goto __pyx_L18_continue;
            }

            /* "pygeoprocessing\routing\routing_core.pyx":2445
 * 
 *                         #s_1 is slope along straight edge
 *                         s_1 = (e_0 - e_1) / d_1 #Eqn 1             # <<<<<<<<<<<<<<
 *                         #slope along diagonal edge
 *                         s_2 = (e_1 - e_2) / d_2 #Eqn 2
 */
            __pyx_v_s_1 = ((__pyx_v_e_0 - __pyx_v_e_1) / __pyx_v_d_1);

            /* "pygeoprocessing\routing\routing_core.pyx":2447
 *                         s_1 = (e_0 - e_1) / d_1 #Eqn 1
 *                         #slope along diagonal edge
 *                         s_2 = (e_1 - e_2) / d_2 #Eqn 2             # <<<<<<<<<<<<<<
 * 
 *                         #can't calculate flow direction if one of the facets is nodata
 */
            __pyx_v_s_2 = ((__pyx_v_e_1 - __pyx_v_e_2) / __pyx_v_d_2);

            /* "pygeoprocessing\routing\routing_core.pyx":2450
 * 
 *                         #can't calculate flow direction if one of the facets is nodata
 *                         if e_1_label != current_label or e_2_label != current_label:             # <<<<<<<<<<<<<<
 *                             #make sure the flow direction perfectly aligns with
 *                             #the facet direction so we don't get a case where
 */
            __pyx_t_46 = ((__pyx_v_e_1_label != __pyx_v_current_label) != 0);
            if (!__pyx_t_46) {
            } else {
              __pyx_t_25 = __pyx_t_46;
              goto __pyx_L33_bool_binop_done;
            }
            __pyx_t_46 = ((__pyx_v_e_2_label != __pyx_v_current_label) != 0);
            __pyx_t_25 = __pyx_t_46;
            __pyx_L33_bool_binop_done:;
            if (__pyx_t_25) {

              /* "pygeoprocessing\routing\routing_core.pyx":2455
 *                             #we point toward a pixel but the next pixel down
 *                             #is the correct flow direction
 *                             if e_1_label == current_label and facet_index % 2 == 0 and e_1 < e_0:             # <<<<<<<<<<<<<<
 *                                 #straight line to next pixel
 *                                 slope = s_1
 */
              __pyx_t_46 = ((__pyx_v_e_1_label == __pyx_v_current_label) != 0);
              if (__pyx_t_46) {
              } else {
                __pyx_t_25 = __pyx_t_46;
                goto __pyx_L36_bool_binop_done;
              }
              __pyx_t_46 = (((__pyx_v_facet_index % 2) == 0) != 0);
              if (__pyx_t_46) {
              } else {
                __pyx_t_25 = __pyx_t_46;
                goto __pyx_L36_bool_binop_done;
              }
              __pyx_t_46 = ((__pyx_v_e_1 < __pyx_v_e_0) != 0);
              __pyx_t_25 = __pyx_t_46;
              __pyx_L36_bool_binop_done:;
              if (__pyx_t_25) {

                /* "pygeoprocessing\routing\routing_core.pyx":2457
 *                             if e_1_label == current_label and facet_index % 2 == 0 and e_1 < e_0:
 *                                 #straight line to next pixel
 *                                 slope = s_1             # <<<<<<<<<<<<<<
 *                                 flow_direction = 0
 *                             elif e_2_label == current_label and facet_index % 2 == 1 and e_2 < e_0:
 */
                __pyx_v_slope = __pyx_v_s_1;

                /* "pygeoprocessing\routing\routing_core.pyx":2458
 *                                 #straight line to next pixel
 *                                 slope = s_1
 *                                 flow_direction = 0             # <<<<<<<<<<<<<<
 *                             elif e_2_label == current_label and facet_index % 2 == 1 and e_2 < e_0:
 *                                 #diagonal line to next pixel
 */
                __pyx_v_flow_direction = 0.0;
                goto __pyx_L35;
              }

              /* "pygeoprocessing\routing\routing_core.pyx":2459
 *                                 slope = s_1
 *                                 flow_direction = 0
 *                             elif e_2_label == current_label and facet_index % 2 == 1 and e_2 < e_0:             # <<<<<<<<<<<<<<
 *                                 #diagonal line to next pixel
 *                                 slope = (e_0 - e_2) / sqrt(d_1 **2 + d_2 ** 2)
 */
              __pyx_t_46 = ((__pyx_v_e_2_label == __pyx_v_current_label) != 0);
              if (__pyx_t_46) {
              } else {
                __pyx_t_25 = __pyx_t_46;
                goto __pyx_L39_bool_binop_done;
              }
              __pyx_t_46 = (((__pyx_v_facet_index % 2) == 1) != 0);
              if (__pyx_t_46) {
              } else {
                __pyx_t_25 = __pyx_t_46;
                goto __pyx_L39_bool_binop_done;
              }
              __pyx_t_46 = ((__pyx_v_e_2 < __pyx_v_e_0) != 0);
              __pyx_t_25 = __pyx_t_46;
              __pyx_L39_bool_binop_done:;
              if (__pyx_t_25) {

                /* "pygeoprocessing\routing\routing_core.pyx":2461
 *                             elif e_2_label == current_label and facet_index % 2 == 1 and e_2 < e_0:
 *                                 #diagonal line to next pixel
 *                                 slope = (e_0 - e_2) / sqrt(d_1 **2 + d_2 ** 2)             # <<<<<<<<<<<<<<
 *                                 flow_direction = max_r
 *                             else:
 */
                __pyx_v_slope = ((__pyx_v_e_0 - __pyx_v_e_2) / sqrt((pow(__pyx_v_d_1, 2.0) + pow(__pyx_v_d_2, 2.0))));

                /* "pygeoprocessing\routing\routing_core.pyx":2462
 *                                 #diagonal line to next pixel
 *                                 slope = (e_0 - e_2) / sqrt(d_1 **2 + d_2 ** 2)
 *                                 flow_direction = max_r             # <<<<<<<<<<<<<<
 *                             else:
 *                                 continue
 */
                __pyx_v_flow_direction = __pyx_v_max_r;
                goto __pyx_L35;
              }
              /*else*/ {

                /* "pygeoprocessing\routing\routing_core.pyx":2464
 *                                 flow_direction = max_r
 *                             else:
 *                                 continue             # <<<<<<<<<<<<<<
 *                         else:
 *                             #both facets are defined, this is the core of
 */
                goto __pyx_L18_continue;
              }
              __pyx_L35:;
              goto __pyx_L32;
            }
            /*else*/ {

              /* "pygeoprocessing\routing\routing_core.pyx":2468
 *                             #both facets are defined, this is the core of
 *                             #d-infinity algorithm
 *                             flow_direction = atan2(s_2, s_1) #Eqn 3             # <<<<<<<<<<<<<<
 * 
 *                             if flow_direction < 0: #Eqn 4
 */
              __pyx_v_flow_direction = atan2(__pyx_v_s_2, __pyx_v_s_1);

              /* "pygeoprocessing\routing\routing_core.pyx":2470
 *                             flow_direction = atan2(s_2, s_1) #Eqn 3
 * 
 *                             if flow_direction < 0: #Eqn 4             # <<<<<<<<<<<<<<
 *                                 #If the flow direction goes off one side, set flow
 *                                 #direction to that side and the slope to the straight line
 */
              __pyx_t_25 = ((__pyx_v_flow_direction < 0.0) != 0);
              if (__pyx_t_25) {

                /* "pygeoprocessing\routing\routing_core.pyx":2474
 *                                 #direction to that side and the slope to the straight line
 *                                 #distance slope
 *                                 flow_direction = 0             # <<<<<<<<<<<<<<
 *                                 slope = s_1
 *                             elif flow_direction > max_r: #Eqn 5
 */
                __pyx_v_flow_direction = 0.0;

                /* "pygeoprocessing\routing\routing_core.pyx":2475
 *                                 #distance slope
 *                                 flow_direction = 0
 *                                 slope = s_1             # <<<<<<<<<<<<<<
 *                             elif flow_direction > max_r: #Eqn 5
 *                                 #If the flow direciton goes off the diagonal side, figure
 */
                __pyx_v_slope = __pyx_v_s_1;
                goto __pyx_L42;
              }

              /* "pygeoprocessing\routing\routing_core.pyx":2476
 *                                 flow_direction = 0
 *                                 slope = s_1
 *                             elif flow_direction > max_r: #Eqn 5             # <<<<<<<<<<<<<<
 *                                 #If the flow direciton goes off the diagonal side, figure
 *                                 #out what its value is and
 */
              __pyx_t_25 = ((__pyx_v_flow_direction > __pyx_v_max_r) != 0);
              if (__pyx_t_25) {

                /* "pygeoprocessing\routing\routing_core.pyx":2479
 *                                 #If the flow direciton goes off the diagonal side, figure
 *                                 #out what its value is and
 *                                 flow_direction = max_r             # <<<<<<<<<<<<<<
 *                                 slope = (e_0 - e_2) / sqrt(d_1 ** 2 + d_2 ** 2)
 *                             else:
 */
                __pyx_v_flow_direction = __pyx_v_max_r;

                /* "pygeoprocessing\routing\routing_core.pyx":2480
 *                                 #out what its value is and
 *                                 flow_direction = max_r
 *                                 slope = (e_0 - e_2) / sqrt(d_1 ** 2 + d_2 ** 2)             # <<<<<<<<<<<<<<
 *                             else:
 *                                 slope = sqrt(s_1 ** 2 + s_2 ** 2) #Eqn 3
 */
                __pyx_v_slope = ((__pyx_v_e_0 - __pyx_v_e_2) / sqrt((pow(__pyx_v_d_1, 2.0) + pow(__pyx_v_d_2, 2.0))));
                goto __pyx_L42;
              }
              /*else*/ {

                /* "pygeoprocessing\routing\routing_core.pyx":2482
 *                                 slope = (e_0 - e_2) / sqrt(d_1 ** 2 + d_2 ** 2)
 *                             else:
 *                                 slope = sqrt(s_1 ** 2 + s_2 ** 2) #Eqn 3             # <<<<<<<<<<<<<<
 * 
 *                         #update the maxes depending on the results above
 */
                __pyx_v_slope = sqrt((pow(__pyx_v_s_1, 2.0) + pow(__pyx_v_s_2, 2.0)));
              }
              __pyx_L42:;
            }
            __pyx_L32:;

            /* "pygeoprocessing\routing\routing_core.pyx":2485
 * 
 *                         #update the maxes depending on the results above
 *                         if slope > slope_max:             # <<<<<<<<<<<<<<
 *                             flow_direction_max_slope = flow_direction
 *                             slope_max = slope
 */
            __pyx_t_25 = ((__pyx_v_slope > __pyx_v_slope_max) != 0);
            if (__pyx_t_25) {

              /* "pygeoprocessing\routing\routing_core.pyx":2486
 *                         #update the maxes depending on the results above
 *                         if slope > slope_max:
 *                             flow_direction_max_slope = flow_direction             # <<<<<<<<<<<<<<
 *                             slope_max = slope
 *                             max_index = facet_index
 */
              __pyx_v_flow_direction_max_slope = __pyx_v_flow_direction;

              /* "pygeoprocessing\routing\routing_core.pyx":2487
 *                         if slope > slope_max:
 *                             flow_direction_max_slope = flow_direction
 *                             slope_max = slope             # <<<<<<<<<<<<<<
 *                             max_index = facet_index
 * 
 */
              __pyx_v_slope_max = __pyx_v_slope;

              /* "pygeoprocessing\routing\routing_core.pyx":2488
 *                             flow_direction_max_slope = flow_direction
 *                             slope_max = slope
 *                             max_index = facet_index             # <<<<<<<<<<<<<<
 * 
 *                     #if there's a downward slope, save the flow direction
 */
              __pyx_v_max_index = __pyx_v_facet_index;
              goto __pyx_L43;
            }
            __pyx_L43:;
            __pyx_L18_continue:;
          }

          /* "pygeoprocessing\routing\routing_core.pyx":2491
 * 
 *                     #if there's a downward slope, save the flow direction
 *                     if slope_max > 0:             # <<<<<<<<<<<<<<
 *                         flow_block[e_0_row_index, e_0_col_index, e_0_row_block_offset, e_0_col_block_offset] = (
 *                             a_f[max_index] * flow_direction_max_slope +
 */
          __pyx_t_25 = ((__pyx_v_slope_max > 0.0) != 0);
          if (__pyx_t_25) {

            /* "pygeoprocessing\routing\routing_core.pyx":2492
 *                     #if there's a downward slope, save the flow direction
 *                     if slope_max > 0:
 *                         flow_block[e_0_row_index, e_0_col_index, e_0_row_block_offset, e_0_col_block_offset] = (             # <<<<<<<<<<<<<<
 *                             a_f[max_index] * flow_direction_max_slope +
 *                             a_c[max_index] * PI / 2.0)
 */
            __pyx_t_45 = __pyx_v_e_0_row_index;
            __pyx_t_63 = __pyx_v_e_0_col_index;
            __pyx_t_64 = __pyx_v_e_0_row_block_offset;
            __pyx_t_65 = __pyx_v_e_0_col_block_offset;
            *__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flow_block.rcbuffer->pybuffer.buf, __pyx_t_45, __pyx_pybuffernd_flow_block.diminfo[0].strides, __pyx_t_63, __pyx_pybuffernd_flow_block.diminfo[1].strides, __pyx_t_64, __pyx_pybuffernd_flow_block.diminfo[2].strides, __pyx_t_65, __pyx_pybuffernd_flow_block.diminfo[3].strides) = (((__pyx_v_a_f[__pyx_v_max_index]) * __pyx_v_flow_direction_max_slope) + (((__pyx_v_a_c[__pyx_v_max_index]) * __pyx_v_15pygeoprocessing_7routing_12routing_core_PI) / 2.0));

            /* "pygeoprocessing\routing\routing_core.pyx":2495
 *                             a_f[max_index] * flow_direction_max_slope +
 *                             a_c[max_index] * PI / 2.0)
 *                         cache_dirty[e_0_row_index, e_0_col_index] = 1             # <<<<<<<<<<<<<<
 * 
 *     block_cache.flush_cache()
 */
            __pyx_t_66 = __pyx_v_e_0_row_index;
            __pyx_t_67 = __pyx_v_e_0_col_index;
            *__Pyx_BufPtrStrided2d(npy_byte *, __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf, __pyx_t_66, __pyx_pybuffernd_cache_dirty.diminfo[0].strides, __pyx_t_67, __pyx_pybuffernd_cache_dirty.diminfo[1].strides) = 1;
            goto __pyx_L44;
          }
          __pyx_L44:;
          __pyx_L14_continue:;
        }
      }
    }
  }

  /* "pygeoprocessing\routing\routing_core.pyx":2497
 *                         cache_dirty[e_0_row_index, e_0_col_index] = 1
 * 
 *     block_cache.flush_cache()             # <<<<<<<<<<<<<<
 *     flow_band = None
 *     gdal.Dataset.__swig_destroy__(flow_direction_dataset)
 */
  ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->flush_cache(__pyx_v_block_cache);

  /* "pygeoprocessing\routing\routing_core.pyx":2498
 * 
 *     block_cache.flush_cache()
 *     flow_band = None             # <<<<<<<<<<<<<<
 *     gdal.Dataset.__swig_destroy__(flow_direction_dataset)
 *     flow_direction_dataset = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_flow_band, Py_None);

  /* "pygeoprocessing\routing\routing_core.pyx":2499
 *     block_cache.flush_cache()
 *     flow_band = None
 *     gdal.Dataset.__swig_destroy__(flow_direction_dataset)             # <<<<<<<<<<<<<<
 *     flow_direction_dataset = None
 *     pygeoprocessing.calculate_raster_stats_uri(flow_direction_uri)
 */
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_Dataset); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_swig_destroy); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_18))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_18);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_18, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_18, __pyx_v_flow_direction_dataset); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_24 = PyTuple_New(1+1); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_24);
    PyTuple_SET_ITEM(__pyx_t_24, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_dataset);
    PyTuple_SET_ITEM(__pyx_t_24, 0+1, __pyx_v_flow_direction_dataset);
    __Pyx_GIVEREF(__pyx_v_flow_direction_dataset);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_24, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  }
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2500
 *     flow_band = None
 *     gdal.Dataset.__swig_destroy__(flow_direction_dataset)
 *     flow_direction_dataset = None             # <<<<<<<<<<<<<<
 *     pygeoprocessing.calculate_raster_stats_uri(flow_direction_uri)
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_flow_direction_dataset, Py_None);

  /* "pygeoprocessing\routing\routing_core.pyx":2501
 *     gdal.Dataset.__swig_destroy__(flow_direction_dataset)
 *     flow_direction_dataset = None
 *     pygeoprocessing.calculate_raster_stats_uri(flow_direction_uri)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_calculate_raster_stats_uri); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_24))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_24);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_24);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_24, function);
    }
  }
  if (!__pyx_t_18) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_24, __pyx_v_flow_direction_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_18); __Pyx_GIVEREF(__pyx_t_18); __pyx_t_18 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_flow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_24, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2246
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def flow_direction_inf_masked_flow_dirs(             # <<<<<<<<<<<<<<
 *         flat_mask_uri, labels_uri, flow_direction_uri):
 *     """Calculates the D-infinity flow algorithm for regions defined from flat
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_24);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_label_block.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.flow_direction_inf_masked_flow_dirs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flat_mask_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_label_block.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_flat_mask_ds);
  __Pyx_XDECREF(__pyx_v_flat_mask_band);
  __Pyx_XDECREF(__pyx_v_flow_direction_dataset);
  __Pyx_XDECREF(__pyx_v_flow_band);
  __Pyx_XDECREF(__pyx_v_label_dataset);
  __Pyx_XDECREF(__pyx_v_label_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_flat_mask_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_label_block);
  __Pyx_XDECREF(__pyx_v_band_list);
  __Pyx_XDECREF(__pyx_v_block_list);
  __Pyx_XDECREF(__pyx_v_update_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_cache_dirty);
  __Pyx_XDECREF((PyObject *)__pyx_v_block_cache);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":2507
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef find_outlets(dem_uri, flow_direction_uri, deque[int] &outlet_deque):             # <<<<<<<<<<<<<<
 *     """Discover and return the outlets in the dem array
 * 
 */

static PyObject *__pyx_f_15pygeoprocessing_7routing_12routing_core_find_outlets(PyObject *__pyx_v_dem_uri, PyObject *__pyx_v_flow_direction_uri, std::deque<int>  &__pyx_v_outlet_deque) {
  PyObject *__pyx_v_dem_ds = NULL;
  PyObject *__pyx_v_dem_band = NULL;
  PyObject *__pyx_v_flow_direction_ds = NULL;
  PyObject *__pyx_v_flow_direction_band = NULL;
  float __pyx_v_flow_nodata;
  int __pyx_v_block_col_size;
  int __pyx_v_block_row_size;
  int __pyx_v_n_rows;
  int __pyx_v_n_cols;
  PyArrayObject *__pyx_v_dem_block = 0;
  PyArrayObject *__pyx_v_flow_direction_block = 0;
  PyObject *__pyx_v_band_list = NULL;
  PyObject *__pyx_v_block_list = NULL;
  PyObject *__pyx_v_update_list = NULL;
  PyArrayObject *__pyx_v_cache_dirty = 0;
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *__pyx_v_block_cache = 0;
  float __pyx_v_dem_nodata;
  int __pyx_v_cell_row_index;
  int __pyx_v_cell_col_index;
  int __pyx_v_cell_row_block_index;
  int __pyx_v_cell_col_block_index;
  int __pyx_v_cell_row_block_offset;
  int __pyx_v_cell_col_block_offset;
  int __pyx_v_flat_index;
  float __pyx_v_dem_value;
  float __pyx_v_flow_direction;
  time_t __pyx_v_last_time;
  time_t __pyx_v_current_time;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cache_dirty;
  __Pyx_Buffer __pyx_pybuffer_cache_dirty;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dem_block;
  __Pyx_Buffer __pyx_pybuffer_dem_block;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flow_direction_block;
  __Pyx_Buffer __pyx_pybuffer_flow_direction_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  float __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  PyArrayObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  int __pyx_t_25;
  int __pyx_t_26;
  int __pyx_t_27;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_outlets", 0);
  __pyx_pybuffer_dem_block.pybuffer.buf = NULL;
  __pyx_pybuffer_dem_block.refcount = 0;
  __pyx_pybuffernd_dem_block.data = NULL;
  __pyx_pybuffernd_dem_block.rcbuffer = &__pyx_pybuffer_dem_block;
  __pyx_pybuffer_flow_direction_block.pybuffer.buf = NULL;
  __pyx_pybuffer_flow_direction_block.refcount = 0;
  __pyx_pybuffernd_flow_direction_block.data = NULL;
  __pyx_pybuffernd_flow_direction_block.rcbuffer = &__pyx_pybuffer_flow_direction_block;
  __pyx_pybuffer_cache_dirty.pybuffer.buf = NULL;
  __pyx_pybuffer_cache_dirty.refcount = 0;
  __pyx_pybuffernd_cache_dirty.data = NULL;
  __pyx_pybuffernd_cache_dirty.rcbuffer = &__pyx_pybuffer_cache_dirty;

  /* "pygeoprocessing\routing\routing_core.pyx":2522
 *             nothing"""
 * 
 *     dem_ds = gdal.Open(dem_uri)             # <<<<<<<<<<<<<<
 *     dem_band = dem_ds.GetRasterBand(1)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Open); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_dem_uri); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_dem_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_dem_uri);
    __Pyx_GIVEREF(__pyx_v_dem_uri);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dem_ds = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2523
 * 
 *     dem_ds = gdal.Open(dem_uri)
 *     dem_band = dem_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dem_band = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2525
 *     dem_band = dem_ds.GetRasterBand(1)
 * 
 *     flow_direction_ds = gdal.Open(flow_direction_uri)             # <<<<<<<<<<<<<<
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Open); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_flow_direction_uri); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_flow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_flow_direction_ds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2526
 * 
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(
 *         flow_direction_uri)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_direction_ds, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_direction_band = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2527
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2528
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(
 *         flow_direction_uri)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_flow_direction_uri); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_flow_direction_uri);
    PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_v_flow_direction_uri);
    __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2527
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(             # <<<<<<<<<<<<<<
 *         flow_direction_uri)
 * 
 */
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_flow_nodata = __pyx_t_5;

  /* "pygeoprocessing\routing\routing_core.pyx":2531
 * 
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = dem_band.GetBlockSize()             # <<<<<<<<<<<<<<
 *     cdef int n_rows = dem_ds.RasterYSize
 *     cdef int n_cols = dem_ds.RasterXSize
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_band, __pyx_n_s_GetBlockSize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
    PyObject* sequence = __pyx_t_4;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_1 = __pyx_t_6(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_3), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_block_col_size = __pyx_t_7;
  __pyx_v_block_row_size = __pyx_t_8;

  /* "pygeoprocessing\routing\routing_core.pyx":2532
 *     cdef int block_col_size, block_row_size
 *     block_col_size, block_row_size = dem_band.GetBlockSize()
 *     cdef int n_rows = dem_ds.RasterYSize             # <<<<<<<<<<<<<<
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_RasterYSize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_n_rows = __pyx_t_8;

  /* "pygeoprocessing\routing\routing_core.pyx":2533
 *     block_col_size, block_row_size = dem_band.GetBlockSize()
 *     cdef int n_rows = dem_ds.RasterYSize
 *     cdef int n_cols = dem_ds.RasterXSize             # <<<<<<<<<<<<<<
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_ds, __pyx_n_s_RasterXSize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_n_cols = __pyx_t_8;

  /* "pygeoprocessing\routing\routing_core.pyx":2535
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2536
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_direction_block = numpy.zeros(
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2535
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);

  /* "pygeoprocessing\routing\routing_core.pyx":2537
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2535
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] dem_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dem_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_dem_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_dem_block.diminfo[0].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dem_block.diminfo[0].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dem_block.diminfo[1].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dem_block.diminfo[1].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_dem_block.diminfo[2].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_dem_block.diminfo[2].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_dem_block.diminfo[3].strides = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_dem_block.diminfo[3].shape = __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_11 = 0;
  __pyx_v_dem_block = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2538
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_direction_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2539
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),             # <<<<<<<<<<<<<<
 *         dtype=numpy.float32)
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_9 = 0;
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2538
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_direction_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygeoprocessing\routing\routing_core.pyx":2540
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_direction_block = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)             # <<<<<<<<<<<<<<
 * 
 *     band_list = [dem_band, flow_direction_band]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2538
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] flow_direction_block = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size),
 *         dtype=numpy.float32)
 */
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_12 = ((PyArrayObject *)__pyx_t_9);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn_npy_float32, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_flow_direction_block = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_flow_direction_block.diminfo[0].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flow_direction_block.diminfo[0].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flow_direction_block.diminfo[1].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flow_direction_block.diminfo[1].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_flow_direction_block.diminfo[2].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_flow_direction_block.diminfo[2].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_flow_direction_block.diminfo[3].strides = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_flow_direction_block.diminfo[3].shape = __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_12 = 0;
  __pyx_v_flow_direction_block = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2542
 *         dtype=numpy.float32)
 * 
 *     band_list = [dem_band, flow_direction_band]             # <<<<<<<<<<<<<<
 *     block_list = [dem_block, flow_direction_block]
 *     update_list = [False, False]
 */
  __pyx_t_9 = PyList_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(__pyx_v_dem_band);
  PyList_SET_ITEM(__pyx_t_9, 0, __pyx_v_dem_band);
  __Pyx_GIVEREF(__pyx_v_dem_band);
  __Pyx_INCREF(__pyx_v_flow_direction_band);
  PyList_SET_ITEM(__pyx_t_9, 1, __pyx_v_flow_direction_band);
  __Pyx_GIVEREF(__pyx_v_flow_direction_band);
  __pyx_v_band_list = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2543
 * 
 *     band_list = [dem_band, flow_direction_band]
 *     block_list = [dem_block, flow_direction_block]             # <<<<<<<<<<<<<<
 *     update_list = [False, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 */
  __pyx_t_9 = PyList_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(((PyObject *)__pyx_v_dem_block));
  PyList_SET_ITEM(__pyx_t_9, 0, ((PyObject *)__pyx_v_dem_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_dem_block));
  __Pyx_INCREF(((PyObject *)__pyx_v_flow_direction_block));
  PyList_SET_ITEM(__pyx_t_9, 1, ((PyObject *)__pyx_v_flow_direction_block));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_flow_direction_block));
  __pyx_v_block_list = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2544
 *     band_list = [dem_band, flow_direction_band]
 *     block_list = [dem_block, flow_direction_block]
 *     update_list = [False, False]             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 */
  __pyx_t_9 = PyList_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_9, 0, Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_9, 1, Py_False);
  __Pyx_GIVEREF(Py_False);
  __pyx_v_update_list = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2545
 *     block_list = [dem_block, flow_direction_block]
 *     update_list = [False, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2546
 *     update_list = [False, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_9 = 0;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2545
 *     block_list = [dem_block, flow_direction_block]
 *     update_list = [False, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);

  /* "pygeoprocessing\routing\routing_core.pyx":2546
 *     update_list = [False, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)             # <<<<<<<<<<<<<<
 * 
 *     cdef BlockCache block_cache = BlockCache(
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_byte); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2545
 *     block_list = [dem_block, flow_direction_block]
 *     update_list = [False, False]
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=2] cache_dirty = numpy.zeros(             # <<<<<<<<<<<<<<
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_10); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn_npy_byte, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_cache_dirty = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_cache_dirty.diminfo[0].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cache_dirty.diminfo[0].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cache_dirty.diminfo[1].strides = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cache_dirty.diminfo[1].shape = __pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_13 = 0;
  __pyx_v_cache_dirty = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2549
 * 
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,             # <<<<<<<<<<<<<<
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n_rows); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_n_cols); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_block_row_size); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);

  /* "pygeoprocessing\routing\routing_core.pyx":2550
 *     cdef BlockCache block_cache = BlockCache(
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)             # <<<<<<<<<<<<<<
 * 
 *     cdef float dem_nodata = pygeoprocessing.get_nodata_from_uri(dem_uri)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_block_col_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pygeoprocessing\routing\routing_core.pyx":2548
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.byte)
 * 
 *     cdef BlockCache block_cache = BlockCache(             # <<<<<<<<<<<<<<
 *         N_BLOCK_ROWS, N_BLOCK_COLS, n_rows, n_cols, block_row_size,
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 */
  __pyx_t_14 = PyTuple_New(10); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_14, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_14, 4, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_14, 5, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_band_list);
  PyTuple_SET_ITEM(__pyx_t_14, 6, __pyx_v_band_list);
  __Pyx_GIVEREF(__pyx_v_band_list);
  __Pyx_INCREF(__pyx_v_block_list);
  PyTuple_SET_ITEM(__pyx_t_14, 7, __pyx_v_block_list);
  __Pyx_GIVEREF(__pyx_v_block_list);
  __Pyx_INCREF(__pyx_v_update_list);
  PyTuple_SET_ITEM(__pyx_t_14, 8, __pyx_v_update_list);
  __Pyx_GIVEREF(__pyx_v_update_list);
  __Pyx_INCREF(((PyObject *)__pyx_v_cache_dirty));
  PyTuple_SET_ITEM(__pyx_t_14, 9, ((PyObject *)__pyx_v_cache_dirty));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cache_dirty));
  __pyx_t_1 = 0;
  __pyx_t_10 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache)), __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_v_block_cache = ((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2552
 *         block_col_size, band_list, block_list, update_list, cache_dirty)
 * 
 *     cdef float dem_nodata = pygeoprocessing.get_nodata_from_uri(dem_uri)             # <<<<<<<<<<<<<<
 * 
 *     cdef int cell_row_index, cell_col_index
 */
  __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_get_nodata_from_uri); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (!__pyx_t_14) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_dem_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_14); __Pyx_GIVEREF(__pyx_t_14); __pyx_t_14 = NULL;
    __Pyx_INCREF(__pyx_v_dem_uri);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_dem_uri);
    __Pyx_GIVEREF(__pyx_v_dem_uri);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dem_nodata = __pyx_t_5;

  /* "pygeoprocessing\routing\routing_core.pyx":2560
 *     cdef float dem_value, flow_direction
 * 
 *     outlet_deque.clear()             # <<<<<<<<<<<<<<
 * 
 *     cdef time_t last_time, current_time
 */
  __pyx_v_outlet_deque.clear();

  /* "pygeoprocessing\routing\routing_core.pyx":2563
 * 
 *     cdef time_t last_time, current_time
 *     time(&last_time)             # <<<<<<<<<<<<<<
 * 
 *     for cell_row_index in xrange(n_rows):
 */
  time((&__pyx_v_last_time));

  /* "pygeoprocessing\routing\routing_core.pyx":2565
 *     time(&last_time)
 * 
 *     for cell_row_index in xrange(n_rows):             # <<<<<<<<<<<<<<
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 */
  __pyx_t_8 = __pyx_v_n_rows;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_8; __pyx_t_7+=1) {
    __pyx_v_cell_row_index = __pyx_t_7;

    /* "pygeoprocessing\routing\routing_core.pyx":2566
 * 
 *     for cell_row_index in xrange(n_rows):
 *         time(&current_time)             # <<<<<<<<<<<<<<
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(
 */
    time((&__pyx_v_current_time));

    /* "pygeoprocessing\routing\routing_core.pyx":2567
 *     for cell_row_index in xrange(n_rows):
 *         time(&current_time)
 *         if current_time - last_time > 5.0:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 'find outlet percent complete = %.2f, outlet_deque size = %d',
 */
    __pyx_t_15 = (((__pyx_v_current_time - __pyx_v_last_time) > 5.0) != 0);
    if (__pyx_t_15) {

      /* "pygeoprocessing\routing\routing_core.pyx":2568
 *         time(&current_time)
 *         if current_time - last_time > 5.0:
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 'find outlet percent complete = %.2f, outlet_deque size = %d',
 *                 float(cell_row_index)/n_rows * 100, outlet_deque.size())
 */
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":2570
 *             LOGGER.info(
 *                 'find outlet percent complete = %.2f, outlet_deque size = %d',
 *                 float(cell_row_index)/n_rows * 100, outlet_deque.size())             # <<<<<<<<<<<<<<
 *             last_time = current_time
 *         for cell_col_index in xrange(n_cols):
 */
      __pyx_t_9 = PyFloat_FromDouble(((((double)__pyx_v_cell_row_index) / __pyx_v_n_rows) * 100.0)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = __Pyx_PyInt_FromSize_t(__pyx_v_outlet_deque.size()); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_3 = NULL;
      __pyx_t_16 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_16 = 1;
        }
      }
      __pyx_t_10 = PyTuple_New(3+__pyx_t_16); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_3) {
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_find_outlet_percent_complete_2f);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_16, __pyx_kp_s_find_outlet_percent_complete_2f);
      __Pyx_GIVEREF(__pyx_kp_s_find_outlet_percent_complete_2f);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_16, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_16, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      __pyx_t_9 = 0;
      __pyx_t_14 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":2571
 *                 'find outlet percent complete = %.2f, outlet_deque size = %d',
 *                 float(cell_row_index)/n_rows * 100, outlet_deque.size())
 *             last_time = current_time             # <<<<<<<<<<<<<<
 *         for cell_col_index in xrange(n_cols):
 * 
 */
      __pyx_v_last_time = __pyx_v_current_time;
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "pygeoprocessing\routing\routing_core.pyx":2572
 *                 float(cell_row_index)/n_rows * 100, outlet_deque.size())
 *             last_time = current_time
 *         for cell_col_index in xrange(n_cols):             # <<<<<<<<<<<<<<
 * 
 *             block_cache.update_cache(
 */
    __pyx_t_17 = __pyx_v_n_cols;
    for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
      __pyx_v_cell_col_index = __pyx_t_18;

      /* "pygeoprocessing\routing\routing_core.pyx":2574
 *         for cell_col_index in xrange(n_cols):
 * 
 *             block_cache.update_cache(             # <<<<<<<<<<<<<<
 *                 cell_row_index, cell_col_index,
 *                 &cell_row_block_index, &cell_col_block_index,
 */
      ((struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache *)__pyx_v_block_cache->__pyx_vtab)->update_cache(__pyx_v_block_cache, __pyx_v_cell_row_index, __pyx_v_cell_col_index, (&__pyx_v_cell_row_block_index), (&__pyx_v_cell_col_block_index), (&__pyx_v_cell_row_block_offset), (&__pyx_v_cell_col_block_offset));

      /* "pygeoprocessing\routing\routing_core.pyx":2579
 *                 &cell_row_block_offset, &cell_col_block_offset)
 * 
 *             dem_value = dem_block[             # <<<<<<<<<<<<<<
 *                 cell_row_block_index, cell_col_block_index,
 *                 cell_row_block_offset, cell_col_block_offset]
 */
      __pyx_t_19 = __pyx_v_cell_row_block_index;
      __pyx_t_20 = __pyx_v_cell_col_block_index;
      __pyx_t_21 = __pyx_v_cell_row_block_offset;
      __pyx_t_22 = __pyx_v_cell_col_block_offset;
      __pyx_v_dem_value = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_dem_block.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_dem_block.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_dem_block.diminfo[1].strides, __pyx_t_21, __pyx_pybuffernd_dem_block.diminfo[2].strides, __pyx_t_22, __pyx_pybuffernd_dem_block.diminfo[3].strides));

      /* "pygeoprocessing\routing\routing_core.pyx":2582
 *                 cell_row_block_index, cell_col_block_index,
 *                 cell_row_block_offset, cell_col_block_offset]
 *             flow_direction = flow_direction_block[             # <<<<<<<<<<<<<<
 *                 cell_row_block_index, cell_col_block_index,
 *                 cell_row_block_offset, cell_col_block_offset]
 */
      __pyx_t_23 = __pyx_v_cell_row_block_index;
      __pyx_t_24 = __pyx_v_cell_col_block_index;
      __pyx_t_25 = __pyx_v_cell_row_block_offset;
      __pyx_t_26 = __pyx_v_cell_col_block_offset;
      __pyx_v_flow_direction = (*__Pyx_BufPtrStrided4d(npy_float32 *, __pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_flow_direction_block.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_flow_direction_block.diminfo[1].strides, __pyx_t_25, __pyx_pybuffernd_flow_direction_block.diminfo[2].strides, __pyx_t_26, __pyx_pybuffernd_flow_direction_block.diminfo[3].strides));

      /* "pygeoprocessing\routing\routing_core.pyx":2589
 *             #either a sink or an outlet
 * 
 *             if dem_value != dem_nodata and flow_direction == flow_nodata:             # <<<<<<<<<<<<<<
 *                 flat_index = cell_row_index * n_cols + cell_col_index
 *                 outlet_deque.push_front(flat_index)
 */
      __pyx_t_27 = ((__pyx_v_dem_value != __pyx_v_dem_nodata) != 0);
      if (__pyx_t_27) {
      } else {
        __pyx_t_15 = __pyx_t_27;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_27 = ((__pyx_v_flow_direction == __pyx_v_flow_nodata) != 0);
      __pyx_t_15 = __pyx_t_27;
      __pyx_L11_bool_binop_done:;
      if (__pyx_t_15) {

        /* "pygeoprocessing\routing\routing_core.pyx":2590
 * 
 *             if dem_value != dem_nodata and flow_direction == flow_nodata:
 *                 flat_index = cell_row_index * n_cols + cell_col_index             # <<<<<<<<<<<<<<
 *                 outlet_deque.push_front(flat_index)
 * 
 */
        __pyx_v_flat_index = ((__pyx_v_cell_row_index * __pyx_v_n_cols) + __pyx_v_cell_col_index);

        /* "pygeoprocessing\routing\routing_core.pyx":2591
 *             if dem_value != dem_nodata and flow_direction == flow_nodata:
 *                 flat_index = cell_row_index * n_cols + cell_col_index
 *                 outlet_deque.push_front(flat_index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_v_outlet_deque.push_front(__pyx_v_flat_index);
        goto __pyx_L10;
      }
      __pyx_L10:;
    }
  }

  /* "pygeoprocessing\routing\routing_core.pyx":2507
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef find_outlets(dem_uri, flow_direction_uri, deque[int] &outlet_deque):             # <<<<<<<<<<<<<<
 *     """Discover and return the outlets in the dem array
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_14);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_block.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.find_outlets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cache_dirty.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_block.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_direction_block.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_dem_ds);
  __Pyx_XDECREF(__pyx_v_dem_band);
  __Pyx_XDECREF(__pyx_v_flow_direction_ds);
  __Pyx_XDECREF(__pyx_v_flow_direction_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_dem_block);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_direction_block);
  __Pyx_XDECREF(__pyx_v_band_list);
  __Pyx_XDECREF(__pyx_v_block_list);
  __Pyx_XDECREF(__pyx_v_update_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_cache_dirty);
  __Pyx_XDECREF((PyObject *)__pyx_v_block_cache);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":2594
 * 
 * 
 * def resolve_flats(             # <<<<<<<<<<<<<<
 *     dem_uri, flow_direction_uri, flat_mask_uri, labels_uri,
 *     drain_off_edge=False):
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_13resolve_flats(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15pygeoprocessing_7routing_12routing_core_12resolve_flats[] = "Function to resolve the flat regions in the dem given a first attempt\n        run at calculating flow direction.  Will provide regions of flat areas\n        and their labels.\n\n        Based on: Barnes, Richard, Clarence Lehman, and David Mulla. \"An\n            efficient assignment of drainage direction over flat surfaces in\n            raster digital elevation models.\" Computers & Geosciences 62\n            (2014): 128-135.\n\n        Args:\n            dem_uri (string) - (input) a uri to a single band GDAL Dataset with\n                elevation values\n            flow_direction_uri (string) - (input/output) a uri to a single band\n                GDAL Dataset with partially defined d_infinity flow directions\n            drain_off_edge (boolean) - input if true will drain flat areas off\n                the edge of the raster\n\n        Returns:\n            True if there were flats to resolve, False otherwise";
static PyMethodDef __pyx_mdef_15pygeoprocessing_7routing_12routing_core_13resolve_flats = {"resolve_flats", (PyCFunction)__pyx_pw_15pygeoprocessing_7routing_12routing_core_13resolve_flats, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15pygeoprocessing_7routing_12routing_core_12resolve_flats};
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_13resolve_flats(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dem_uri = 0;
  PyObject *__pyx_v_flow_direction_uri = 0;
  PyObject *__pyx_v_flat_mask_uri = 0;
  PyObject *__pyx_v_labels_uri = 0;
  PyObject *__pyx_v_drain_off_edge = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resolve_flats (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dem_uri,&__pyx_n_s_flow_direction_uri,&__pyx_n_s_flat_mask_uri,&__pyx_n_s_labels_uri,&__pyx_n_s_drain_off_edge,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "pygeoprocessing\routing\routing_core.pyx":2596
 * def resolve_flats(
 *     dem_uri, flow_direction_uri, flat_mask_uri, labels_uri,
 *     drain_off_edge=False):             # <<<<<<<<<<<<<<
 *     """Function to resolve the flat regions in the dem given a first attempt
 *         run at calculating flow direction.  Will provide regions of flat areas
 */
    values[4] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dem_uri)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flow_direction_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("resolve_flats", 0, 4, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flat_mask_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("resolve_flats", 0, 4, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_labels_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("resolve_flats", 0, 4, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_drain_off_edge);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "resolve_flats") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dem_uri = values[0];
    __pyx_v_flow_direction_uri = values[1];
    __pyx_v_flat_mask_uri = values[2];
    __pyx_v_labels_uri = values[3];
    __pyx_v_drain_off_edge = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("resolve_flats", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.resolve_flats", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pygeoprocessing_7routing_12routing_core_12resolve_flats(__pyx_self, __pyx_v_dem_uri, __pyx_v_flow_direction_uri, __pyx_v_flat_mask_uri, __pyx_v_labels_uri, __pyx_v_drain_off_edge);

  /* "pygeoprocessing\routing\routing_core.pyx":2594
 * 
 * 
 * def resolve_flats(             # <<<<<<<<<<<<<<
 *     dem_uri, flow_direction_uri, flat_mask_uri, labels_uri,
 *     drain_off_edge=False):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_12resolve_flats(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_uri, PyObject *__pyx_v_flow_direction_uri, PyObject *__pyx_v_flat_mask_uri, PyObject *__pyx_v_labels_uri, PyObject *__pyx_v_drain_off_edge) {
  std::deque<int>  __pyx_v_high_edges;
  std::deque<int>  __pyx_v_low_edges;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_15pygeoprocessing_7routing_12routing_core_flat_edges __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("resolve_flats", 0);

  /* "pygeoprocessing\routing\routing_core.pyx":2621
 *     flat_edges(
 *         dem_uri, flow_direction_uri, high_edges, low_edges,
 *         drain_off_edge=drain_off_edge)             # <<<<<<<<<<<<<<
 * 
 *     if low_edges.size() == 0:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_drain_off_edge); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pygeoprocessing\routing\routing_core.pyx":2619
 *     cdef deque[int] high_edges
 *     cdef deque[int] low_edges
 *     flat_edges(             # <<<<<<<<<<<<<<
 *         dem_uri, flow_direction_uri, high_edges, low_edges,
 *         drain_off_edge=drain_off_edge)
 */
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.drain_off_edge = __pyx_t_1;
  __pyx_t_2 = __pyx_f_15pygeoprocessing_7routing_12routing_core_flat_edges(__pyx_v_dem_uri, __pyx_v_flow_direction_uri, __pyx_v_high_edges, __pyx_v_low_edges, &__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2623
 *         drain_off_edge=drain_off_edge)
 * 
 *     if low_edges.size() == 0:             # <<<<<<<<<<<<<<
 *         if high_edges.size() != 0:
 *             LOGGER.warn('There were undrainable flats')
 */
  __pyx_t_4 = ((__pyx_v_low_edges.size() == 0) != 0);
  if (__pyx_t_4) {

    /* "pygeoprocessing\routing\routing_core.pyx":2624
 * 
 *     if low_edges.size() == 0:
 *         if high_edges.size() != 0:             # <<<<<<<<<<<<<<
 *             LOGGER.warn('There were undrainable flats')
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_high_edges.size() != 0) != 0);
    if (__pyx_t_4) {

      /* "pygeoprocessing\routing\routing_core.pyx":2625
 *     if low_edges.size() == 0:
 *         if high_edges.size() != 0:
 *             LOGGER.warn('There were undrainable flats')             # <<<<<<<<<<<<<<
 *         else:
 *             LOGGER.info('There were no flats')
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_warn); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "pygeoprocessing\routing\routing_core.pyx":2627
 *             LOGGER.warn('There were undrainable flats')
 *         else:
 *             LOGGER.info('There were no flats')             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L4:;

    /* "pygeoprocessing\routing\routing_core.pyx":2628
 *         else:
 *             LOGGER.info('There were no flats')
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     LOGGER.info('labeling flats')
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "pygeoprocessing\routing\routing_core.pyx":2630
 *         return False
 * 
 *     LOGGER.info('labeling flats')             # <<<<<<<<<<<<<<
 *     label_flats(dem_uri, low_edges, labels_uri)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2631
 * 
 *     LOGGER.info('labeling flats')
 *     label_flats(dem_uri, low_edges, labels_uri)             # <<<<<<<<<<<<<<
 * 
 *     #LOGGER.info('cleaning high edges')
 */
  __pyx_t_2 = __pyx_f_15pygeoprocessing_7routing_12routing_core_label_flats(__pyx_v_dem_uri, __pyx_v_low_edges, __pyx_v_labels_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2636
 *     #clean_high_edges(labels_uri, high_edges)
 * 
 *     drain_flats(             # <<<<<<<<<<<<<<
 *         high_edges, low_edges, labels_uri, flow_direction_uri, flat_mask_uri)
 * 
 */
  __pyx_t_2 = __pyx_f_15pygeoprocessing_7routing_12routing_core_drain_flats(__pyx_v_high_edges, __pyx_v_low_edges, __pyx_v_labels_uri, __pyx_v_flow_direction_uri, __pyx_v_flat_mask_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2639
 *         high_edges, low_edges, labels_uri, flow_direction_uri, flat_mask_uri)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "pygeoprocessing\routing\routing_core.pyx":2594
 * 
 * 
 * def resolve_flats(             # <<<<<<<<<<<<<<
 *     dem_uri, flow_direction_uri, flat_mask_uri, labels_uri,
 *     drain_off_edge=False):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.resolve_flats", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygeoprocessing\routing\routing_core.pyx":2642
 * 
 * 
 * def route_flux(             # <<<<<<<<<<<<<<
 *         in_flow_direction, in_dem, in_source_uri, in_absorption_rate_uri,
 *         loss_uri, flux_uri, absorption_mode, aoi_uri=None, stream_uri=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_15route_flux(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15pygeoprocessing_7routing_12routing_core_14route_flux[] = "This function will route flux across a landscape given a dem to\n        guide flow from a d-infinty flow algorithm, and a custom function\n        that will operate on input flux and other user defined arguments\n        to determine nodal output flux.\n\n        in_flow_direction - a URI to a d-infinity flow direction raster\n        in_dem - a uri to the dem that generated in_flow_direction, they\n            should be aligned rasters\n        in_source_uri - a GDAL dataset that has source flux per pixel\n        in_absorption_rate_uri - a GDAL floating point dataset that has a\n            percent of flux absorbed per pixel\n        loss_uri - an output URI to to the dataset that will output the\n            amount of flux absorbed by each pixel\n        flux_uri - a URI to an output dataset that records the amount of flux\n            travelling through each pixel\n        absorption_mode - either 'flux_only' or 'source_and_flux'. For\n            'flux_only' the outgoing flux is (in_flux * absorption + source).\n            If 'source_and_flux' then the output flux\n            is (in_flux + source) * absorption.\n        aoi_uri - an OGR datasource for an area of interest polygon.\n            the routing flux calculation will only occur on those pixels\n            and neighboring pixels will either be raw outlets or\n            non-contibuting inputs depending on the orientation of the DEM.\n        stream_uri - (optional) a GDAL dataset that classifies pixels as stream\n            (1) or not (0).  If during routing we hit a stream pixel, all\n            upstream flux is considered to wash to zero because it will\n            reach the outlet.  The advantage here is that it can't then\n            route out of the stream\n\n        returns nothing";
static PyMethodDef __pyx_mdef_15pygeoprocessing_7routing_12routing_core_15route_flux = {"route_flux", (PyCFunction)__pyx_pw_15pygeoprocessing_7routing_12routing_core_15route_flux, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15pygeoprocessing_7routing_12routing_core_14route_flux};
static PyObject *__pyx_pw_15pygeoprocessing_7routing_12routing_core_15route_flux(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_flow_direction = 0;
  PyObject *__pyx_v_in_dem = 0;
  PyObject *__pyx_v_in_source_uri = 0;
  PyObject *__pyx_v_in_absorption_rate_uri = 0;
  PyObject *__pyx_v_loss_uri = 0;
  PyObject *__pyx_v_flux_uri = 0;
  PyObject *__pyx_v_absorption_mode = 0;
  PyObject *__pyx_v_aoi_uri = 0;
  PyObject *__pyx_v_stream_uri = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("route_flux (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_flow_direction,&__pyx_n_s_in_dem,&__pyx_n_s_in_source_uri,&__pyx_n_s_in_absorption_rate_uri,&__pyx_n_s_loss_uri,&__pyx_n_s_flux_uri,&__pyx_n_s_absorption_mode,&__pyx_n_s_aoi_uri,&__pyx_n_s_stream_uri,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

    /* "pygeoprocessing\routing\routing_core.pyx":2644
 * def route_flux(
 *         in_flow_direction, in_dem, in_source_uri, in_absorption_rate_uri,
 *         loss_uri, flux_uri, absorption_mode, aoi_uri=None, stream_uri=None):             # <<<<<<<<<<<<<<
 * 
 *     """This function will route flux across a landscape given a dem to
 */
    values[7] = ((PyObject *)Py_None);
    values[8] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_flow_direction)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_dem)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("route_flux", 0, 7, 9, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_source_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("route_flux", 0, 7, 9, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_absorption_rate_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("route_flux", 0, 7, 9, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_loss_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("route_flux", 0, 7, 9, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flux_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("route_flux", 0, 7, 9, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_absorption_mode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("route_flux", 0, 7, 9, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aoi_uri);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stream_uri);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "route_flux") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_flow_direction = values[0];
    __pyx_v_in_dem = values[1];
    __pyx_v_in_source_uri = values[2];
    __pyx_v_in_absorption_rate_uri = values[3];
    __pyx_v_loss_uri = values[4];
    __pyx_v_flux_uri = values[5];
    __pyx_v_absorption_mode = values[6];
    __pyx_v_aoi_uri = values[7];
    __pyx_v_stream_uri = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("route_flux", 0, 7, 9, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.route_flux", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pygeoprocessing_7routing_12routing_core_14route_flux(__pyx_self, __pyx_v_in_flow_direction, __pyx_v_in_dem, __pyx_v_in_source_uri, __pyx_v_in_absorption_rate_uri, __pyx_v_loss_uri, __pyx_v_flux_uri, __pyx_v_absorption_mode, __pyx_v_aoi_uri, __pyx_v_stream_uri);

  /* "pygeoprocessing\routing\routing_core.pyx":2642
 * 
 * 
 * def route_flux(             # <<<<<<<<<<<<<<
 *         in_flow_direction, in_dem, in_source_uri, in_absorption_rate_uri,
 *         loss_uri, flux_uri, absorption_mode, aoi_uri=None, stream_uri=None):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pygeoprocessing_7routing_12routing_core_14route_flux(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_in_flow_direction, PyObject *__pyx_v_in_dem, PyObject *__pyx_v_in_source_uri, PyObject *__pyx_v_in_absorption_rate_uri, PyObject *__pyx_v_loss_uri, PyObject *__pyx_v_flux_uri, PyObject *__pyx_v_absorption_mode, PyObject *__pyx_v_aoi_uri, PyObject *__pyx_v_stream_uri) {
  PyObject *__pyx_v_dem_uri = NULL;
  PyObject *__pyx_v_flow_direction_uri = NULL;
  PyObject *__pyx_v_source_uri = NULL;
  PyObject *__pyx_v_absorption_rate_uri = NULL;
  PyObject *__pyx_v_out_pixel_size = NULL;
  PyObject *__pyx_v_outflow_weights_uri = NULL;
  PyObject *__pyx_v_outflow_direction_uri = NULL;
  std::deque<int>  __pyx_v_outlet_cell_deque;
  PyObject *__pyx_v_cleanup_uri_list = NULL;
  PyObject *__pyx_v_ds_uri = NULL;
  PyObject *__pyx_v_exception = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  struct __pyx_opt_args_15pygeoprocessing_7routing_12routing_core_calculate_transport __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("route_flux", 0);

  /* "pygeoprocessing\routing\routing_core.pyx":2677
 *         returns nothing"""
 * 
 *     dem_uri = pygeoprocessing.temporary_filename(suffix='.tif')             # <<<<<<<<<<<<<<
 *     flow_direction_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 *     source_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_temporary_filename); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_suffix, __pyx_kp_s_tif) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dem_uri = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2678
 * 
 *     dem_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 *     flow_direction_uri = pygeoprocessing.temporary_filename(suffix='.tif')             # <<<<<<<<<<<<<<
 *     source_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 *     absorption_rate_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_temporary_filename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_suffix, __pyx_kp_s_tif) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_direction_uri = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2679
 *     dem_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 *     flow_direction_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 *     source_uri = pygeoprocessing.temporary_filename(suffix='.tif')             # <<<<<<<<<<<<<<
 *     absorption_rate_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 *     out_pixel_size = pygeoprocessing.get_cell_size_from_uri(in_flow_direction)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_temporary_filename); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_suffix, __pyx_kp_s_tif) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_source_uri = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2680
 *     flow_direction_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 *     source_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 *     absorption_rate_uri = pygeoprocessing.temporary_filename(suffix='.tif')             # <<<<<<<<<<<<<<
 *     out_pixel_size = pygeoprocessing.get_cell_size_from_uri(in_flow_direction)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_temporary_filename); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_suffix, __pyx_kp_s_tif) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_absorption_rate_uri = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2681
 *     source_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 *     absorption_rate_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 *     out_pixel_size = pygeoprocessing.get_cell_size_from_uri(in_flow_direction)             # <<<<<<<<<<<<<<
 * 
 *     pygeoprocessing.align_dataset_list(
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_cell_size_from_uri); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_in_flow_direction); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_in_flow_direction);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_in_flow_direction);
    __Pyx_GIVEREF(__pyx_v_in_flow_direction);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out_pixel_size = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2683
 *     out_pixel_size = pygeoprocessing.get_cell_size_from_uri(in_flow_direction)
 * 
 *     pygeoprocessing.align_dataset_list(             # <<<<<<<<<<<<<<
 *         [in_flow_direction, in_dem, in_source_uri, in_absorption_rate_uri],
 *         [flow_direction_uri, dem_uri, source_uri, absorption_rate_uri],
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_align_dataset_list); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2684
 * 
 *     pygeoprocessing.align_dataset_list(
 *         [in_flow_direction, in_dem, in_source_uri, in_absorption_rate_uri],             # <<<<<<<<<<<<<<
 *         [flow_direction_uri, dem_uri, source_uri, absorption_rate_uri],
 *         ["nearest", "nearest", "nearest", "nearest"], out_pixel_size,
 */
  __pyx_t_3 = PyList_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_in_flow_direction);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_in_flow_direction);
  __Pyx_GIVEREF(__pyx_v_in_flow_direction);
  __Pyx_INCREF(__pyx_v_in_dem);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_v_in_dem);
  __Pyx_GIVEREF(__pyx_v_in_dem);
  __Pyx_INCREF(__pyx_v_in_source_uri);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_v_in_source_uri);
  __Pyx_GIVEREF(__pyx_v_in_source_uri);
  __Pyx_INCREF(__pyx_v_in_absorption_rate_uri);
  PyList_SET_ITEM(__pyx_t_3, 3, __pyx_v_in_absorption_rate_uri);
  __Pyx_GIVEREF(__pyx_v_in_absorption_rate_uri);

  /* "pygeoprocessing\routing\routing_core.pyx":2685
 *     pygeoprocessing.align_dataset_list(
 *         [in_flow_direction, in_dem, in_source_uri, in_absorption_rate_uri],
 *         [flow_direction_uri, dem_uri, source_uri, absorption_rate_uri],             # <<<<<<<<<<<<<<
 *         ["nearest", "nearest", "nearest", "nearest"], out_pixel_size,
 *         "intersection", 0, aoi_uri=aoi_uri, assert_datasets_projected=False)
 */
  __pyx_t_4 = PyList_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_flow_direction_uri);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_flow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
  __Pyx_INCREF(__pyx_v_dem_uri);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_v_dem_uri);
  __Pyx_GIVEREF(__pyx_v_dem_uri);
  __Pyx_INCREF(__pyx_v_source_uri);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_v_source_uri);
  __Pyx_GIVEREF(__pyx_v_source_uri);
  __Pyx_INCREF(__pyx_v_absorption_rate_uri);
  PyList_SET_ITEM(__pyx_t_4, 3, __pyx_v_absorption_rate_uri);
  __Pyx_GIVEREF(__pyx_v_absorption_rate_uri);

  /* "pygeoprocessing\routing\routing_core.pyx":2686
 *         [in_flow_direction, in_dem, in_source_uri, in_absorption_rate_uri],
 *         [flow_direction_uri, dem_uri, source_uri, absorption_rate_uri],
 *         ["nearest", "nearest", "nearest", "nearest"], out_pixel_size,             # <<<<<<<<<<<<<<
 *         "intersection", 0, aoi_uri=aoi_uri, assert_datasets_projected=False)
 * 
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_nearest);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_nearest);
  __Pyx_GIVEREF(__pyx_n_s_nearest);
  __Pyx_INCREF(__pyx_n_s_nearest);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_nearest);
  __Pyx_GIVEREF(__pyx_n_s_nearest);
  __Pyx_INCREF(__pyx_n_s_nearest);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_nearest);
  __Pyx_GIVEREF(__pyx_n_s_nearest);
  __Pyx_INCREF(__pyx_n_s_nearest);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_nearest);
  __Pyx_GIVEREF(__pyx_n_s_nearest);

  /* "pygeoprocessing\routing\routing_core.pyx":2683
 *     out_pixel_size = pygeoprocessing.get_cell_size_from_uri(in_flow_direction)
 * 
 *     pygeoprocessing.align_dataset_list(             # <<<<<<<<<<<<<<
 *         [in_flow_direction, in_dem, in_source_uri, in_absorption_rate_uri],
 *         [flow_direction_uri, dem_uri, source_uri, absorption_rate_uri],
 */
  __pyx_t_5 = PyTuple_New(6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_out_pixel_size);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_v_out_pixel_size);
  __Pyx_GIVEREF(__pyx_v_out_pixel_size);
  __Pyx_INCREF(__pyx_n_s_intersection);
  PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_n_s_intersection);
  __Pyx_GIVEREF(__pyx_n_s_intersection);
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygeoprocessing\routing\routing_core.pyx":2687
 *         [flow_direction_uri, dem_uri, source_uri, absorption_rate_uri],
 *         ["nearest", "nearest", "nearest", "nearest"], out_pixel_size,
 *         "intersection", 0, aoi_uri=aoi_uri, assert_datasets_projected=False)             # <<<<<<<<<<<<<<
 * 
 *     outflow_weights_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_aoi_uri, __pyx_v_aoi_uri) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_assert_datasets_projected, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pygeoprocessing\routing\routing_core.pyx":2683
 *     out_pixel_size = pygeoprocessing.get_cell_size_from_uri(in_flow_direction)
 * 
 *     pygeoprocessing.align_dataset_list(             # <<<<<<<<<<<<<<
 *         [in_flow_direction, in_dem, in_source_uri, in_absorption_rate_uri],
 *         [flow_direction_uri, dem_uri, source_uri, absorption_rate_uri],
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2689
 *         "intersection", 0, aoi_uri=aoi_uri, assert_datasets_projected=False)
 * 
 *     outflow_weights_uri = pygeoprocessing.temporary_filename(suffix='.tif')             # <<<<<<<<<<<<<<
 *     outflow_direction_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_temporary_filename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_suffix, __pyx_kp_s_tif) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_outflow_weights_uri = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2690
 * 
 *     outflow_weights_uri = pygeoprocessing.temporary_filename(suffix='.tif')
 *     outflow_direction_uri = pygeoprocessing.temporary_filename(suffix='.tif')             # <<<<<<<<<<<<<<
 * 
 *     cdef deque[int] outlet_cell_deque
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_temporary_filename); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_suffix, __pyx_kp_s_tif) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_outflow_direction_uri = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2694
 *     cdef deque[int] outlet_cell_deque
 * 
 *     find_outlets(dem_uri, flow_direction_uri, outlet_cell_deque)             # <<<<<<<<<<<<<<
 *     calculate_flow_weights(
 *         flow_direction_uri, outflow_weights_uri, outflow_direction_uri)
 */
  __pyx_t_1 = __pyx_f_15pygeoprocessing_7routing_12routing_core_find_outlets(__pyx_v_dem_uri, __pyx_v_flow_direction_uri, __pyx_v_outlet_cell_deque); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2695
 * 
 *     find_outlets(dem_uri, flow_direction_uri, outlet_cell_deque)
 *     calculate_flow_weights(             # <<<<<<<<<<<<<<
 *         flow_direction_uri, outflow_weights_uri, outflow_direction_uri)
 * 
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_calculate_flow_weights); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "pygeoprocessing\routing\routing_core.pyx":2696
 *     find_outlets(dem_uri, flow_direction_uri, outlet_cell_deque)
 *     calculate_flow_weights(
 *         flow_direction_uri, outflow_weights_uri, outflow_direction_uri)             # <<<<<<<<<<<<<<
 * 
 *     calculate_transport(
 */
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_INCREF(__pyx_v_flow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_flow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
  __Pyx_INCREF(__pyx_v_outflow_weights_uri);
  PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_v_outflow_weights_uri);
  __Pyx_GIVEREF(__pyx_v_outflow_weights_uri);
  __Pyx_INCREF(__pyx_v_outflow_direction_uri);
  PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_v_outflow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_outflow_direction_uri);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2698
 *         flow_direction_uri, outflow_weights_uri, outflow_direction_uri)
 * 
 *     calculate_transport(             # <<<<<<<<<<<<<<
 *         outflow_direction_uri, outflow_weights_uri, outlet_cell_deque,
 *         source_uri, absorption_rate_uri, loss_uri, flux_uri, absorption_mode,
 */
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.stream_uri = __pyx_v_stream_uri;
  __pyx_t_1 = __pyx_f_15pygeoprocessing_7routing_12routing_core_calculate_transport(__pyx_v_outflow_direction_uri, __pyx_v_outflow_weights_uri, __pyx_v_outlet_cell_deque, __pyx_v_source_uri, __pyx_v_absorption_rate_uri, __pyx_v_loss_uri, __pyx_v_flux_uri, __pyx_v_absorption_mode, &__pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2703
 *         stream_uri)
 * 
 *     cleanup_uri_list = [             # <<<<<<<<<<<<<<
 *         dem_uri, flow_direction_uri, source_uri, absorption_rate_uri,
 *         outflow_weights_uri, outflow_direction_uri]
 */
  __pyx_t_1 = PyList_New(6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_dem_uri);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_dem_uri);
  __Pyx_GIVEREF(__pyx_v_dem_uri);
  __Pyx_INCREF(__pyx_v_flow_direction_uri);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_flow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_flow_direction_uri);
  __Pyx_INCREF(__pyx_v_source_uri);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_v_source_uri);
  __Pyx_GIVEREF(__pyx_v_source_uri);
  __Pyx_INCREF(__pyx_v_absorption_rate_uri);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_v_absorption_rate_uri);
  __Pyx_GIVEREF(__pyx_v_absorption_rate_uri);
  __Pyx_INCREF(__pyx_v_outflow_weights_uri);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_v_outflow_weights_uri);
  __Pyx_GIVEREF(__pyx_v_outflow_weights_uri);
  __Pyx_INCREF(__pyx_v_outflow_direction_uri);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_v_outflow_direction_uri);
  __Pyx_GIVEREF(__pyx_v_outflow_direction_uri);
  __pyx_v_cleanup_uri_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2707
 *         outflow_weights_uri, outflow_direction_uri]
 * 
 *     for ds_uri in cleanup_uri_list:             # <<<<<<<<<<<<<<
 *         try:
 *             os.remove(ds_uri)
 */
  __pyx_t_1 = __pyx_v_cleanup_uri_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
  for (;;) {
    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_ds_uri, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pygeoprocessing\routing\routing_core.pyx":2708
 * 
 *     for ds_uri in cleanup_uri_list:
 *         try:             # <<<<<<<<<<<<<<
 *             os.remove(ds_uri)
 *         except OSError as exception:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      /*try:*/ {

        /* "pygeoprocessing\routing\routing_core.pyx":2709
 *     for ds_uri in cleanup_uri_list:
 *         try:
 *             os.remove(ds_uri)             # <<<<<<<<<<<<<<
 *         except OSError as exception:
 *             LOGGER.warn("couldn't remove %s because it's still open", ds_uri)
 */
        __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2709; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_remove); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2709; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        if (!__pyx_t_2) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_ds_uri); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2709; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2709; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
          __Pyx_GOTREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
          __Pyx_INCREF(__pyx_v_ds_uri);
          PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_ds_uri);
          __Pyx_GIVEREF(__pyx_v_ds_uri);
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2709; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pygeoprocessing\routing\routing_core.pyx":2710
 *         try:
 *             os.remove(ds_uri)
 *         except OSError as exception:             # <<<<<<<<<<<<<<
 *             LOGGER.warn("couldn't remove %s because it's still open", ds_uri)
 *             LOGGER.warn(exception)
 */
      __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_OSError);
      if (__pyx_t_11) {
        __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.route_flux", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_exception, __pyx_t_4);

        /* "pygeoprocessing\routing\routing_core.pyx":2711
 *             os.remove(ds_uri)
 *         except OSError as exception:
 *             LOGGER.warn("couldn't remove %s because it's still open", ds_uri)             # <<<<<<<<<<<<<<
 *             LOGGER.warn(exception)
 */
        __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2711; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_warn); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2711; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_14 = 0;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
            __pyx_t_14 = 1;
          }
        }
        __pyx_t_15 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2711; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
        __Pyx_GOTREF(__pyx_t_15);
        if (__pyx_t_12) {
          PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_12); __Pyx_GIVEREF(__pyx_t_12); __pyx_t_12 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_s_couldn_t_remove_s_because_it_s_s);
        PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_14, __pyx_kp_s_couldn_t_remove_s_because_it_s_s);
        __Pyx_GIVEREF(__pyx_kp_s_couldn_t_remove_s_because_it_s_s);
        __Pyx_INCREF(__pyx_v_ds_uri);
        PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_14, __pyx_v_ds_uri);
        __Pyx_GIVEREF(__pyx_v_ds_uri);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_15, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2711; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "pygeoprocessing\routing\routing_core.pyx":2712
 *         except OSError as exception:
 *             LOGGER.warn("couldn't remove %s because it's still open", ds_uri)
 *             LOGGER.warn(exception)             # <<<<<<<<<<<<<<
 */
        __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2712; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_warn); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2712; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
          }
        }
        if (!__pyx_t_13) {
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_exception); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2712; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
          __Pyx_GOTREF(__pyx_t_2);
        } else {
          __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2712; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
          __Pyx_GOTREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_13); __Pyx_GIVEREF(__pyx_t_13); __pyx_t_13 = NULL;
          __Pyx_INCREF(__pyx_v_exception);
          PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_v_exception);
          __Pyx_GIVEREF(__pyx_v_exception);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_12, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2712; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L6_exception_handled;
      }
      goto __pyx_L7_except_error;
      __pyx_L7_except_error:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      goto __pyx_L1_error;
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_L12_try_end:;
    }

    /* "pygeoprocessing\routing\routing_core.pyx":2707
 *         outflow_weights_uri, outflow_direction_uri]
 * 
 *     for ds_uri in cleanup_uri_list:             # <<<<<<<<<<<<<<
 *         try:
 *             os.remove(ds_uri)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2642
 * 
 * 
 * def route_flux(             # <<<<<<<<<<<<<<
 *         in_flow_direction, in_dem, in_source_uri, in_absorption_rate_uri,
 *         loss_uri, flux_uri, absorption_mode, aoi_uri=None, stream_uri=None):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("pygeoprocessing.routing.routing_core.route_flux", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dem_uri);
  __Pyx_XDECREF(__pyx_v_flow_direction_uri);
  __Pyx_XDECREF(__pyx_v_source_uri);
  __Pyx_XDECREF(__pyx_v_absorption_rate_uri);
  __Pyx_XDECREF(__pyx_v_out_pixel_size);
  __Pyx_XDECREF(__pyx_v_outflow_weights_uri);
  __Pyx_XDECREF(__pyx_v_outflow_direction_uri);
  __Pyx_XDECREF(__pyx_v_cleanup_uri_list);
  __Pyx_XDECREF(__pyx_v_ds_uri);
  __Pyx_XDECREF(__pyx_v_exception);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L11;
  }
  /*else*/ {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":247
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":249
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":251
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L14;
  }
  /*else*/ {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":254
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":256
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":257
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":258
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":259
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;
    if (__pyx_t_1) {

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":260
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":277
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    switch (__pyx_v_t) {

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":261
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":262
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":263
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":264
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":265
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":266
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":267
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":268
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":269
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":270
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":271
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":272
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":273
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":274
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":275
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":276
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":277
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":279
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":280
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":281
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":283
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":284
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":285
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":286
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_7;

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":289
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":291
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":292
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":293
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":294
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":295
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":291
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":771
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":771
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":774
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":774
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":777
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":777
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":780
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":780
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":783
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":784
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":783
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":786
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":793
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":794
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":797
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":798
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":799
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":801
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":802
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":804
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":805
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_6) {

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":806
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":816
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":817
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":818
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":819
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":821
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":823
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":824
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":825
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":826
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":829
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":830
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":831
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":832
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":833
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":834
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":835
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":836
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":837
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":838
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":839
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":840
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":841
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":842
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":843
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":844
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":845
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }
      /*else*/ {

        /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":847
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L15:;

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":848
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L13;
    }
    /*else*/ {

      /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":852
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":797
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":853
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":786
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":969
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":971
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":972
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":974
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":975
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":976
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":977
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":969
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":979
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":980
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":981
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":983
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":979
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":116
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "View.MemoryView":117
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":116
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":123
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":124
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":126
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":127
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":129
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":130
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(format, unicode):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":132
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if isinstance(format, unicode):             # <<<<<<<<<<<<<<
 *             format = (<unicode>format).encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_format); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":133
 * 
 *         if isinstance(format, unicode):
 *             format = (<unicode>format).encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    if (unlikely(__pyx_v_format == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = PyUnicode_AsASCIIString(((PyObject*)__pyx_v_format)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "View.MemoryView":134
 *         if isinstance(format, unicode):
 *             format = (<unicode>format).encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":135
 *             format = (<unicode>format).encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_self->_format); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->format = __pyx_t_5;

  /* "View.MemoryView":138
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyMem_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyMem_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":139
 * 
 *         self._shape = <Py_ssize_t *> PyMem_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":141
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":142
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":145
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_6 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_7); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_dim = __pyx_t_8;
    __pyx_v_idx = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":146
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":147
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_7 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "View.MemoryView":148
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":145
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":151
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "View.MemoryView":152
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":153
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;
    goto __pyx_L10;
  }

  /* "View.MemoryView":154
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "View.MemoryView":155
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":156
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;
    goto __pyx_L10;
  }
  /*else*/ {

    /* "View.MemoryView":158
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L10:;

  /* "View.MemoryView":160
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":163
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":164
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":165
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":168
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":169
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":170
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "View.MemoryView":172
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":173
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":174
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && unlikely(__pyx_v_itemsize == -1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_1; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "View.MemoryView":175
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":176
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }
      goto __pyx_L13;
    }
    __pyx_L13:;
    goto __pyx_L11;
  }
  __pyx_L11:;

  /* "View.MemoryView":116
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":179
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "View.MemoryView":180
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":181
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":182
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);
    goto __pyx_L3;
  }

  /* "View.MemoryView":183
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":184
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":185
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":186
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":187
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":188
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":189
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":190
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":191
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":192
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":193
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":194
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":196
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":197
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "View.MemoryView":199
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":201
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":179
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":205
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":206
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":207
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);
    goto __pyx_L3;
  }

  /* "View.MemoryView":208
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":209
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":210
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "View.MemoryView":212
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyMem_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":213
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyMem_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     property memview:
 */
  PyMem_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":205
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":217
 *     property memview:
 *         @cname('get_memview')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 * 
 *             flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 */

/* Python wrapper */
static PyObject *get_memview(PyObject *__pyx_v_self); /*proto*/
static PyObject *get_memview(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":219
 *         def __get__(self):
 * 
 *             flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *             return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":220
 * 
 *             flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *             return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_memoryview_type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":217
 *     property memview:
 *         @cname('get_memview')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 * 
 *             flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":223
 * 
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":224
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":223
 * 
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":226
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":227
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":226
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":229
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":230
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":229
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":234
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":238
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":239
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_array_type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":241
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":242
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":241
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_array_type)), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":243
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":245
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":234
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":271
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":272
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":271
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":273
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":274
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":273
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":288
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":290
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":294
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":296
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":297
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":299
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview')
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":288
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":317
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":318
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":319
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":320
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)((PyObject *)__pyx_memoryview_type)));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":321
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":322
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":323
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":324
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         self.lock = PyThread_allocate_lock()
 */
      Py_INCREF(Py_None);
      goto __pyx_L6;
    }
    __pyx_L6:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":326
 *                 Py_INCREF(Py_None)
 * 
 *         self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *         if self.lock == NULL:
 *             raise MemoryError
 */
  __pyx_v_self->lock = PyThread_allocate_lock();

  /* "View.MemoryView":327
 * 
 *         self.lock = PyThread_allocate_lock()
 *         if self.lock == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":328
 *         self.lock = PyThread_allocate_lock()
 *         if self.lock == NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":330
 *             raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = self.view.format == b'O'
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":331
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = self.view.format == b'O'             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_self->dtype_is_object = __pyx_t_1;
    goto __pyx_L8;
  }
  /*else*/ {

    /* "View.MemoryView":333
 *             self.dtype_is_object = self.view.format == b'O'
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L8:;

  /* "View.MemoryView":335
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":337
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":317
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":339
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":340
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":341
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 * 
 *         if self.lock != NULL:
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":343
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             PyThread_free_lock(self.lock)
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":344
 * 
 *         if self.lock != NULL:
 *             PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
    PyThread_free_lock(__pyx_v_self->lock);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "View.MemoryView":339
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":346
 *             PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":348
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":350
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":351
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":350
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":353
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":346
 *             PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":356
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":357
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":358
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;
  }

  /* "View.MemoryView":360
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":363
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "View.MemoryView":364
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "View.MemoryView":366
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":367
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":356
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":369
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":370
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_1 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_have_slices = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":372
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "View.MemoryView":373
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_obj = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "View.MemoryView":374
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_4) {

      /* "View.MemoryView":375
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_1, __pyx_v_obj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "View.MemoryView":377
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
      __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_3), __pyx_v_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":379
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":369
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":381
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":382
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject *)__pyx_memoryview_type)); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":383
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":384
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->flags | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":385
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":384
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_memoryview_type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "View.MemoryView":386
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":387
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_None);
        __pyx_r = Py_None;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L11_try_end:;
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":389
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":381
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":391
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":395
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":396
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":397
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":395
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_4 = __pyx_memoryview_copy_contents((__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice))[0]), (__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice))[0]), __pyx_t_2, __pyx_t_3, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":391
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":399
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[128];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":401
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":406
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_v_dst_slice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice));

  /* "View.MemoryView":408
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_1 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":409
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":410
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":411
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "View.MemoryView":412
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":414
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":416
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":417
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":418
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);
      goto __pyx_L8;
    }
    /*else*/ {

      /* "View.MemoryView":420
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":424
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_1 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":425
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_2 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "View.MemoryView":426
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":429
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    /*exception exit:*/{
      __pyx_L6_error:;
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_5 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_5;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":399
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":431
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":432
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":433
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":431
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":435
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":438
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":441
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":442
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":443
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;
      }
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_bytesitem);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
      __Pyx_GIVEREF(__pyx_v_bytesitem);
      __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;
    }
    /*else:*/ {

      /* "View.MemoryView":447
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":448
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;
      }

      /* "View.MemoryView":449
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "View.MemoryView":444
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = PyErr_ExceptionMatches(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_12) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_9);

      /* "View.MemoryView":445
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":435
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":451
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  char *__pyx_t_10;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":454
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":459
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":460
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":462
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_5) {
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    }
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":464
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_7 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_9 = __pyx_v_bytesvalue;
  __pyx_t_11 = PyBytes_AS_STRING(__pyx_t_9);
  __pyx_t_12 = (__pyx_t_11 + PyBytes_GET_SIZE(__pyx_t_9));
  for (__pyx_t_13 = __pyx_t_11; __pyx_t_13 < __pyx_t_12; __pyx_t_13++) {
    __pyx_t_10 = __pyx_t_13;
    __pyx_v_c = (__pyx_t_10[0]);

    /* "View.MemoryView":465
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_7;

    /* "View.MemoryView":464
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":465
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "View.MemoryView":451
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":468
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  char *__pyx_t_3;
  void *__pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "View.MemoryView":469
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":470
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_2;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":472
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
    __pyx_v_info->shape = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":474
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":475
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_2;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "View.MemoryView":477
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
    __pyx_v_info->strides = NULL;
  }
  __pyx_L4:;

  /* "View.MemoryView":479
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":480
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_2;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "View.MemoryView":482
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":484
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":485
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_3 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_3;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "View.MemoryView":487
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
    __pyx_v_info->format = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":489
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_4 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":490
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_5 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_5;

  /* "View.MemoryView":491
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = 0
 */
  __pyx_t_6 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_6;

  /* "View.MemoryView":492
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 *         info.obj = self
 */
  __pyx_t_6 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_6;

  /* "View.MemoryView":493
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":494
 *         info.len = self.view.len
 *         info.readonly = 0
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":468
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape
 */

  /* function exit code */
  __pyx_r = 0;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":501
 *     property T:
 *         @cname('__pyx_memoryview_transpose')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef _memoryviewslice result = memoryview_copy(self)
 *             transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_transpose(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_transpose(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":502
 *         @cname('__pyx_memoryview_transpose')
 *         def __get__(self):
 *             cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *             transpose_memslice(&result.from_slice)
 *             return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":503
 *         def __get__(self):
 *             cdef _memoryviewslice result = memoryview_copy(self)
 *             transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":504
 *             cdef _memoryviewslice result = memoryview_copy(self)
 *             transpose_memslice(&result.from_slice)
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     property base:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":501
 *     property T:
 *         @cname('__pyx_memoryview_transpose')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef _memoryviewslice result = memoryview_copy(self)
 *             transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":508
 *     property base:
 *         @cname('__pyx_memoryview__get__base')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview__get__base(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview__get__base(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":509
 *         @cname('__pyx_memoryview__get__base')
 *         def __get__(self):
 *             return self.obj             # <<<<<<<<<<<<<<
 * 
 *     property shape:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":508
 *     property base:
 *         @cname('__pyx_memoryview__get__base')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":513
 *     property shape:
 *         @cname('__pyx_memoryview_get_shape')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_shape(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_shape(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":514
 *         @cname('__pyx_memoryview_get_shape')
 *         def __get__(self):
 *             return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     property strides:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":513
 *     property shape:
 *         @cname('__pyx_memoryview_get_shape')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":518
 *     property strides:
 *         @cname('__pyx_memoryview_get_strides')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_strides(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_strides(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":519
 *         @cname('__pyx_memoryview_get_strides')
 *         def __get__(self):
 *             if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *                 raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":521
 *             if self.view.strides == NULL:
 * 
 *                 raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *             return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":523
 *                 raise ValueError("Buffer view does not expose strides")
 * 
 *             return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     property suboffsets:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":518
 *     property strides:
 *         @cname('__pyx_memoryview_get_strides')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":527
 *     property suboffsets:
 *         @cname('__pyx_memoryview_get_suboffsets')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.view.suboffsets == NULL:
 *                 return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_suboffsets(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_suboffsets(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":528
 *         @cname('__pyx_memoryview_get_suboffsets')
 *         def __get__(self):
 *             if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *                 return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":529
 *         def __get__(self):
 *             if self.view.suboffsets == NULL:
 *                 return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *             return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__73, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":531
 *                 return (-1,) * self.view.ndim
 * 
 *             return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     property ndim:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":527
 *     property suboffsets:
 *         @cname('__pyx_memoryview_get_suboffsets')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.view.suboffsets == NULL:
 *                 return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":535
 *     property ndim:
 *         @cname('__pyx_memoryview_get_ndim')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_ndim(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_ndim(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":536
 *         @cname('__pyx_memoryview_get_ndim')
 *         def __get__(self):
 *             return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     property itemsize:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":535
 *     property ndim:
 *         @cname('__pyx_memoryview_get_ndim')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":540
 *     property itemsize:
 *         @cname('__pyx_memoryview_get_itemsize')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_itemsize(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_itemsize(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":541
 *         @cname('__pyx_memoryview_get_itemsize')
 *         def __get__(self):
 *             return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     property nbytes:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":540
 *     property itemsize:
 *         @cname('__pyx_memoryview_get_itemsize')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":545
 *     property nbytes:
 *         @cname('__pyx_memoryview_get_nbytes')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_nbytes(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_nbytes(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":546
 *         @cname('__pyx_memoryview_get_nbytes')
 *         def __get__(self):
 *             return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     property size:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":545
 *     property nbytes:
 *         @cname('__pyx_memoryview_get_nbytes')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":550
 *     property size:
 *         @cname('__pyx_memoryview_get_size')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._size is None:
 *                 result = 1
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_size(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_size(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":551
 *         @cname('__pyx_memoryview_get_size')
 *         def __get__(self):
 *             if self._size is None:             # <<<<<<<<<<<<<<
 *                 result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":552
 *         def __get__(self):
 *             if self._size is None:
 *                 result = 1             # <<<<<<<<<<<<<<
 * 
 *                 for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":554
 *                 result = 1
 * 
 *                 for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                     result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":555
 * 
 *                 for length in self.view.shape[:self.view.ndim]:
 *                     result *= length             # <<<<<<<<<<<<<<
 * 
 *                 self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":557
 *                     result *= length
 * 
 *                 self._size = result             # <<<<<<<<<<<<<<
 * 
 *             return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":559
 *                 self._size = result
 * 
 *             return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":550
 *     property size:
 *         @cname('__pyx_memoryview_get_size')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._size is None:
 *                 result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":561
 *             return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":562
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":563
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;
  }

  /* "View.MemoryView":565
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":561
 *             return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":567
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":568
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":569
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":568
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":567
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":571
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":572
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":571
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":575
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":578
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice, 'C', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":579
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice, 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig(__pyx_v_mslice, 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":575
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":581
 *         return slice_is_contig(mslice, 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":584
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice, 'F', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":585
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice, 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig(__pyx_v_mslice, 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":581
 *         return slice_is_contig(mslice, 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":587
 *         return slice_is_contig(mslice, 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":589
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":591
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":592
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), __pyx_k_c, __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":597
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":587
 *         return slice_is_contig(mslice, 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":599
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":601
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":603
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":604
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), __pyx_k_fortran, __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":609
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":599
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":613
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":614
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_memoryview_type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":615
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":616
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":613
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":619
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":620
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, ((PyObject *)__pyx_memoryview_type)); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":619
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":622
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":627
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":628
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":630
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":632
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":633
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":634
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":635
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":636
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":637
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":638
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__74);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__74);
            __Pyx_GIVEREF(__pyx_slice__74);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":639
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;
        goto __pyx_L7;
      }
      /*else*/ {

        /* "View.MemoryView":641
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__75); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L7:;

      /* "View.MemoryView":642
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "View.MemoryView":644
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_1) {

        /* "View.MemoryView":645
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_11, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "View.MemoryView":647
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":648
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L6:;

    /* "View.MemoryView":635
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":650
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":651
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":652
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__76);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__76);
        __Pyx_GIVEREF(__pyx_slice__76);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L13;
  }
  __pyx_L13:;

  /* "View.MemoryView":654
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":622
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":656
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":657
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":658
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":659
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "View.MemoryView":656
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":666
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":667
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":674
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst)));

  /* "View.MemoryView":678
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "View.MemoryView":680
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), ((PyObject *)__pyx_memoryviewslice_type)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":681
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":682
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":684
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":685
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":691
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":692
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":697
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":698
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":702
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":703
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":707
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":704
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }

    /* "View.MemoryView":710
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":711
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":712
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":713
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1;

      /* "View.MemoryView":714
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
      goto __pyx_L6;
    }
    /*else*/ {

      /* "View.MemoryView":716
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":717
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":718
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":720
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":721
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":722
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":724
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":730
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":702
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":732
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), ((PyObject *)__pyx_memoryviewslice_type)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":733
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":734
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }

    /* "View.MemoryView":735
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }

    /* "View.MemoryView":733
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "View.MemoryView":738
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":739
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":738
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":666
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":763
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":783
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":785
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":786
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "View.MemoryView":787
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":788
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, __pyx_k_Index_out_of_bounds_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":791
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":793
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":794
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, __pyx_k_Step_may_not_be_zero_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "View.MemoryView":797
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":798
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":799
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":800
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":801
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;
          goto __pyx_L13;
        }
        __pyx_L13:;
        goto __pyx_L12;
      }

      /* "View.MemoryView":802
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":803
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":804
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);
          goto __pyx_L14;
        }
        /*else*/ {

          /* "View.MemoryView":806
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;
        goto __pyx_L12;
      }
      __pyx_L12:;
      goto __pyx_L11;
    }
    /*else*/ {

      /* "View.MemoryView":808
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":809
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);
        goto __pyx_L15;
      }
      /*else*/ {

        /* "View.MemoryView":811
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":813
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":814
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":815
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":816
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":817
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;
          goto __pyx_L18;
        }
        __pyx_L18:;
        goto __pyx_L17;
      }

      /* "View.MemoryView":818
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":819
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;
        goto __pyx_L17;
      }
      __pyx_L17:;
      goto __pyx_L16;
    }
    /*else*/ {

      /* "View.MemoryView":821
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":822
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1;
        goto __pyx_L19;
      }
      /*else*/ {

        /* "View.MemoryView":824
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":826
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":827
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;
      goto __pyx_L20;
    }
    __pyx_L20:;

    /* "View.MemoryView":831
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":833
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":834
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);
      goto __pyx_L21;
    }
    __pyx_L21:;

    /* "View.MemoryView":836
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":837
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;
      goto __pyx_L22;
    }
    __pyx_L22:;

    /* "View.MemoryView":840
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":841
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":842
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":845
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":846
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));
    goto __pyx_L23;
  }
  /*else*/ {

    /* "View.MemoryView":848
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":850
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":851
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":852
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":853
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);
        goto __pyx_L26;
      }
      /*else*/ {

        /* "View.MemoryView":855
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, __pyx_k_All_dimensions_preceding_dimensi, __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L26:;
      goto __pyx_L25;
    }
    /*else*/ {

      /* "View.MemoryView":858
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;
    goto __pyx_L24;
  }
  __pyx_L24:;

  /* "View.MemoryView":860
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":763
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":866
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":868
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1;

  /* "View.MemoryView":869
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":872
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":873
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && unlikely(__pyx_v_itemsize == -1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":874
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":876
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":877
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":878
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":879
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);
      goto __pyx_L4;
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "View.MemoryView":881
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":882
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":883
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":884
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "View.MemoryView":886
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":887
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":889
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":890
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":891
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "View.MemoryView":893
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":866
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":899
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":900
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":902
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":903
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":907
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":908
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":909
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_4 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_4;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":910
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_4 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_4;

    /* "View.MemoryView":912
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_7 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "View.MemoryView":913
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_8 = __pyx_memoryview_err(__pyx_builtin_ValueError, __pyx_k_Cannot_transpose_memoryview_with); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;
  }

  /* "View.MemoryView":915
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":899
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":932
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":933
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":932
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":935
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":936
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":937
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "View.MemoryView":939
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":935
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":941
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":942
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":943
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":945
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     property base:
 */
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":941
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":949
 *     property base:
 *         @cname('__pyx_memoryviewslice__get__base')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryviewslice__get__base(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryviewslice__get__base(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":950
 *         @cname('__pyx_memoryviewslice__get__base')
 *         def __get__(self):
 *             return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":949
 *     property base:
 *         @cname('__pyx_memoryviewslice__get__base')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":956
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":964
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":965
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "View.MemoryView":970
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_memoryviewslice_type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":972
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":973
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":975
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":976
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":978
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":979
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":980
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":981
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":982
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     result.flags = PyBUF_RECORDS
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":984
 *     Py_INCREF(Py_None)
 * 
 *     result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

  /* "View.MemoryView":986
 *     result.flags = PyBUF_RECORDS
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":987
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":990
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":991
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":992
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":993
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":994
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L5_break;
    }
  }
  __pyx_L5_break:;

  /* "View.MemoryView":996
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":997
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":998
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1000
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1001
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1003
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":956
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1006
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1009
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), ((PyObject *)__pyx_memoryviewslice_type)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1010
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1011
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;
  }
  /*else*/ {

    /* "View.MemoryView":1013
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1014
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1006
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1017
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1021
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1022
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1023
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1025
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1026
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1028
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_dim = __pyx_t_3;

    /* "View.MemoryView":1029
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1030
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1031
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_4 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_4 = -1;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_4;
  }

  /* "View.MemoryView":1017
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1034
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1037
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1038
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1034
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1041
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1048
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), ((PyObject *)__pyx_memoryviewslice_type)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1049
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1050
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":1052
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1053
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1055
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1057
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1041
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1063
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1064
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1065
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;
  }
  /*else*/ {

    /* "View.MemoryView":1067
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1063
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1070
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1075
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1076
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1078
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1079
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1080
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1081
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1083
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1084
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1085
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1086
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1088
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1089
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;
  }
  /*else*/ {

    /* "View.MemoryView":1091
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1070
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1094
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;

  /* "View.MemoryView":1101
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1102
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1103
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1104
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1106
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1107
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1108
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_1) {

      /* "View.MemoryView":1109
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent));
      goto __pyx_L4;
    }
    /*else*/ {

      /* "View.MemoryView":1111
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
      __pyx_t_4 = __pyx_v_dst_extent;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "View.MemoryView":1112
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize);

        /* "View.MemoryView":1113
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1114
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":1116
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
    __pyx_t_4 = __pyx_v_dst_extent;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":1117
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1121
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1122
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1094
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1124
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1127
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1124
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1131
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1134
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 *     cdef Py_ssize_t size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1136
 *     cdef Py_ssize_t size = src.memview.view.itemsize
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         size *= src.shape[i]
 * 
 */
  __pyx_t_2 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1137
 * 
 *     for i in range(ndim):
 *         size *= src.shape[i]             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * (__pyx_v_src->shape[__pyx_v_i]));
  }

  /* "View.MemoryView":1139
 *         size *= src.shape[i]
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1131
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1142
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1151
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1152
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_idx = __pyx_t_3;

      /* "View.MemoryView":1153
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1154
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":1156
 *             stride = stride * shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1157
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1158
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1160
 *             stride = stride * shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1142
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1163
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1174
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1175
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1177
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1178
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1179
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":1182
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1183
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1184
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "View.MemoryView":1185
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1186
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1;
  }

  /* "View.MemoryView":1188
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  __pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order);

  /* "View.MemoryView":1192
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "View.MemoryView":1193
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1194
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src, order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;
      goto __pyx_L8;
    }
    __pyx_L8:;
  }

  /* "View.MemoryView":1196
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1197
 * 
 *     if slice_is_contig(src, order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size);
    goto __pyx_L9;
  }
  /*else*/ {

    /* "View.MemoryView":1199
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1201
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1163
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1206
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1209
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1208
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":1206
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1212
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1213
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":1212
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1216
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1217
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1218
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  /*else*/ {

    /* "View.MemoryView":1220
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":1216
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1223
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1231
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1232
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1234
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1235
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1236
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1239
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1240
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);
    goto __pyx_L3;
  }

  /* "View.MemoryView":1241
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1242
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":1244
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1246
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_5; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1247
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1248
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1249
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1250
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;
        goto __pyx_L7;
      }
      /*else*/ {

        /* "View.MemoryView":1252
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
        __pyx_t_4 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L7:;
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "View.MemoryView":1254
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1255
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_4 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, __pyx_k_Dimension_d_is_not_direct, __pyx_v_i); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }
    __pyx_L8:;
  }

  /* "View.MemoryView":1257
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(&src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1259
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(&src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig((&__pyx_v_src), __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1260
 * 
 *         if not slice_is_contig(&src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "View.MemoryView":1262
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_6 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_tmpdata = __pyx_t_6;

    /* "View.MemoryView":1263
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "View.MemoryView":1265
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1268
 * 
 * 
 *         if slice_is_contig(&src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)
 *         elif slice_is_contig(&src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig((&__pyx_v_src), 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1269
 * 
 *         if slice_is_contig(&src, 'C', ndim):
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(&src, 'F', ndim):
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig((&__pyx_v_dst), 'C', __pyx_v_ndim);
      goto __pyx_L12;
    }

    /* "View.MemoryView":1270
 *         if slice_is_contig(&src, 'C', ndim):
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)
 *         elif slice_is_contig(&src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig((&__pyx_v_src), 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1271
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)
 *         elif slice_is_contig(&src, 'F', ndim):
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig((&__pyx_v_dst), 'F', __pyx_v_ndim);
      goto __pyx_L12;
    }
    __pyx_L12:;

    /* "View.MemoryView":1273
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1275
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1276
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim));

      /* "View.MemoryView":1277
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1278
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1279
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;
    }
    goto __pyx_L11;
  }
  __pyx_L11:;

  /* "View.MemoryView":1281
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {

    /* "View.MemoryView":1284
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":1285
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L14;
  }
  __pyx_L14:;

  /* "View.MemoryView":1287
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1288
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1289
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1291
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1292
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1223
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1295
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "View.MemoryView":1299
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1301
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1302
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1303
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1304
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1306
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "View.MemoryView":1307
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1308
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1309
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1;
  }

  /* "View.MemoryView":1295
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1317
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1321
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1322
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":1317
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1326
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1329
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1326
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1332
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1336
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "View.MemoryView":1337
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_3 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_3) {

      /* "View.MemoryView":1338
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_3 = (__pyx_v_inc != 0);
      if (__pyx_t_3) {

        /* "View.MemoryView":1339
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));
        goto __pyx_L6;
      }
      /*else*/ {

        /* "View.MemoryView":1341
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;
      goto __pyx_L5;
    }
    /*else*/ {

      /* "View.MemoryView":1343
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1346
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1332
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1352
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1355
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1356
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1358
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1352
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;

  /* "View.MemoryView":1366
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1367
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1369
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1370
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "View.MemoryView":1371
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize);

      /* "View.MemoryView":1372
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":1374
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
    __pyx_t_2 = __pyx_v_extent;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "View.MemoryView":1375
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1377
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}
static struct __pyx_vtabstruct_15pygeoprocessing_7routing_12routing_core_BlockCache __pyx_vtable_15pygeoprocessing_7routing_12routing_core_BlockCache;

static PyObject *__pyx_tp_new_15pygeoprocessing_7routing_12routing_core_BlockCache(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)o);
  p->__pyx_vtab = __pyx_vtabptr_15pygeoprocessing_7routing_12routing_core_BlockCache;
  p->row_tag_cache.data = NULL;
  p->row_tag_cache.memview = NULL;
  p->col_tag_cache.data = NULL;
  p->col_tag_cache.memview = NULL;
  p->cache_dirty.data = NULL;
  p->cache_dirty.memview = NULL;
  if (unlikely(__pyx_pw_15pygeoprocessing_7routing_12routing_core_10BlockCache_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15pygeoprocessing_7routing_12routing_core_BlockCache(PyObject *o) {
  struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *p = (struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __PYX_XDEC_MEMVIEW(&p->row_tag_cache, 1);
  __PYX_XDEC_MEMVIEW(&p->col_tag_cache, 1);
  __PYX_XDEC_MEMVIEW(&p->cache_dirty, 1);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_15pygeoprocessing_7routing_12routing_core_BlockCache[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_15pygeoprocessing_7routing_12routing_core_BlockCache = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygeoprocessing.routing.routing_core.BlockCache", /*tp_name*/
  sizeof(struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15pygeoprocessing_7routing_12routing_core_BlockCache, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15pygeoprocessing_7routing_12routing_core_BlockCache, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15pygeoprocessing_7routing_12routing_core_BlockCache, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_array___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return get_memview(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  0, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygeoprocessing.routing.routing_core.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygeoprocessing.routing.routing_core.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryview___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_transpose(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview__get__base(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_shape(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_strides(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_suboffsets(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_ndim(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_itemsize(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_nbytes(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_size(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, 0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, 0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, 0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, 0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, 0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, 0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, 0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, 0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygeoprocessing.routing.routing_core.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryviewslice___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryviewslice__get__base(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygeoprocessing.routing.routing_core._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "routing_core",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_C_Users_rich_Documents_pygeoproc, __pyx_k_C_Users_rich_Documents_pygeoproc, sizeof(__pyx_k_C_Users_rich_Documents_pygeoproc), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_DEBUG, __pyx_k_DEBUG, sizeof(__pyx_k_DEBUG), 0, 0, 1, 1},
  {&__pyx_n_s_Dataset, __pyx_k_Dataset, sizeof(__pyx_k_Dataset), 0, 0, 1, 1},
  {&__pyx_kp_s_Done_calculating_percent_to_sink, __pyx_k_Done_calculating_percent_to_sink, sizeof(__pyx_k_Done_calculating_percent_to_sink), 0, 0, 1, 0},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_FlushCache, __pyx_k_FlushCache, sizeof(__pyx_k_FlushCache), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_GA_ReadOnly, __pyx_k_GA_ReadOnly, sizeof(__pyx_k_GA_ReadOnly), 0, 0, 1, 1},
  {&__pyx_n_s_GA_Update, __pyx_k_GA_Update, sizeof(__pyx_k_GA_Update), 0, 0, 1, 1},
  {&__pyx_n_s_GDT_Byte, __pyx_k_GDT_Byte, sizeof(__pyx_k_GDT_Byte), 0, 0, 1, 1},
  {&__pyx_n_s_GDT_Float32, __pyx_k_GDT_Float32, sizeof(__pyx_k_GDT_Float32), 0, 0, 1, 1},
  {&__pyx_n_s_GDT_Int32, __pyx_k_GDT_Int32, sizeof(__pyx_k_GDT_Int32), 0, 0, 1, 1},
  {&__pyx_n_s_GTiff, __pyx_k_GTiff, sizeof(__pyx_k_GTiff), 0, 0, 1, 1},
  {&__pyx_n_s_GetBlockSize, __pyx_k_GetBlockSize, sizeof(__pyx_k_GetBlockSize), 0, 0, 1, 1},
  {&__pyx_n_s_GetDescription, __pyx_k_GetDescription, sizeof(__pyx_k_GetDescription), 0, 0, 1, 1},
  {&__pyx_n_s_GetNoDataValue, __pyx_k_GetNoDataValue, sizeof(__pyx_k_GetNoDataValue), 0, 0, 1, 1},
  {&__pyx_n_s_GetRasterBand, __pyx_k_GetRasterBand, sizeof(__pyx_k_GetRasterBand), 0, 0, 1, 1},
  {&__pyx_n_s_INF, __pyx_k_INF, sizeof(__pyx_k_INF), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_LOGGER, __pyx_k_LOGGER, sizeof(__pyx_k_LOGGER), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_kp_s_Nodata_value_not_set_defaulting, __pyx_k_Nodata_value_not_set_defaulting, sizeof(__pyx_k_Nodata_value_not_set_defaulting), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_kp_s_Not_all_flats_have_outlets, __pyx_k_Not_all_flats_have_outlets, sizeof(__pyx_k_Not_all_flats_have_outlets), 0, 0, 1, 0},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_n_s_OSError, __pyx_k_OSError, sizeof(__pyx_k_OSError), 0, 0, 1, 1},
  {&__pyx_n_s_Open, __pyx_k_Open, sizeof(__pyx_k_Open), 0, 0, 1, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_RasterXSize, __pyx_k_RasterXSize, sizeof(__pyx_k_RasterXSize), 0, 0, 1, 1},
  {&__pyx_n_s_RasterYSize, __pyx_k_RasterYSize, sizeof(__pyx_k_RasterYSize), 0, 0, 1, 1},
  {&__pyx_n_s_ReadAsArray, __pyx_k_ReadAsArray, sizeof(__pyx_k_ReadAsArray), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_There_were_no_flats, __pyx_k_There_were_no_flats, sizeof(__pyx_k_There_were_no_flats), 0, 0, 1, 0},
  {&__pyx_kp_s_There_were_undrainable_flats, __pyx_k_There_were_undrainable_flats, sizeof(__pyx_k_There_were_undrainable_flats), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_WriteArray, __pyx_k_WriteArray, sizeof(__pyx_k_WriteArray), 0, 0, 1, 1},
  {&__pyx_n_s_XSize, __pyx_k_XSize, sizeof(__pyx_k_XSize), 0, 0, 1, 1},
  {&__pyx_n_s_YSize, __pyx_k_YSize, sizeof(__pyx_k_YSize), 0, 0, 1, 1},
  {&__pyx_kp_s_a_band_in_BlockCache_is_not_memo, __pyx_k_a_band_in_BlockCache_is_not_memo, sizeof(__pyx_k_a_band_in_BlockCache_is_not_memo), 0, 0, 1, 0},
  {&__pyx_kp_s_a_band_was_passed_in_that_has_a, __pyx_k_a_band_was_passed_in_that_has_a, sizeof(__pyx_k_a_band_was_passed_in_that_has_a), 0, 0, 1, 0},
  {&__pyx_n_s_a_c, __pyx_k_a_c, sizeof(__pyx_k_a_c), 0, 0, 1, 1},
  {&__pyx_n_s_a_f, __pyx_k_a_f, sizeof(__pyx_k_a_f), 0, 0, 1, 1},
  {&__pyx_n_s_absorption_mode, __pyx_k_absorption_mode, sizeof(__pyx_k_absorption_mode), 0, 0, 1, 1},
  {&__pyx_n_s_absorption_rate_uri, __pyx_k_absorption_rate_uri, sizeof(__pyx_k_absorption_rate_uri), 0, 0, 1, 1},
  {&__pyx_n_s_align_dataset_list, __pyx_k_align_dataset_list, sizeof(__pyx_k_align_dataset_list), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_angle_to_neighbor, __pyx_k_angle_to_neighbor, sizeof(__pyx_k_angle_to_neighbor), 0, 0, 1, 1},
  {&__pyx_n_s_aoi_uri, __pyx_k_aoi_uri, sizeof(__pyx_k_aoi_uri), 0, 0, 1, 1},
  {&__pyx_kp_s_asctime_s_name_18s_levelname_8s, __pyx_k_asctime_s_name_18s_levelname_8s, sizeof(__pyx_k_asctime_s_name_18s_levelname_8s), 0, 0, 1, 0},
  {&__pyx_n_s_assert_datasets_projected, __pyx_k_assert_datasets_projected, sizeof(__pyx_k_assert_datasets_projected), 0, 0, 1, 1},
  {&__pyx_kp_s_away_from_higher_work_queue_size, __pyx_k_away_from_higher_work_queue_size, sizeof(__pyx_k_away_from_higher_work_queue_size), 0, 0, 1, 0},
  {&__pyx_n_s_band_list, __pyx_k_band_list, sizeof(__pyx_k_band_list), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_basicConfig, __pyx_k_basicConfig, sizeof(__pyx_k_basicConfig), 0, 0, 1, 1},
  {&__pyx_n_s_block_cache, __pyx_k_block_cache, sizeof(__pyx_k_block_cache), 0, 0, 1, 1},
  {&__pyx_n_s_block_col_size, __pyx_k_block_col_size, sizeof(__pyx_k_block_col_size), 0, 0, 1, 1},
  {&__pyx_n_s_block_list, __pyx_k_block_list, sizeof(__pyx_k_block_list), 0, 0, 1, 1},
  {&__pyx_n_s_block_row_size, __pyx_k_block_row_size, sizeof(__pyx_k_block_row_size), 0, 0, 1, 1},
  {&__pyx_n_s_buf_obj, __pyx_k_buf_obj, sizeof(__pyx_k_buf_obj), 0, 0, 1, 1},
  {&__pyx_n_s_byte, __pyx_k_byte, sizeof(__pyx_k_byte), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_cache_dirty, __pyx_k_cache_dirty, sizeof(__pyx_k_cache_dirty), 0, 0, 1, 1},
  {&__pyx_n_s_calculate_flow_weights, __pyx_k_calculate_flow_weights, sizeof(__pyx_k_calculate_flow_weights), 0, 0, 1, 1},
  {&__pyx_kp_s_calculate_flow_weights_1f_comple, __pyx_k_calculate_flow_weights_1f_comple, sizeof(__pyx_k_calculate_flow_weights_1f_comple), 0, 0, 1, 0},
  {&__pyx_n_s_calculate_raster_stats_uri, __pyx_k_calculate_raster_stats_uri, sizeof(__pyx_k_calculate_raster_stats_uri), 0, 0, 1, 1},
  {&__pyx_kp_s_calculate_transport_cells_to_pro, __pyx_k_calculate_transport_cells_to_pro, sizeof(__pyx_k_calculate_transport_cells_to_pro), 0, 0, 1, 0},
  {&__pyx_kp_s_calculating_percent_to_sink, __pyx_k_calculating_percent_to_sink, sizeof(__pyx_k_calculating_percent_to_sink), 0, 0, 1, 0},
  {&__pyx_n_s_ceil, __pyx_k_ceil, sizeof(__pyx_k_ceil), 0, 0, 1, 1},
  {&__pyx_n_s_cell_size, __pyx_k_cell_size, sizeof(__pyx_k_cell_size), 0, 0, 1, 1},
  {&__pyx_n_s_cell_travel_distance, __pyx_k_cell_travel_distance, sizeof(__pyx_k_cell_travel_distance), 0, 0, 1, 1},
  {&__pyx_n_s_cells_in_queue, __pyx_k_cells_in_queue, sizeof(__pyx_k_cells_in_queue), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cleanup_uri_list, __pyx_k_cleanup_uri_list, sizeof(__pyx_k_cleanup_uri_list), 0, 0, 1, 1},
  {&__pyx_n_s_col_block_offset, __pyx_k_col_block_offset, sizeof(__pyx_k_col_block_offset), 0, 0, 1, 1},
  {&__pyx_n_s_col_index, __pyx_k_col_index, sizeof(__pyx_k_col_index), 0, 0, 1, 1},
  {&__pyx_n_s_col_offset, __pyx_k_col_offset, sizeof(__pyx_k_col_offset), 0, 0, 1, 1},
  {&__pyx_n_s_col_offsets, __pyx_k_col_offsets, sizeof(__pyx_k_col_offsets), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_couldn_t_remove_s_because_it_s_s, __pyx_k_couldn_t_remove_s_because_it_s_s, sizeof(__pyx_k_couldn_t_remove_s_because_it_s_s), 0, 0, 1, 0},
  {&__pyx_n_s_cur_dem_value, __pyx_k_cur_dem_value, sizeof(__pyx_k_cur_dem_value), 0, 0, 1, 1},
  {&__pyx_n_s_current_distance, __pyx_k_current_distance, sizeof(__pyx_k_current_distance), 0, 0, 1, 1},
  {&__pyx_n_s_current_flow, __pyx_k_current_flow, sizeof(__pyx_k_current_flow), 0, 0, 1, 1},
  {&__pyx_n_s_current_index, __pyx_k_current_index, sizeof(__pyx_k_current_index), 0, 0, 1, 1},
  {&__pyx_n_s_current_label, __pyx_k_current_label, sizeof(__pyx_k_current_label), 0, 0, 1, 1},
  {&__pyx_n_s_current_stream, __pyx_k_current_stream, sizeof(__pyx_k_current_stream), 0, 0, 1, 1},
  {&__pyx_n_s_current_time, __pyx_k_current_time, sizeof(__pyx_k_current_time), 0, 0, 1, 1},
  {&__pyx_n_s_d_1, __pyx_k_d_1, sizeof(__pyx_k_d_1), 0, 0, 1, 1},
  {&__pyx_n_s_d_2, __pyx_k_d_2, sizeof(__pyx_k_d_2), 0, 0, 1, 1},
  {&__pyx_n_s_dataset, __pyx_k_dataset, sizeof(__pyx_k_dataset), 0, 0, 1, 1},
  {&__pyx_n_s_dataset_uri, __pyx_k_dataset_uri, sizeof(__pyx_k_dataset_uri), 0, 0, 1, 1},
  {&__pyx_n_s_datefmt, __pyx_k_datefmt, sizeof(__pyx_k_datefmt), 0, 0, 1, 1},
  {&__pyx_n_s_dem_array, __pyx_k_dem_array, sizeof(__pyx_k_dem_array), 0, 0, 1, 1},
  {&__pyx_n_s_dem_band, __pyx_k_dem_band, sizeof(__pyx_k_dem_band), 0, 0, 1, 1},
  {&__pyx_n_s_dem_block, __pyx_k_dem_block, sizeof(__pyx_k_dem_block), 0, 0, 1, 1},
  {&__pyx_n_s_dem_ds, __pyx_k_dem_ds, sizeof(__pyx_k_dem_ds), 0, 0, 1, 1},
  {&__pyx_n_s_dem_nodata, __pyx_k_dem_nodata, sizeof(__pyx_k_dem_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_dem_out_array, __pyx_k_dem_out_array, sizeof(__pyx_k_dem_out_array), 0, 0, 1, 1},
  {&__pyx_n_s_dem_out_band, __pyx_k_dem_out_band, sizeof(__pyx_k_dem_out_band), 0, 0, 1, 1},
  {&__pyx_n_s_dem_out_ds, __pyx_k_dem_out_ds, sizeof(__pyx_k_dem_out_ds), 0, 0, 1, 1},
  {&__pyx_n_s_dem_out_uri, __pyx_k_dem_out_uri, sizeof(__pyx_k_dem_out_uri), 0, 0, 1, 1},
  {&__pyx_n_s_dem_uri, __pyx_k_dem_uri, sizeof(__pyx_k_dem_uri), 0, 0, 1, 1},
  {&__pyx_n_s_diagonal_offsets, __pyx_k_diagonal_offsets, sizeof(__pyx_k_diagonal_offsets), 0, 0, 1, 1},
  {&__pyx_n_s_dirname, __pyx_k_dirname, sizeof(__pyx_k_dirname), 0, 0, 1, 1},
  {&__pyx_n_s_distance_band, __pyx_k_distance_band, sizeof(__pyx_k_distance_band), 0, 0, 1, 1},
  {&__pyx_n_s_distance_block, __pyx_k_distance_block, sizeof(__pyx_k_distance_block), 0, 0, 1, 1},
  {&__pyx_n_s_distance_ds, __pyx_k_distance_ds, sizeof(__pyx_k_distance_ds), 0, 0, 1, 1},
  {&__pyx_n_s_distance_nodata, __pyx_k_distance_nodata, sizeof(__pyx_k_distance_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_distance_to_stream, __pyx_k_distance_to_stream, sizeof(__pyx_k_distance_to_stream), 0, 0, 1, 1},
  {&__pyx_n_s_distance_uri, __pyx_k_distance_uri, sizeof(__pyx_k_distance_uri), 0, 0, 1, 1},
  {&__pyx_n_s_downstream_calculated, __pyx_k_downstream_calculated, sizeof(__pyx_k_downstream_calculated), 0, 0, 1, 1},
  {&__pyx_n_s_downstream_distance, __pyx_k_downstream_distance, sizeof(__pyx_k_downstream_distance), 0, 0, 1, 1},
  {&__pyx_n_s_downstream_index, __pyx_k_downstream_index, sizeof(__pyx_k_downstream_index), 0, 0, 1, 1},
  {&__pyx_n_s_drain_off_edge, __pyx_k_drain_off_edge, sizeof(__pyx_k_drain_off_edge), 0, 0, 1, 1},
  {&__pyx_kp_s_draining_away_from_higher, __pyx_k_draining_away_from_higher, sizeof(__pyx_k_draining_away_from_higher), 0, 0, 1, 0},
  {&__pyx_kp_s_draining_towards_lower, __pyx_k_draining_towards_lower, sizeof(__pyx_k_draining_towards_lower), 0, 0, 1, 0},
  {&__pyx_n_s_ds_uri, __pyx_k_ds_uri, sizeof(__pyx_k_ds_uri), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_e_0, __pyx_k_e_0, sizeof(__pyx_k_e_0), 0, 0, 1, 1},
  {&__pyx_n_s_e_0_col, __pyx_k_e_0_col, sizeof(__pyx_k_e_0_col), 0, 0, 1, 1},
  {&__pyx_n_s_e_0_col_block_offset, __pyx_k_e_0_col_block_offset, sizeof(__pyx_k_e_0_col_block_offset), 0, 0, 1, 1},
  {&__pyx_n_s_e_0_col_index, __pyx_k_e_0_col_index, sizeof(__pyx_k_e_0_col_index), 0, 0, 1, 1},
  {&__pyx_n_s_e_0_offsets, __pyx_k_e_0_offsets, sizeof(__pyx_k_e_0_offsets), 0, 0, 1, 1},
  {&__pyx_n_s_e_0_row, __pyx_k_e_0_row, sizeof(__pyx_k_e_0_row), 0, 0, 1, 1},
  {&__pyx_n_s_e_0_row_block_offset, __pyx_k_e_0_row_block_offset, sizeof(__pyx_k_e_0_row_block_offset), 0, 0, 1, 1},
  {&__pyx_n_s_e_0_row_index, __pyx_k_e_0_row_index, sizeof(__pyx_k_e_0_row_index), 0, 0, 1, 1},
  {&__pyx_n_s_e_1, __pyx_k_e_1, sizeof(__pyx_k_e_1), 0, 0, 1, 1},
  {&__pyx_n_s_e_1_col, __pyx_k_e_1_col, sizeof(__pyx_k_e_1_col), 0, 0, 1, 1},
  {&__pyx_n_s_e_1_col_block_offset, __pyx_k_e_1_col_block_offset, sizeof(__pyx_k_e_1_col_block_offset), 0, 0, 1, 1},
  {&__pyx_n_s_e_1_col_index, __pyx_k_e_1_col_index, sizeof(__pyx_k_e_1_col_index), 0, 0, 1, 1},
  {&__pyx_n_s_e_1_label, __pyx_k_e_1_label, sizeof(__pyx_k_e_1_label), 0, 0, 1, 1},
  {&__pyx_n_s_e_1_offsets, __pyx_k_e_1_offsets, sizeof(__pyx_k_e_1_offsets), 0, 0, 1, 1},
  {&__pyx_n_s_e_1_row, __pyx_k_e_1_row, sizeof(__pyx_k_e_1_row), 0, 0, 1, 1},
  {&__pyx_n_s_e_1_row_block_offset, __pyx_k_e_1_row_block_offset, sizeof(__pyx_k_e_1_row_block_offset), 0, 0, 1, 1},
  {&__pyx_n_s_e_1_row_index, __pyx_k_e_1_row_index, sizeof(__pyx_k_e_1_row_index), 0, 0, 1, 1},
  {&__pyx_n_s_e_2, __pyx_k_e_2, sizeof(__pyx_k_e_2), 0, 0, 1, 1},
  {&__pyx_n_s_e_2_col, __pyx_k_e_2_col, sizeof(__pyx_k_e_2_col), 0, 0, 1, 1},
  {&__pyx_n_s_e_2_col_block_offset, __pyx_k_e_2_col_block_offset, sizeof(__pyx_k_e_2_col_block_offset), 0, 0, 1, 1},
  {&__pyx_n_s_e_2_col_index, __pyx_k_e_2_col_index, sizeof(__pyx_k_e_2_col_index), 0, 0, 1, 1},
  {&__pyx_n_s_e_2_label, __pyx_k_e_2_label, sizeof(__pyx_k_e_2_label), 0, 0, 1, 1},
  {&__pyx_n_s_e_2_offsets, __pyx_k_e_2_offsets, sizeof(__pyx_k_e_2_offsets), 0, 0, 1, 1},
  {&__pyx_n_s_e_2_row, __pyx_k_e_2_row, sizeof(__pyx_k_e_2_row), 0, 0, 1, 1},
  {&__pyx_n_s_e_2_row_block_offset, __pyx_k_e_2_row_block_offset, sizeof(__pyx_k_e_2_row_block_offset), 0, 0, 1, 1},
  {&__pyx_n_s_e_2_row_index, __pyx_k_e_2_row_index, sizeof(__pyx_k_e_2_row_index), 0, 0, 1, 1},
  {&__pyx_n_s_effect_band, __pyx_k_effect_band, sizeof(__pyx_k_effect_band), 0, 0, 1, 1},
  {&__pyx_n_s_effect_block, __pyx_k_effect_block, sizeof(__pyx_k_effect_block), 0, 0, 1, 1},
  {&__pyx_n_s_effect_dataset, __pyx_k_effect_dataset, sizeof(__pyx_k_effect_dataset), 0, 0, 1, 1},
  {&__pyx_n_s_effect_nodata, __pyx_k_effect_nodata, sizeof(__pyx_k_effect_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_effect_uri, __pyx_k_effect_uri, sizeof(__pyx_k_effect_uri), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_end_time, __pyx_k_end_time, sizeof(__pyx_k_end_time), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_exception, __pyx_k_exception, sizeof(__pyx_k_exception), 0, 0, 1, 1},
  {&__pyx_n_s_export_rate_band, __pyx_k_export_rate_band, sizeof(__pyx_k_export_rate_band), 0, 0, 1, 1},
  {&__pyx_n_s_export_rate_block, __pyx_k_export_rate_block, sizeof(__pyx_k_export_rate_block), 0, 0, 1, 1},
  {&__pyx_n_s_export_rate_dataset, __pyx_k_export_rate_dataset, sizeof(__pyx_k_export_rate_dataset), 0, 0, 1, 1},
  {&__pyx_n_s_export_rate_nodata, __pyx_k_export_rate_nodata, sizeof(__pyx_k_export_rate_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_export_rate_uri, __pyx_k_export_rate_uri, sizeof(__pyx_k_export_rate_uri), 0, 0, 1, 1},
  {&__pyx_n_s_facet_index, __pyx_k_facet_index, sizeof(__pyx_k_facet_index), 0, 0, 1, 1},
  {&__pyx_n_s_factor, __pyx_k_factor, sizeof(__pyx_k_factor), 0, 0, 1, 1},
  {&__pyx_n_s_factor_band, __pyx_k_factor_band, sizeof(__pyx_k_factor_band), 0, 0, 1, 1},
  {&__pyx_n_s_factor_block, __pyx_k_factor_block, sizeof(__pyx_k_factor_block), 0, 0, 1, 1},
  {&__pyx_n_s_factor_ds, __pyx_k_factor_ds, sizeof(__pyx_k_factor_ds), 0, 0, 1, 1},
  {&__pyx_n_s_factor_exists, __pyx_k_factor_exists, sizeof(__pyx_k_factor_exists), 0, 0, 1, 1},
  {&__pyx_n_s_factor_uri, __pyx_k_factor_uri, sizeof(__pyx_k_factor_uri), 0, 0, 1, 1},
  {&__pyx_n_s_fill_pits, __pyx_k_fill_pits, sizeof(__pyx_k_fill_pits), 0, 0, 1, 1},
  {&__pyx_n_s_fill_value, __pyx_k_fill_value, sizeof(__pyx_k_fill_value), 0, 0, 1, 1},
  {&__pyx_kp_s_find_outlet_percent_complete_2f, __pyx_k_find_outlet_percent_complete_2f, sizeof(__pyx_k_find_outlet_percent_complete_2f), 0, 0, 1, 0},
  {&__pyx_kp_s_find_sinks_1f_complete, __pyx_k_find_sinks_1f_complete, sizeof(__pyx_k_find_sinks_1f_complete), 0, 0, 1, 0},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_kp_s_flat_edges_1f_complete, __pyx_k_flat_edges_1f_complete, sizeof(__pyx_k_flat_edges_1f_complete), 0, 0, 1, 0},
  {&__pyx_n_s_flat_index, __pyx_k_flat_index, sizeof(__pyx_k_flat_index), 0, 0, 1, 1},
  {&__pyx_n_s_flat_mask_band, __pyx_k_flat_mask_band, sizeof(__pyx_k_flat_mask_band), 0, 0, 1, 1},
  {&__pyx_n_s_flat_mask_block, __pyx_k_flat_mask_block, sizeof(__pyx_k_flat_mask_block), 0, 0, 1, 1},
  {&__pyx_n_s_flat_mask_ds, __pyx_k_flat_mask_ds, sizeof(__pyx_k_flat_mask_ds), 0, 0, 1, 1},
  {&__pyx_n_s_flat_mask_uri, __pyx_k_flat_mask_uri, sizeof(__pyx_k_flat_mask_uri), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_flow_angle_to_neighbor, __pyx_k_flow_angle_to_neighbor, sizeof(__pyx_k_flow_angle_to_neighbor), 0, 0, 1, 1},
  {&__pyx_n_s_flow_band, __pyx_k_flow_band, sizeof(__pyx_k_flow_band), 0, 0, 1, 1},
  {&__pyx_n_s_flow_block, __pyx_k_flow_block, sizeof(__pyx_k_flow_block), 0, 0, 1, 1},
  {&__pyx_n_s_flow_direction, __pyx_k_flow_direction, sizeof(__pyx_k_flow_direction), 0, 0, 1, 1},
  {&__pyx_n_s_flow_direction_band, __pyx_k_flow_direction_band, sizeof(__pyx_k_flow_direction_band), 0, 0, 1, 1},
  {&__pyx_n_s_flow_direction_block, __pyx_k_flow_direction_block, sizeof(__pyx_k_flow_direction_block), 0, 0, 1, 1},
  {&__pyx_n_s_flow_direction_dataset, __pyx_k_flow_direction_dataset, sizeof(__pyx_k_flow_direction_dataset), 0, 0, 1, 1},
  {&__pyx_n_s_flow_direction_inf, __pyx_k_flow_direction_inf, sizeof(__pyx_k_flow_direction_inf), 0, 0, 1, 1},
  {&__pyx_kp_s_flow_direction_inf_1f_complete, __pyx_k_flow_direction_inf_1f_complete, sizeof(__pyx_k_flow_direction_inf_1f_complete), 0, 0, 1, 0},
  {&__pyx_n_s_flow_direction_inf_masked_flow_d, __pyx_k_flow_direction_inf_masked_flow_d, sizeof(__pyx_k_flow_direction_inf_masked_flow_d), 0, 0, 1, 1},
  {&__pyx_n_s_flow_direction_max_slope, __pyx_k_flow_direction_max_slope, sizeof(__pyx_k_flow_direction_max_slope), 0, 0, 1, 1},
  {&__pyx_n_s_flow_direction_nodata, __pyx_k_flow_direction_nodata, sizeof(__pyx_k_flow_direction_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_flow_direction_uri, __pyx_k_flow_direction_uri, sizeof(__pyx_k_flow_direction_uri), 0, 0, 1, 1},
  {&__pyx_n_s_flow_nodata, __pyx_k_flow_nodata, sizeof(__pyx_k_flow_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_flux_uri, __pyx_k_flux_uri, sizeof(__pyx_k_flux_uri), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_found, __pyx_k_found, sizeof(__pyx_k_found), 0, 0, 1, 1},
  {&__pyx_n_s_gdal, __pyx_k_gdal, sizeof(__pyx_k_gdal), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_get_cell_size_from_uri, __pyx_k_get_cell_size_from_uri, sizeof(__pyx_k_get_cell_size_from_uri), 0, 0, 1, 1},
  {&__pyx_n_s_get_nodata_from_uri, __pyx_k_get_nodata_from_uri, sizeof(__pyx_k_get_nodata_from_uri), 0, 0, 1, 1},
  {&__pyx_n_s_get_row_col_from_uri, __pyx_k_get_row_col_from_uri, sizeof(__pyx_k_get_row_col_from_uri), 0, 0, 1, 1},
  {&__pyx_n_s_global_block_col, __pyx_k_global_block_col, sizeof(__pyx_k_global_block_col), 0, 0, 1, 1},
  {&__pyx_n_s_global_block_row, __pyx_k_global_block_row, sizeof(__pyx_k_global_block_row), 0, 0, 1, 1},
  {&__pyx_n_s_global_col, __pyx_k_global_col, sizeof(__pyx_k_global_col), 0, 0, 1, 1},
  {&__pyx_n_s_global_row, __pyx_k_global_row, sizeof(__pyx_k_global_row), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_high_edges, __pyx_k_high_edges, sizeof(__pyx_k_high_edges), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_absorption_rate_uri, __pyx_k_in_absorption_rate_uri, sizeof(__pyx_k_in_absorption_rate_uri), 0, 0, 1, 1},
  {&__pyx_n_s_in_dem, __pyx_k_in_dem, sizeof(__pyx_k_in_dem), 0, 0, 1, 1},
  {&__pyx_n_s_in_flow_direction, __pyx_k_in_flow_direction, sizeof(__pyx_k_in_flow_direction), 0, 0, 1, 1},
  {&__pyx_n_s_in_source_uri, __pyx_k_in_source_uri, sizeof(__pyx_k_in_source_uri), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_inf, __pyx_k_inf, sizeof(__pyx_k_inf), 0, 0, 1, 1},
  {&__pyx_n_s_inflow_offsets, __pyx_k_inflow_offsets, sizeof(__pyx_k_inflow_offsets), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_int8, __pyx_k_int8, sizeof(__pyx_k_int8), 0, 0, 1, 1},
  {&__pyx_n_s_intersection, __pyx_k_intersection, sizeof(__pyx_k_intersection), 0, 0, 1, 1},
  {&__pyx_n_s_it_flows_here, __pyx_k_it_flows_here, sizeof(__pyx_k_it_flows_here), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_label_band, __pyx_k_label_band, sizeof(__pyx_k_label_band), 0, 0, 1, 1},
  {&__pyx_n_s_label_block, __pyx_k_label_block, sizeof(__pyx_k_label_block), 0, 0, 1, 1},
  {&__pyx_n_s_label_dataset, __pyx_k_label_dataset, sizeof(__pyx_k_label_dataset), 0, 0, 1, 1},
  {&__pyx_kp_s_label_flats_1f_complete, __pyx_k_label_flats_1f_complete, sizeof(__pyx_k_label_flats_1f_complete), 0, 0, 1, 0},
  {&__pyx_n_s_label_nodata, __pyx_k_label_nodata, sizeof(__pyx_k_label_nodata), 0, 0, 1, 1},
  {&__pyx_kp_s_labeling_flats, __pyx_k_labeling_flats, sizeof(__pyx_k_labeling_flats), 0, 0, 1, 0},
  {&__pyx_n_s_labels_uri, __pyx_k_labels_uri, sizeof(__pyx_k_labels_uri), 0, 0, 1, 1},
  {&__pyx_n_s_last_time, __pyx_k_last_time, sizeof(__pyx_k_last_time), 0, 0, 1, 1},
  {&__pyx_kp_s_lengths_of_band_list_block_list, __pyx_k_lengths_of_band_list_block_list, sizeof(__pyx_k_lengths_of_band_list_block_list), 0, 0, 1, 0},
  {&__pyx_n_s_lnevel, __pyx_k_lnevel, sizeof(__pyx_k_lnevel), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_loss_uri, __pyx_k_loss_uri, sizeof(__pyx_k_loss_uri), 0, 0, 1, 1},
  {&__pyx_n_s_low_edges, __pyx_k_low_edges, sizeof(__pyx_k_low_edges), 0, 0, 1, 1},
  {&__pyx_kp_s_m_d_Y_H_M_S, __pyx_k_m_d_Y_H_M_S, sizeof(__pyx_k_m_d_Y_H_M_S), 0, 0, 1, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_index, __pyx_k_max_index, sizeof(__pyx_k_max_index), 0, 0, 1, 1},
  {&__pyx_n_s_max_r, __pyx_k_max_r, sizeof(__pyx_k_max_r), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_min_dem_value, __pyx_k_min_dem_value, sizeof(__pyx_k_min_dem_value), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_n_block_cols, __pyx_k_n_block_cols, sizeof(__pyx_k_n_block_cols), 0, 0, 1, 1},
  {&__pyx_n_s_n_block_rows, __pyx_k_n_block_rows, sizeof(__pyx_k_n_block_rows), 0, 0, 1, 1},
  {&__pyx_n_s_n_cols, __pyx_k_n_cols, sizeof(__pyx_k_n_cols), 0, 0, 1, 1},
  {&__pyx_n_s_n_global_block_cols, __pyx_k_n_global_block_cols, sizeof(__pyx_k_n_global_block_cols), 0, 0, 1, 1},
  {&__pyx_n_s_n_global_block_rows, __pyx_k_n_global_block_rows, sizeof(__pyx_k_n_global_block_rows), 0, 0, 1, 1},
  {&__pyx_n_s_n_neighbors, __pyx_k_n_neighbors, sizeof(__pyx_k_n_neighbors), 0, 0, 1, 1},
  {&__pyx_n_s_n_rows, __pyx_k_n_rows, sizeof(__pyx_k_n_rows), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_nearest, __pyx_k_nearest, sizeof(__pyx_k_nearest), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_col, __pyx_k_neighbor_col, sizeof(__pyx_k_neighbor_col), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_col_block_offset, __pyx_k_neighbor_col_block_offset, sizeof(__pyx_k_neighbor_col_block_offset), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_col_index, __pyx_k_neighbor_col_index, sizeof(__pyx_k_neighbor_col_index), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_dem_value, __pyx_k_neighbor_dem_value, sizeof(__pyx_k_neighbor_dem_value), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_direction_index, __pyx_k_neighbor_direction_index, sizeof(__pyx_k_neighbor_direction_index), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_distance, __pyx_k_neighbor_distance, sizeof(__pyx_k_neighbor_distance), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_flat_index, __pyx_k_neighbor_flat_index, sizeof(__pyx_k_neighbor_flat_index), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_index, __pyx_k_neighbor_index, sizeof(__pyx_k_neighbor_index), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_outflow_direction, __pyx_k_neighbor_outflow_direction, sizeof(__pyx_k_neighbor_outflow_direction), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_outflow_weight, __pyx_k_neighbor_outflow_weight, sizeof(__pyx_k_neighbor_outflow_weight), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_row, __pyx_k_neighbor_row, sizeof(__pyx_k_neighbor_row), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_row_block_offset, __pyx_k_neighbor_row_block_offset, sizeof(__pyx_k_neighbor_row_block_offset), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_row_index, __pyx_k_neighbor_row_index, sizeof(__pyx_k_neighbor_row_index), 0, 0, 1, 1},
  {&__pyx_n_s_new_raster_from_base, __pyx_k_new_raster_from_base, sizeof(__pyx_k_new_raster_from_base), 0, 0, 1, 1},
  {&__pyx_n_s_new_raster_from_base_uri, __pyx_k_new_raster_from_base_uri, sizeof(__pyx_k_new_raster_from_base_uri), 0, 0, 1, 1},
  {&__pyx_kp_s_no_flow_direction_found_for_s_s, __pyx_k_no_flow_direction_found_for_s_s, sizeof(__pyx_k_no_flow_direction_found_for_s_s), 0, 0, 1, 0},
  {&__pyx_n_s_nodata_flow, __pyx_k_nodata_flow, sizeof(__pyx_k_nodata_flow), 0, 0, 1, 1},
  {&__pyx_n_s_nodata_value, __pyx_k_nodata_value, sizeof(__pyx_k_nodata_value), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_original_distance, __pyx_k_original_distance, sizeof(__pyx_k_original_distance), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_osgeo, __pyx_k_osgeo, sizeof(__pyx_k_osgeo), 0, 0, 1, 1},
  {&__pyx_n_s_out_block, __pyx_k_out_block, sizeof(__pyx_k_out_block), 0, 0, 1, 1},
  {&__pyx_n_s_out_pixel_size, __pyx_k_out_pixel_size, sizeof(__pyx_k_out_pixel_size), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_direction, __pyx_k_outflow_direction, sizeof(__pyx_k_outflow_direction), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_direction_band, __pyx_k_outflow_direction_band, sizeof(__pyx_k_outflow_direction_band), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_direction_block, __pyx_k_outflow_direction_block, sizeof(__pyx_k_outflow_direction_block), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_direction_dataset, __pyx_k_outflow_direction_dataset, sizeof(__pyx_k_outflow_direction_dataset), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_direction_ds, __pyx_k_outflow_direction_ds, sizeof(__pyx_k_outflow_direction_ds), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_direction_nodata, __pyx_k_outflow_direction_nodata, sizeof(__pyx_k_outflow_direction_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_direction_uri, __pyx_k_outflow_direction_uri, sizeof(__pyx_k_outflow_direction_uri), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_weight, __pyx_k_outflow_weight, sizeof(__pyx_k_outflow_weight), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_weights_band, __pyx_k_outflow_weights_band, sizeof(__pyx_k_outflow_weights_band), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_weights_block, __pyx_k_outflow_weights_block, sizeof(__pyx_k_outflow_weights_block), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_weights_dataset, __pyx_k_outflow_weights_dataset, sizeof(__pyx_k_outflow_weights_dataset), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_weights_ds, __pyx_k_outflow_weights_ds, sizeof(__pyx_k_outflow_weights_ds), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_weights_nodata, __pyx_k_outflow_weights_nodata, sizeof(__pyx_k_outflow_weights_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_weights_uri, __pyx_k_outflow_weights_uri, sizeof(__pyx_k_outflow_weights_uri), 0, 0, 1, 1},
  {&__pyx_n_s_outlet_cell_deque, __pyx_k_outlet_cell_deque, sizeof(__pyx_k_outlet_cell_deque), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_percent_to_sink, __pyx_k_percent_to_sink, sizeof(__pyx_k_percent_to_sink), 0, 0, 1, 1},
  {&__pyx_n_s_pi, __pyx_k_pi, sizeof(__pyx_k_pi), 0, 0, 1, 1},
  {&__pyx_n_s_pit_count, __pyx_k_pit_count, sizeof(__pyx_k_pit_count), 0, 0, 1, 1},
  {&__pyx_n_s_process_queue, __pyx_k_process_queue, sizeof(__pyx_k_process_queue), 0, 0, 1, 1},
  {&__pyx_n_s_processed_cell_band, __pyx_k_processed_cell_band, sizeof(__pyx_k_processed_cell_band), 0, 0, 1, 1},
  {&__pyx_n_s_processed_cell_block, __pyx_k_processed_cell_block, sizeof(__pyx_k_processed_cell_block), 0, 0, 1, 1},
  {&__pyx_n_s_processed_cell_ds, __pyx_k_processed_cell_ds, sizeof(__pyx_k_processed_cell_ds), 0, 0, 1, 1},
  {&__pyx_n_s_processed_cell_nodata, __pyx_k_processed_cell_nodata, sizeof(__pyx_k_processed_cell_nodata), 0, 0, 1, 1},
  {&__pyx_kp_s_processed_cell_tif, __pyx_k_processed_cell_tif, sizeof(__pyx_k_processed_cell_tif), 0, 0, 1, 0},
  {&__pyx_n_s_processed_cell_uri, __pyx_k_processed_cell_uri, sizeof(__pyx_k_processed_cell_uri), 0, 0, 1, 1},
  {&__pyx_n_s_pushed_current, __pyx_k_pushed_current, sizeof(__pyx_k_pushed_current), 0, 0, 1, 1},
  {&__pyx_n_s_pygeoprocessing, __pyx_k_pygeoprocessing, sizeof(__pyx_k_pygeoprocessing), 0, 0, 1, 1},
  {&__pyx_kp_s_pygeoprocessing_routing_routing, __pyx_k_pygeoprocessing_routing_routing, sizeof(__pyx_k_pygeoprocessing_routing_routing), 0, 0, 1, 0},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_raw_nodata_value, __pyx_k_raw_nodata_value, sizeof(__pyx_k_raw_nodata_value), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_resolve_flats, __pyx_k_resolve_flats, sizeof(__pyx_k_resolve_flats), 0, 0, 1, 1},
  {&__pyx_n_s_route_flux, __pyx_k_route_flux, sizeof(__pyx_k_route_flux), 0, 0, 1, 1},
  {&__pyx_n_s_row_block_offset, __pyx_k_row_block_offset, sizeof(__pyx_k_row_block_offset), 0, 0, 1, 1},
  {&__pyx_n_s_row_index, __pyx_k_row_index, sizeof(__pyx_k_row_index), 0, 0, 1, 1},
  {&__pyx_n_s_row_offset, __pyx_k_row_offset, sizeof(__pyx_k_row_offset), 0, 0, 1, 1},
  {&__pyx_n_s_row_offsets, __pyx_k_row_offsets, sizeof(__pyx_k_row_offsets), 0, 0, 1, 1},
  {&__pyx_n_s_s_1, __pyx_k_s_1, sizeof(__pyx_k_s_1), 0, 0, 1, 1},
  {&__pyx_n_s_s_2, __pyx_k_s_2, sizeof(__pyx_k_s_2), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_sink_pixels_band, __pyx_k_sink_pixels_band, sizeof(__pyx_k_sink_pixels_band), 0, 0, 1, 1},
  {&__pyx_n_s_sink_pixels_block, __pyx_k_sink_pixels_block, sizeof(__pyx_k_sink_pixels_block), 0, 0, 1, 1},
  {&__pyx_n_s_sink_pixels_dataset, __pyx_k_sink_pixels_dataset, sizeof(__pyx_k_sink_pixels_dataset), 0, 0, 1, 1},
  {&__pyx_n_s_sink_pixels_nodata, __pyx_k_sink_pixels_nodata, sizeof(__pyx_k_sink_pixels_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_sink_pixels_uri, __pyx_k_sink_pixels_uri, sizeof(__pyx_k_sink_pixels_uri), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_slope, __pyx_k_slope, sizeof(__pyx_k_slope), 0, 0, 1, 1},
  {&__pyx_n_s_slope_max, __pyx_k_slope_max, sizeof(__pyx_k_slope_max), 0, 0, 1, 1},
  {&__pyx_n_s_source_and_flux, __pyx_k_source_and_flux, sizeof(__pyx_k_source_and_flux), 0, 0, 1, 1},
  {&__pyx_n_s_source_uri, __pyx_k_source_uri, sizeof(__pyx_k_source_uri), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_start_time, __pyx_k_start_time, sizeof(__pyx_k_start_time), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_step_size, __pyx_k_step_size, sizeof(__pyx_k_step_size), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_stream_band, __pyx_k_stream_band, sizeof(__pyx_k_stream_band), 0, 0, 1, 1},
  {&__pyx_n_s_stream_block, __pyx_k_stream_block, sizeof(__pyx_k_stream_block), 0, 0, 1, 1},
  {&__pyx_n_s_stream_ds, __pyx_k_stream_ds, sizeof(__pyx_k_stream_ds), 0, 0, 1, 1},
  {&__pyx_n_s_stream_nodata, __pyx_k_stream_nodata, sizeof(__pyx_k_stream_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_stream_uri, __pyx_k_stream_uri, sizeof(__pyx_k_stream_uri), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_suffix, __pyx_k_suffix, sizeof(__pyx_k_suffix), 0, 0, 1, 1},
  {&__pyx_n_s_swig_destroy, __pyx_k_swig_destroy, sizeof(__pyx_k_swig_destroy), 0, 0, 1, 1},
  {&__pyx_n_s_temporary_filename, __pyx_k_temporary_filename, sizeof(__pyx_k_temporary_filename), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_tif, __pyx_k_tif, sizeof(__pyx_k_tif), 0, 0, 1, 0},
  {&__pyx_kp_s_toward_lower_work_queue_size_d, __pyx_k_toward_lower_work_queue_size_d, sizeof(__pyx_k_toward_lower_work_queue_size_d), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update_downstream, __pyx_k_update_downstream, sizeof(__pyx_k_update_downstream), 0, 0, 1, 1},
  {&__pyx_n_s_update_list, __pyx_k_update_list, sizeof(__pyx_k_update_list), 0, 0, 1, 1},
  {&__pyx_n_s_visit_stack, __pyx_k_visit_stack, sizeof(__pyx_k_visit_stack), 0, 0, 1, 1},
  {&__pyx_kp_s_visit_stack_on_stream_distance_s, __pyx_k_visit_stack_on_stream_distance_s, sizeof(__pyx_k_visit_stack_on_stream_distance_s), 0, 0, 1, 0},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_win_xsize, __pyx_k_win_xsize, sizeof(__pyx_k_win_xsize), 0, 0, 1, 1},
  {&__pyx_n_s_win_ysize, __pyx_k_win_ysize, sizeof(__pyx_k_win_ysize), 0, 0, 1, 1},
  {&__pyx_n_s_xoff, __pyx_k_xoff, sizeof(__pyx_k_xoff), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_yoff, __pyx_k_yoff, sizeof(__pyx_k_yoff), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_OSError = __Pyx_GetBuiltinName(__pyx_n_s_OSError); if (!__pyx_builtin_OSError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pygeoprocessing\routing\routing_core.pyx":68
 *         self.row_tag_cache[:] = -1
 *         self.col_tag_cache[:] = -1
 *         self.band_list[:] = band_list             # <<<<<<<<<<<<<<
 *         self.block_list[:] = block_list
 *         self.update_list[:] = update_list
 */
  __pyx_slice_ = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice_);
  __Pyx_GIVEREF(__pyx_slice_);

  /* "pygeoprocessing\routing\routing_core.pyx":69
 *         self.col_tag_cache[:] = -1
 *         self.band_list[:] = band_list
 *         self.block_list[:] = block_list             # <<<<<<<<<<<<<<
 *         self.update_list[:] = update_list
 *         list_lengths = [len(x) for x in [band_list, block_list, update_list]]
 */
  __pyx_slice__2 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__2);
  __Pyx_GIVEREF(__pyx_slice__2);

  /* "pygeoprocessing\routing\routing_core.pyx":70
 *         self.band_list[:] = band_list
 *         self.block_list[:] = block_list
 *         self.update_list[:] = update_list             # <<<<<<<<<<<<<<
 *         list_lengths = [len(x) for x in [band_list, block_list, update_list]]
 *         if len(set(list_lengths)) > 1:
 */
  __pyx_slice__3 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__3);
  __Pyx_GIVEREF(__pyx_slice__3);

  /* "pygeoprocessing\routing\routing_core.pyx":79
 *         for raster_n_rows, raster_n_cols in raster_dimensions_list:
 *             if raster_n_rows != n_rows or raster_n_cols != n_cols:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "a band was passed in that has a different dimension than"
 *                     "the memory block was specified as")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_a_band_was_passed_in_that_has_a); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "pygeoprocessing\routing\routing_core.pyx":227
 *     cdef int n_cols = outflow_direction_dataset.RasterXSize
 *     cdef int n_rows = outflow_direction_dataset.RasterYSize
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "pygeoprocessing\routing\routing_core.pyx":266
 * 
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_weights_uri)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pygeoprocessing\routing\routing_core.pyx":270
 *         outflow_weights_uri)
 *     source_dataset = gdal.Open(source_uri)
 *     source_band = source_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int source_nodata = pygeoprocessing.get_nodata_from_uri(
 *         source_uri)
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "pygeoprocessing\routing\routing_core.pyx":274
 *         source_uri)
 *     absorption_rate_dataset = gdal.Open(absorption_rate_uri)
 *     absorption_rate_band = absorption_rate_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int absorption_rate_nodata = pygeoprocessing.get_nodata_from_uri(
 *         absorption_rate_uri)
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "pygeoprocessing\routing\routing_core.pyx":283
 *         outflow_direction_dataset, loss_uri, 'GTiff', transport_nodata,
 *         gdal.GDT_Float32)
 *     loss_band = loss_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flux_dataset = pygeoprocessing.new_raster_from_base(
 *         outflow_direction_dataset, flux_uri, 'GTiff', transport_nodata,
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "pygeoprocessing\routing\routing_core.pyx":287
 *         outflow_direction_dataset, flux_uri, 'GTiff', transport_nodata,
 *         gdal.GDT_Float32)
 *     flux_band = flux_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cache_dirty[:] = 0
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "pygeoprocessing\routing\routing_core.pyx":289
 *     flux_band = flux_dataset.GetRasterBand(1)
 * 
 *     cache_dirty[:] = 0             # <<<<<<<<<<<<<<
 *     band_list = [outflow_direction_band, outflow_weights_band, source_band, absorption_rate_band, loss_band, flux_band]
 *     block_list = [outflow_direction_block, outflow_weights_block, source_block, absorption_rate_block, loss_block, flux_block]
 */
  __pyx_slice__11 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__11);
  __Pyx_GIVEREF(__pyx_slice__11);

  /* "pygeoprocessing\routing\routing_core.pyx":297
 *     if stream_uri != None:
 *         stream_dataset = gdal.Open(stream_uri)
 *         stream_band = stream_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *         stream_nodata = pygeoprocessing.get_nodata_from_uri(stream_uri)
 *         band_list.append(stream_band)
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "pygeoprocessing\routing\routing_core.pyx":469
 *     flow_direction_dataset = gdal.Open(flow_direction_uri)
 *     cdef double flow_direction_nodata
 *     flow_direction_band = flow_direction_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flow_direction_nodata = flow_direction_band.GetNoDataValue()
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "pygeoprocessing\routing\routing_core.pyx":487
 *         flow_direction_dataset, outflow_direction_uri, 'GTiff',
 *         outflow_direction_nodata, gdal.GDT_Byte, fill_value=outflow_direction_nodata)
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_byte, ndim=4] outflow_direction_block = (
 *         numpy.empty((N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.int8))
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "pygeoprocessing\routing\routing_core.pyx":495
 *         flow_direction_dataset, outflow_weights_uri, 'GTiff',
 *         outflow_weights_nodata, gdal.GDT_Float32, fill_value=outflow_weights_nodata)
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.npy_float32, ndim=4] outflow_weights_block = (
 *         numpy.empty((N_BLOCK_ROWS, N_BLOCK_COLS, block_row_size, block_col_size), dtype=numpy.float32))
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "pygeoprocessing\routing\routing_core.pyx":513
 *         (N_BLOCK_ROWS, N_BLOCK_COLS), dtype=numpy.int8)
 * 
 *     cache_dirty[:] = 0             # <<<<<<<<<<<<<<
 *     band_list = [flow_direction_band, outflow_direction_band, outflow_weights_band]
 *     block_list = [flow_direction_block, outflow_direction_block, outflow_weights_block]
 */
  __pyx_slice__16 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__16);
  __Pyx_GIVEREF(__pyx_slice__16);

  /* "pygeoprocessing\routing\routing_core.pyx":526
 *     cdef int n_neighbors = 8
 *     cdef double angle_to_neighbor[8]
 *     for index in range(8):             # <<<<<<<<<<<<<<
 *         angle_to_neighbor[index] = 2.0*PI*index/8.0
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_int_8); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "pygeoprocessing\routing\routing_core.pyx":610
 *     cdef int n_cols = dem_ds.RasterXSize
 * 
 *     dem_band = dem_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     #copy the dem to a different dataset so we know the type
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "pygeoprocessing\routing\routing_core.pyx":613
 * 
 *     #copy the dem to a different dataset so we know the type
 *     dem_band = dem_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     raw_nodata_value = pygeoprocessing.get_nodata_from_uri(dem_uri)
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "pygeoprocessing\routing\routing_core.pyx":620
 *         nodata_value = raw_nodata_value
 *     else:
 *         LOGGER.warn("Nodata value not set, defaulting to -9999.9")             # <<<<<<<<<<<<<<
 *         nodata_value = -9999.9
 *     pygeoprocessing.new_raster_from_base_uri(
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Nodata_value_not_set_defaulting); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "pygeoprocessing\routing\routing_core.pyx":626
 *         INF)
 *     dem_out_ds = gdal.Open(dem_out_uri, gdal.GA_Update)
 *     dem_out_band = dem_out_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int row_index, col_index, neighbor_index
 *     cdef float min_dem_value, cur_dem_value, neighbor_dem_value
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "pygeoprocessing\routing\routing_core.pyx":663
 * 
 *         dem_out_band.WriteArray(
 *             dem_array[1, :].reshape((1,n_cols)), xoff=0, yoff=row_index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_slice__22 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__22);
  __Pyx_GIVEREF(__pyx_slice__22);
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_int_1, __pyx_slice__22); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "pygeoprocessing\routing\routing_core.pyx":698
 * 
 *     dem_ds = gdal.Open(dem_uri)
 *     dem_band = dem_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     #facet elevation and factors for slope and flow_direction calculations
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "pygeoprocessing\routing\routing_core.pyx":746
 * 
 *     flow_direction_dataset = gdal.Open(flow_direction_uri, gdal.GA_Update)
 *     flow_band = flow_direction_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     #center point of global index
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "pygeoprocessing\routing\routing_core.pyx":934
 * 
 *     processed_cell_ds = gdal.Open(processed_cell_uri, gdal.GA_Update)
 *     processed_cell_band = processed_cell_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int *row_offsets = [0, -1, -1, -1,  0,  1, 1, 1]
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "pygeoprocessing\routing\routing_core.pyx":948
 * 
 *     stream_ds = gdal.Open(stream_uri)
 *     stream_band = stream_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef float stream_nodata = pygeoprocessing.get_nodata_from_uri(
 *         stream_uri)
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "pygeoprocessing\routing\routing_core.pyx":954
 * 
 *     distance_ds = gdal.Open(distance_uri, gdal.GA_Update)
 *     distance_band = distance_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     outflow_weights_uri = pygeoprocessing.temporary_filename()
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "pygeoprocessing\routing\routing_core.pyx":961
 *         flow_direction_uri, outflow_weights_uri, outflow_direction_uri)
 *     outflow_weights_ds = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef float outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_weights_uri)
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "pygeoprocessing\routing\routing_core.pyx":965
 *         outflow_weights_uri)
 *     outflow_direction_ds = gdal.Open(outflow_direction_uri)
 *     outflow_direction_band = outflow_direction_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_direction_uri)
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "pygeoprocessing\routing\routing_core.pyx":1005
 *             dtype=numpy.float32)
 *         factor_ds = gdal.Open(factor_uri)
 *         factor_band = factor_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *         band_list.append(factor_band)
 *         block_list.append(factor_block)
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "pygeoprocessing\routing\routing_core.pyx":1299
 *         returns nothing"""
 * 
 *     LOGGER.info("calculating percent to sink")             # <<<<<<<<<<<<<<
 *     cdef time_t start_time
 *     time(&start_time)
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_calculating_percent_to_sink); if (unlikely(!__pyx_tuple__32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "pygeoprocessing\routing\routing_core.pyx":1304
 * 
 *     sink_pixels_dataset = gdal.Open(sink_pixels_uri)
 *     sink_pixels_band = sink_pixels_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int sink_pixels_nodata = pygeoprocessing.get_nodata_from_uri(
 *         sink_pixels_uri)
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "pygeoprocessing\routing\routing_core.pyx":1308
 *         sink_pixels_uri)
 *     export_rate_dataset = gdal.Open(export_rate_uri)
 *     export_rate_band = export_rate_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef double export_rate_nodata = pygeoprocessing.get_nodata_from_uri(
 *         export_rate_uri)
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "pygeoprocessing\routing\routing_core.pyx":1312
 *         export_rate_uri)
 *     outflow_direction_dataset = gdal.Open(outflow_direction_uri)
 *     outflow_direction_band = outflow_direction_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef int outflow_direction_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_direction_uri)
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "pygeoprocessing\routing\routing_core.pyx":1316
 *         outflow_direction_uri)
 *     outflow_weights_dataset = gdal.Open(outflow_weights_uri)
 *     outflow_weights_band = outflow_weights_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef float outflow_weights_nodata = pygeoprocessing.get_nodata_from_uri(
 *         outflow_weights_uri)
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "pygeoprocessing\routing\routing_core.pyx":1330
 *         gdal.GDT_Float32, fill_value=effect_nodata)
 *     effect_dataset = gdal.Open(effect_uri, gdal.GA_Update)
 *     effect_band = effect_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     #center point of global index
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "pygeoprocessing\routing\routing_core.pyx":1492
 * 
 *     dem_ds = gdal.Open(dem_uri)
 *     dem_band = dem_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flow_ds = gdal.Open(flow_direction_uri, gdal.GA_Update)
 *     flow_band = flow_ds.GetRasterBand(1)
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "pygeoprocessing\routing\routing_core.pyx":1494
 *     dem_band = dem_ds.GetRasterBand(1)
 *     flow_ds = gdal.Open(flow_direction_uri, gdal.GA_Update)
 *     flow_band = flow_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "pygeoprocessing\routing\routing_core.pyx":1638
 * 
 *     dem_ds = gdal.Open(dem_uri)
 *     dem_band = dem_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int labels_nodata = -1
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "pygeoprocessing\routing\routing_core.pyx":1644
 *         dem_ds, labels_uri, 'GTiff', labels_nodata,
 *         gdal.GDT_Int32)
 *     labels_band = labels_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "pygeoprocessing\routing\routing_core.pyx":1790
 * 
 *     labels_ds = gdal.Open(labels_uri)
 *     labels_band = labels_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "pygeoprocessing\routing\routing_core.pyx":1849
 *             if unlabeled_set.find(flat_index) != unlabeled_set.end():
 *                 high_edges.push_back(flat_index)
 *         LOGGER.warn("Not all flats have outlets")             # <<<<<<<<<<<<<<
 *     block_cache.flush_cache()
 * 
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_Not_all_flats_have_outlets); if (unlikely(!__pyx_tuple__43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "pygeoprocessing\routing\routing_core.pyx":1881
 *     cdef map[int, int] flat_height
 * 
 *     LOGGER.info('draining away from higher')             # <<<<<<<<<<<<<<
 *     away_from_higher(
 *         high_edges, labels_uri, flow_direction_uri, flat_mask_uri, flat_height)
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_draining_away_from_higher); if (unlikely(!__pyx_tuple__44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "pygeoprocessing\routing\routing_core.pyx":1885
 *         high_edges, labels_uri, flow_direction_uri, flat_mask_uri, flat_height)
 * 
 *     LOGGER.info('draining towards lower')             # <<<<<<<<<<<<<<
 *     towards_lower(
 *         low_edges, labels_uri, flow_direction_uri, flat_mask_uri, flat_height)
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_draining_towards_lower); if (unlikely(!__pyx_tuple__45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "pygeoprocessing\routing\routing_core.pyx":1933
 * 
 *     labels_ds = gdal.Open(labels_uri)
 *     labels_band = labels_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "pygeoprocessing\routing\routing_core.pyx":1935
 *     labels_band = labels_ds.GetRasterBand(1)
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "pygeoprocessing\routing\routing_core.pyx":1937
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "pygeoprocessing\routing\routing_core.pyx":2105
 * 
 *     labels_ds = gdal.Open(labels_uri)
 *     labels_band = labels_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "pygeoprocessing\routing\routing_core.pyx":2107
 *     labels_band = labels_ds.GetRasterBand(1)
 *     flat_mask_ds = gdal.Open(flat_mask_uri, gdal.GA_Update)
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "pygeoprocessing\routing\routing_core.pyx":2109
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int block_col_size, block_row_size
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "pygeoprocessing\routing\routing_core.pyx":2279
 * 
 *     flat_mask_ds = gdal.Open(flat_mask_uri)
 *     flat_mask_band = flat_mask_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     #facet elevation and factors for slope and flow_direction calculations
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "pygeoprocessing\routing\routing_core.pyx":2324
 *         flow_direction_uri)
 *     flow_direction_dataset = gdal.Open(flow_direction_uri, gdal.GA_Update)
 *     flow_band = flow_direction_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef float label_nodata = pygeoprocessing.get_nodata_from_uri(labels_uri)
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "pygeoprocessing\routing\routing_core.pyx":2328
 *     cdef float label_nodata = pygeoprocessing.get_nodata_from_uri(labels_uri)
 *     label_dataset = gdal.Open(labels_uri)
 *     label_band = label_dataset.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     #center point of global index
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "pygeoprocessing\routing\routing_core.pyx":2523
 * 
 *     dem_ds = gdal.Open(dem_uri)
 *     dem_band = dem_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 * 
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "pygeoprocessing\routing\routing_core.pyx":2526
 * 
 *     flow_direction_ds = gdal.Open(flow_direction_uri)
 *     flow_direction_band = flow_direction_ds.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     cdef float flow_nodata = pygeoprocessing.get_nodata_from_uri(
 *         flow_direction_uri)
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "pygeoprocessing\routing\routing_core.pyx":2625
 *     if low_edges.size() == 0:
 *         if high_edges.size() != 0:
 *             LOGGER.warn('There were undrainable flats')             # <<<<<<<<<<<<<<
 *         else:
 *             LOGGER.info('There were no flats')
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_There_were_undrainable_flats); if (unlikely(!__pyx_tuple__57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "pygeoprocessing\routing\routing_core.pyx":2627
 *             LOGGER.warn('There were undrainable flats')
 *         else:
 *             LOGGER.info('There were no flats')             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_There_were_no_flats); if (unlikely(!__pyx_tuple__58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "pygeoprocessing\routing\routing_core.pyx":2630
 *         return False
 * 
 *     LOGGER.info('labeling flats')             # <<<<<<<<<<<<<<
 *     label_flats(dem_uri, low_edges, labels_uri)
 * 
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_labeling_flats); if (unlikely(!__pyx_tuple__59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__60)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__61)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":260
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__62)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":802
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__63)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":806
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__64)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":826
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__65)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "View.MemoryView":127
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__66)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "View.MemoryView":130
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(format, unicode):
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__67)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "View.MemoryView":142
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__68)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "View.MemoryView":170
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__69)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "View.MemoryView":186
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__70)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "View.MemoryView":445
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__71)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "View.MemoryView":521
 *             if self.view.strides == NULL:
 * 
 *                 raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *             return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__72)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "View.MemoryView":529
 *         def __get__(self):
 *             if self.view.suboffsets == NULL:
 *                 return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *             return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__73 = PyTuple_New(1); if (unlikely(!__pyx_tuple__73)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_INCREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__73, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "View.MemoryView":638
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__74 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__74)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__74);
  __Pyx_GIVEREF(__pyx_slice__74);

  /* "View.MemoryView":641
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
  __pyx_slice__75 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__75)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__75);
  __Pyx_GIVEREF(__pyx_slice__75);

  /* "View.MemoryView":652
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
  __pyx_slice__76 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__76)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__76);
  __Pyx_GIVEREF(__pyx_slice__76);

  /* "View.MemoryView":659
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__77)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "pygeoprocessing\routing\routing_core.pyx":32
 *     %(message)s', lnevel=logging.DEBUG, datefmt='%m/%d/%Y %H:%M:%S ')
 * 
 * LOGGER = logging.getLogger('pygeoprocessing.routing.routing_core')             # <<<<<<<<<<<<<<
 * 
 * cdef double PI = 3.141592653589793238462643383279502884
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_kp_s_pygeoprocessing_routing_routing); if (unlikely(!__pyx_tuple__78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "pygeoprocessing\routing\routing_core.pyx":444
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def calculate_flow_weights(             # <<<<<<<<<<<<<<
 *     flow_direction_uri, outflow_weights_uri, outflow_direction_uri):
 *     """This function calculates the flow weights from a d-infinity based
 */
  __pyx_tuple__79 = PyTuple_Pack(51, __pyx_n_s_flow_direction_uri, __pyx_n_s_outflow_weights_uri, __pyx_n_s_outflow_direction_uri, __pyx_n_s_start, __pyx_n_s_flow_direction_dataset, __pyx_n_s_flow_direction_nodata, __pyx_n_s_flow_direction_band, __pyx_n_s_block_col_size, __pyx_n_s_block_row_size, __pyx_n_s_flow_direction_block, __pyx_n_s_n_cols, __pyx_n_s_n_rows, __pyx_n_s_outflow_direction_nodata, __pyx_n_s_outflow_direction_dataset, __pyx_n_s_outflow_direction_band, __pyx_n_s_outflow_direction_block, __pyx_n_s_outflow_weights_nodata, __pyx_n_s_outflow_weights_dataset, __pyx_n_s_outflow_weights_band, __pyx_n_s_outflow_weights_block, __pyx_n_s_global_row, __pyx_n_s_global_col, __pyx_n_s_global_block_row, __pyx_n_s_global_block_col, __pyx_n_s_row_index, __pyx_n_s_col_index, __pyx_n_s_row_block_offset, __pyx_n_s_col_block_offset, __pyx_n_s_neighbor_row, __pyx_n_s_neighbor_col, __pyx_n_s_neighbor_row_index, __pyx_n_s_neighbor_col_index, __pyx_n_s_neighbor_row_block_offset, __pyx_n_s_neighbor_col_block_offset, __pyx_n_s_cache_dirty, __pyx_n_s_band_list, __pyx_n_s_block_list, __pyx_n_s_update_list, __pyx_n_s_block_cache, __pyx_n_s_n_neighbors, __pyx_n_s_angle_to_neighbor, __pyx_n_s_index, __pyx_n_s_diagonal_offsets, __pyx_n_s_neighbor_direction_index, __pyx_n_s_current_index, __pyx_n_s_flow_direction, __pyx_n_s_flow_angle_to_neighbor, __pyx_n_s_outflow_weight, __pyx_n_s_last_time, __pyx_n_s_current_time, __pyx_n_s_found); if (unlikely(!__pyx_tuple__79)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(3, 0, 51, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_rich_Documents_pygeoproc, __pyx_n_s_calculate_flow_weights, 444, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pygeoprocessing\routing\routing_core.pyx":592
 * 
 * 
 * def fill_pits(dem_uri, dem_out_uri):             # <<<<<<<<<<<<<<
 *     """This function fills regions in a DEM that don't drain to the edge
 *         of the dataset.  The resulting DEM will likely have plateaus where the
 */
  __pyx_tuple__81 = PyTuple_Pack(21, __pyx_n_s_dem_uri, __pyx_n_s_dem_out_uri, __pyx_n_s_row_offsets, __pyx_n_s_col_offsets, __pyx_n_s_dem_ds, __pyx_n_s_n_rows, __pyx_n_s_n_cols, __pyx_n_s_dem_band, __pyx_n_s_raw_nodata_value, __pyx_n_s_nodata_value, __pyx_n_s_dem_out_ds, __pyx_n_s_dem_out_band, __pyx_n_s_row_index, __pyx_n_s_col_index, __pyx_n_s_neighbor_index, __pyx_n_s_min_dem_value, __pyx_n_s_cur_dem_value, __pyx_n_s_neighbor_dem_value, __pyx_n_s_pit_count, __pyx_n_s_dem_out_array, __pyx_n_s_dem_array); if (unlikely(!__pyx_tuple__81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(2, 0, 21, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_rich_Documents_pygeoproc, __pyx_n_s_fill_pits, 592, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pygeoprocessing\routing\routing_core.pyx":669
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def flow_direction_inf(dem_uri, flow_direction_uri):             # <<<<<<<<<<<<<<
 *     """Calculates the D-infinity flow algorithm.  The output is a float
 *         raster whose values range from 0 to 2pi.
 */
  __pyx_tuple__83 = PyTuple_Pack(79, __pyx_n_s_dem_uri, __pyx_n_s_flow_direction_uri, __pyx_n_s_col_index, __pyx_n_s_row_index, __pyx_n_s_n_cols, __pyx_n_s_n_rows, __pyx_n_s_max_index, __pyx_n_s_facet_index, __pyx_n_s_flat_index, __pyx_n_s_e_0, __pyx_n_s_e_1, __pyx_n_s_e_2, __pyx_n_s_s_1, __pyx_n_s_s_2, __pyx_n_s_d_1, __pyx_n_s_d_2, __pyx_n_s_flow_direction, __pyx_n_s_slope, __pyx_n_s_flow_direction_max_slope, __pyx_n_s_slope_max, __pyx_n_s_nodata_flow, __pyx_n_s_dem_nodata, __pyx_n_s_dem_ds, __pyx_n_s_dem_band, __pyx_n_s_e_0_offsets, __pyx_n_s_e_1_offsets, __pyx_n_s_e_2_offsets, __pyx_n_s_a_c, __pyx_n_s_a_f, __pyx_n_s_row_offsets, __pyx_n_s_col_offsets, __pyx_n_s_max_r, __pyx_n_s_flow_nodata, __pyx_n_s_flow_direction_dataset, __pyx_n_s_flow_band, __pyx_n_s_block_row_size, __pyx_n_s_block_col_size, __pyx_n_s_global_row, __pyx_n_s_global_col, __pyx_n_s_e_0_row, __pyx_n_s_e_0_col, __pyx_n_s_e_1_row, __pyx_n_s_e_1_col, __pyx_n_s_e_2_row, __pyx_n_s_e_2_col, __pyx_n_s_e_0_row_index, __pyx_n_s_e_0_col_index, __pyx_n_s_e_0_row_block_offset, __pyx_n_s_e_0_col_block_offset, __pyx_n_s_e_1_row_index, __pyx_n_s_e_1_col_index, __pyx_n_s_e_1_row_block_offset, __pyx_n_s_e_1_col_block_offset, __pyx_n_s_e_2_row_index, __pyx_n_s_e_2_col_index, __pyx_n_s_e_2_row_block_offset, __pyx_n_s_e_2_col_block_offset, __pyx_n_s_global_block_row, __pyx_n_s_global_block_col, __pyx_n_s_neighbor_row, __pyx_n_s_neighbor_col, __pyx_n_s_neighbor_row_index, __pyx_n_s_neighbor_col_index, __pyx_n_s_neighbor_row_block_offset, __pyx_n_s_neighbor_col_block_offset, __pyx_n_s_flow_block, __pyx_n_s_dem_block, __pyx_n_s_band_list, __pyx_n_s_block_list, __pyx_n_s_update_list, __pyx_n_s_cache_dirty, __pyx_n_s_block_cache, __pyx_n_s_row_offset, __pyx_n_s_col_offset, __pyx_n_s_n_global_block_rows, __pyx_n_s_n_global_block_cols, __pyx_n_s_last_time, __pyx_n_s_current_time, __pyx_n_s_current_flow); if (unlikely(!__pyx_tuple__83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(2, 0, 79, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_rich_Documents_pygeoproc, __pyx_n_s_flow_direction_inf, 669, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pygeoprocessing\routing\routing_core.pyx":899
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def distance_to_stream(             # <<<<<<<<<<<<<<
 *         flow_direction_uri, stream_uri, distance_uri, factor_uri=None):
 *     """This function calculates the flow downhill distance to the stream layers
 */
  __pyx_tuple__85 = PyTuple_Pack(87, __pyx_n_s_flow_direction_uri, __pyx_n_s_stream_uri, __pyx_n_s_distance_uri, __pyx_n_s_factor_uri, __pyx_n_s_distance_nodata, __pyx_n_s_processed_cell_nodata, __pyx_n_s_processed_cell_uri, __pyx_n_s_processed_cell_ds, __pyx_n_s_processed_cell_band, __pyx_n_s_row_offsets, __pyx_n_s_col_offsets, __pyx_n_s_inflow_offsets, __pyx_n_s_n_rows, __pyx_n_s_n_cols, __pyx_n_s_INF, __pyx_n_s_visit_stack, __pyx_n_s_stream_ds, __pyx_n_s_stream_band, __pyx_n_s_stream_nodata, __pyx_n_s_cell_size, __pyx_n_s_distance_ds, __pyx_n_s_distance_band, __pyx_n_s_outflow_weights_uri, __pyx_n_s_outflow_direction_uri, __pyx_n_s_outflow_weights_ds, __pyx_n_s_outflow_weights_band, __pyx_n_s_outflow_weights_nodata, __pyx_n_s_outflow_direction_ds, __pyx_n_s_outflow_direction_band, __pyx_n_s_outflow_direction_nodata, __pyx_n_s_block_col_size, __pyx_n_s_block_row_size, __pyx_n_s_n_global_block_rows, __pyx_n_s_n_global_block_cols, __pyx_n_s_stream_block, __pyx_n_s_outflow_direction_block, __pyx_n_s_outflow_weights_block, __pyx_n_s_distance_block, __pyx_n_s_processed_cell_block, __pyx_n_s_band_list, __pyx_n_s_block_list, __pyx_n_s_update_list, __pyx_n_s_factor_block, __pyx_n_s_factor_exists, __pyx_n_s_factor_ds, __pyx_n_s_factor_band, __pyx_n_s_cache_dirty, __pyx_n_s_block_cache, __pyx_n_s_global_row, __pyx_n_s_global_col, __pyx_n_s_row_index, __pyx_n_s_col_index, __pyx_n_s_row_block_offset, __pyx_n_s_col_block_offset, __pyx_n_s_global_block_row, __pyx_n_s_global_block_col, __pyx_n_s_neighbor_row, __pyx_n_s_neighbor_col, __pyx_n_s_neighbor_row_index, __pyx_n_s_neighbor_col_index, __pyx_n_s_neighbor_row_block_offset, __pyx_n_s_neighbor_col_block_offset, __pyx_n_s_flat_index, __pyx_n_s_original_distance, __pyx_n_s_cells_in_queue, __pyx_n_s_last_time, __pyx_n_s_current_time, __pyx_n_s_neighbor_outflow_direction, __pyx_n_s_neighbor_index, __pyx_n_s_outflow_direction, __pyx_n_s_neighbor_outflow_weight, __pyx_n_s_current_distance, __pyx_n_s_cell_travel_distance, __pyx_n_s_outflow_weight, __pyx_n_s_neighbor_distance, __pyx_n_s_step_size, __pyx_n_s_factor, __pyx_n_s_it_flows_here, __pyx_n_s_downstream_index, __pyx_n_s_downstream_calculated, __pyx_n_s_downstream_distance, __pyx_n_s_current_stream, __pyx_n_s_pushed_current, __pyx_n_s_update_downstream, __pyx_n_s_neighbor_flat_index, __pyx_n_s_dataset, __pyx_n_s_dataset_uri); if (unlikely(!__pyx_tuple__85)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(4, 0, 87, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_rich_Documents_pygeoproc, __pyx_n_s_distance_to_stream, 899, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pygeoprocessing\routing\routing_core.pyx":1269
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def percent_to_sink(             # <<<<<<<<<<<<<<
 *     sink_pixels_uri, export_rate_uri, outflow_direction_uri,
 *     outflow_weights_uri, effect_uri):
 */
  __pyx_tuple__87 = PyTuple_Pack(61, __pyx_n_s_sink_pixels_uri, __pyx_n_s_export_rate_uri, __pyx_n_s_outflow_direction_uri, __pyx_n_s_outflow_weights_uri, __pyx_n_s_effect_uri, __pyx_n_s_start_time, __pyx_n_s_sink_pixels_dataset, __pyx_n_s_sink_pixels_band, __pyx_n_s_sink_pixels_nodata, __pyx_n_s_export_rate_dataset, __pyx_n_s_export_rate_band, __pyx_n_s_export_rate_nodata, __pyx_n_s_outflow_direction_dataset, __pyx_n_s_outflow_direction_band, __pyx_n_s_outflow_direction_nodata, __pyx_n_s_outflow_weights_dataset, __pyx_n_s_outflow_weights_band, __pyx_n_s_outflow_weights_nodata, __pyx_n_s_block_col_size, __pyx_n_s_block_row_size, __pyx_n_s_n_rows, __pyx_n_s_n_cols, __pyx_n_s_effect_nodata, __pyx_n_s_effect_dataset, __pyx_n_s_effect_band, __pyx_n_s_global_row, __pyx_n_s_global_col, __pyx_n_s_row_index, __pyx_n_s_col_index, __pyx_n_s_row_block_offset, __pyx_n_s_col_block_offset, __pyx_n_s_global_block_row, __pyx_n_s_global_block_col, __pyx_n_s_neighbor_row, __pyx_n_s_neighbor_col, __pyx_n_s_neighbor_row_index, __pyx_n_s_neighbor_col_index, __pyx_n_s_neighbor_row_block_offset, __pyx_n_s_neighbor_col_block_offset, __pyx_n_s_sink_pixels_block, __pyx_n_s_export_rate_block, __pyx_n_s_outflow_direction_block, __pyx_n_s_outflow_weights_block, __pyx_n_s_out_block, __pyx_n_s_effect_block, __pyx_n_s_block_list, __pyx_n_s_band_list, __pyx_n_s_update_list, __pyx_n_s_cache_dirty, __pyx_n_s_block_cache, __pyx_n_s_outflow_weight, __pyx_n_s_neighbor_outflow_weight, __pyx_n_s_neighbor_outflow_direction, __pyx_n_s_row_offsets, __pyx_n_s_col_offsets, __pyx_n_s_inflow_offsets, __pyx_n_s_flat_index, __pyx_n_s_process_queue, __pyx_n_s_neighbor_index, __pyx_n_s_it_flows_here, __pyx_n_s_end_time); if (unlikely(!__pyx_tuple__87)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(5, 0, 61, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_rich_Documents_pygeoproc, __pyx_n_s_percent_to_sink, 1269, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pygeoprocessing\routing\routing_core.pyx":2246
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def flow_direction_inf_masked_flow_dirs(             # <<<<<<<<<<<<<<
 *         flat_mask_uri, labels_uri, flow_direction_uri):
 *     """Calculates the D-infinity flow algorithm for regions defined from flat
 */
  __pyx_tuple__89 = PyTuple_Pack(86, __pyx_n_s_flat_mask_uri, __pyx_n_s_labels_uri, __pyx_n_s_flow_direction_uri, __pyx_n_s_col_index, __pyx_n_s_row_index, __pyx_n_s_n_cols, __pyx_n_s_n_rows, __pyx_n_s_max_index, __pyx_n_s_facet_index, __pyx_n_s_flat_index, __pyx_n_s_e_0, __pyx_n_s_e_1, __pyx_n_s_e_2, __pyx_n_s_s_1, __pyx_n_s_s_2, __pyx_n_s_d_1, __pyx_n_s_d_2, __pyx_n_s_flow_direction, __pyx_n_s_slope, __pyx_n_s_flow_direction_max_slope, __pyx_n_s_slope_max, __pyx_n_s_nodata_flow, __pyx_n_s_flat_mask_ds, __pyx_n_s_flat_mask_band, __pyx_n_s_e_0_offsets, __pyx_n_s_e_1_offsets, __pyx_n_s_e_2_offsets, __pyx_n_s_a_c, __pyx_n_s_a_f, __pyx_n_s_row_offsets, __pyx_n_s_col_offsets, __pyx_n_s_max_r, __pyx_n_s_flow_nodata, __pyx_n_s_flow_direction_dataset, __pyx_n_s_flow_band, __pyx_n_s_label_nodata, __pyx_n_s_label_dataset, __pyx_n_s_label_band, __pyx_n_s_block_row_size, __pyx_n_s_block_col_size, __pyx_n_s_global_row, __pyx_n_s_global_col, __pyx_n_s_e_0_row, __pyx_n_s_e_0_col, __pyx_n_s_e_1_row, __pyx_n_s_e_1_col, __pyx_n_s_e_2_row, __pyx_n_s_e_2_col, __pyx_n_s_e_0_row_index, __pyx_n_s_e_0_col_index, __pyx_n_s_e_0_row_block_offset, __pyx_n_s_e_0_col_block_offset, __pyx_n_s_e_1_row_index, __pyx_n_s_e_1_col_index, __pyx_n_s_e_1_row_block_offset, __pyx_n_s_e_1_col_block_offset, __pyx_n_s_e_2_row_index, __pyx_n_s_e_2_col_index, __pyx_n_s_e_2_row_block_offset, __pyx_n_s_e_2_col_block_offset, __pyx_n_s_global_block_row, __pyx_n_s_global_block_col, __pyx_n_s_neighbor_row, __pyx_n_s_neighbor_col, __pyx_n_s_neighbor_row_index, __pyx_n_s_neighbor_col_index, __pyx_n_s_neighbor_row_block_offset, __pyx_n_s_neighbor_col_block_offset, __pyx_n_s_flow_block, __pyx_n_s_flat_mask_block, __pyx_n_s_label_block, __pyx_n_s_band_list, __pyx_n_s_block_list, __pyx_n_s_update_list, __pyx_n_s_cache_dirty, __pyx_n_s_block_cache, __pyx_n_s_row_offset, __pyx_n_s_col_offset, __pyx_n_s_n_global_block_rows, __pyx_n_s_n_global_block_cols, __pyx_n_s_last_time, __pyx_n_s_current_time, __pyx_n_s_current_flow, __pyx_n_s_current_label, __pyx_n_s_e_1_label, __pyx_n_s_e_2_label); if (unlikely(!__pyx_tuple__89)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(3, 0, 86, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_rich_Documents_pygeoproc, __pyx_n_s_flow_direction_inf_masked_flow_d, 2246, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pygeoprocessing\routing\routing_core.pyx":2594
 * 
 * 
 * def resolve_flats(             # <<<<<<<<<<<<<<
 *     dem_uri, flow_direction_uri, flat_mask_uri, labels_uri,
 *     drain_off_edge=False):
 */
  __pyx_tuple__91 = PyTuple_Pack(7, __pyx_n_s_dem_uri, __pyx_n_s_flow_direction_uri, __pyx_n_s_flat_mask_uri, __pyx_n_s_labels_uri, __pyx_n_s_drain_off_edge, __pyx_n_s_high_edges, __pyx_n_s_low_edges); if (unlikely(!__pyx_tuple__91)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(5, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_rich_Documents_pygeoproc, __pyx_n_s_resolve_flats, 2594, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pygeoprocessing\routing\routing_core.pyx":2642
 * 
 * 
 * def route_flux(             # <<<<<<<<<<<<<<
 *         in_flow_direction, in_dem, in_source_uri, in_absorption_rate_uri,
 *         loss_uri, flux_uri, absorption_mode, aoi_uri=None, stream_uri=None):
 */
  __pyx_tuple__93 = PyTuple_Pack(20, __pyx_n_s_in_flow_direction, __pyx_n_s_in_dem, __pyx_n_s_in_source_uri, __pyx_n_s_in_absorption_rate_uri, __pyx_n_s_loss_uri, __pyx_n_s_flux_uri, __pyx_n_s_absorption_mode, __pyx_n_s_aoi_uri, __pyx_n_s_stream_uri, __pyx_n_s_dem_uri, __pyx_n_s_flow_direction_uri, __pyx_n_s_source_uri, __pyx_n_s_absorption_rate_uri, __pyx_n_s_out_pixel_size, __pyx_n_s_outflow_weights_uri, __pyx_n_s_outflow_direction_uri, __pyx_n_s_outlet_cell_deque, __pyx_n_s_cleanup_uri_list, __pyx_n_s_ds_uri, __pyx_n_s_exception); if (unlikely(!__pyx_tuple__93)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(9, 0, 20, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_rich_Documents_pygeoproc, __pyx_n_s_route_flux, 2642, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":276
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__95 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__95)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "View.MemoryView":277
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__96 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__96)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);

  /* "View.MemoryView":278
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__97 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__97)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);

  /* "View.MemoryView":281
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__98 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__98)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);

  /* "View.MemoryView":282
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__99 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__99)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_float_4_0 = PyFloat_FromDouble(4.0); if (unlikely(!__pyx_float_4_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_8_0 = PyFloat_FromDouble(8.0); if (unlikely(!__pyx_float_8_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initrouting_core(void); /*proto*/
PyMODINIT_FUNC initrouting_core(void)
#else
PyMODINIT_FUNC PyInit_routing_core(void); /*proto*/
PyMODINIT_FUNC PyInit_routing_core(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_routing_core(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("routing_core", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_pygeoprocessing__routing__routing_core) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "pygeoprocessing.routing.routing_core")) {
      if (unlikely(PyDict_SetItemString(modules, "pygeoprocessing.routing.routing_core", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("find_outlets", (void (*)(void))__pyx_f_15pygeoprocessing_7routing_12routing_core_find_outlets, "PyObject *(PyObject *, PyObject *, std::deque<int>  &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("calculate_transport", (void (*)(void))__pyx_f_15pygeoprocessing_7routing_12routing_core_calculate_transport, "PyObject *(PyObject *, PyObject *, std::deque<int>  &, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, struct __pyx_opt_args_15pygeoprocessing_7routing_12routing_core_calculate_transport *__pyx_optional_args)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  __pyx_vtabptr_15pygeoprocessing_7routing_12routing_core_BlockCache = &__pyx_vtable_15pygeoprocessing_7routing_12routing_core_BlockCache;
  __pyx_vtable_15pygeoprocessing_7routing_12routing_core_BlockCache.update_cache = (void (*)(struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *, int, int, int *, int *, int *, int *))__pyx_f_15pygeoprocessing_7routing_12routing_core_10BlockCache_update_cache;
  __pyx_vtable_15pygeoprocessing_7routing_12routing_core_BlockCache.flush_cache = (void (*)(struct __pyx_obj_15pygeoprocessing_7routing_12routing_core_BlockCache *))__pyx_f_15pygeoprocessing_7routing_12routing_core_10BlockCache_flush_cache;
  if (PyType_Ready(&__pyx_type_15pygeoprocessing_7routing_12routing_core_BlockCache) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_15pygeoprocessing_7routing_12routing_core_BlockCache.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_15pygeoprocessing_7routing_12routing_core_BlockCache.tp_dict, __pyx_vtabptr_15pygeoprocessing_7routing_12routing_core_BlockCache) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "BlockCache", (PyObject *)&__pyx_type_15pygeoprocessing_7routing_12routing_core_BlockCache) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache = &__pyx_type_15pygeoprocessing_7routing_12routing_core_BlockCache;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type___pyx_array.tp_print = 0;
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type___pyx_memoryview.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pygeoprocessing\routing\routing_core.pyx":3
 * # cython: profile=False
 * 
 * import logging             # <<<<<<<<<<<<<<
 * import os
 * import collections
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_logging, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":4
 * 
 * import logging
 * import os             # <<<<<<<<<<<<<<
 * import collections
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":5
 * import logging
 * import os
 * import collections             # <<<<<<<<<<<<<<
 * 
 * import numpy
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collections, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":7
 * import collections
 * 
 * import numpy             # <<<<<<<<<<<<<<
 * cimport numpy
 * cimport cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":10
 * cimport numpy
 * cimport cython
 * import osgeo             # <<<<<<<<<<<<<<
 * from osgeo import gdal
 * from cython.operator cimport dereference as deref
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_osgeo, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_osgeo, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":11
 * cimport cython
 * import osgeo
 * from osgeo import gdal             # <<<<<<<<<<<<<<
 * from cython.operator cimport dereference as deref
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_gdal);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_gdal);
  __Pyx_GIVEREF(__pyx_n_s_gdal);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_osgeo, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gdal, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":27
 *     time_t time(time_t*)
 * 
 * import pygeoprocessing             # <<<<<<<<<<<<<<
 * 
 * logging.basicConfig(format='%(asctime)s %(name)-18s %(levelname)-8s \
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pygeoprocessing, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pygeoprocessing, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":29
 * import pygeoprocessing
 * 
 * logging.basicConfig(format='%(asctime)s %(name)-18s %(levelname)-8s \             # <<<<<<<<<<<<<<
 *     %(message)s', lnevel=logging.DEBUG, datefmt='%m/%d/%Y %H:%M:%S ')
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_basicConfig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_format, __pyx_kp_s_asctime_s_name_18s_levelname_8s) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pygeoprocessing\routing\routing_core.pyx":30
 * 
 * logging.basicConfig(format='%(asctime)s %(name)-18s %(levelname)-8s \
 *     %(message)s', lnevel=logging.DEBUG, datefmt='%m/%d/%Y %H:%M:%S ')             # <<<<<<<<<<<<<<
 * 
 * LOGGER = logging.getLogger('pygeoprocessing.routing.routing_core')
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_DEBUG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_lnevel, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_datefmt, __pyx_kp_s_m_d_Y_H_M_S) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pygeoprocessing\routing\routing_core.pyx":29
 * import pygeoprocessing
 * 
 * logging.basicConfig(format='%(asctime)s %(name)-18s %(levelname)-8s \             # <<<<<<<<<<<<<<
 *     %(message)s', lnevel=logging.DEBUG, datefmt='%m/%d/%Y %H:%M:%S ')
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":32
 *     %(message)s', lnevel=logging.DEBUG, datefmt='%m/%d/%Y %H:%M:%S ')
 * 
 * LOGGER = logging.getLogger('pygeoprocessing.routing.routing_core')             # <<<<<<<<<<<<<<
 * 
 * cdef double PI = 3.141592653589793238462643383279502884
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOGGER, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":34
 * LOGGER = logging.getLogger('pygeoprocessing.routing.routing_core')
 * 
 * cdef double PI = 3.141592653589793238462643383279502884             # <<<<<<<<<<<<<<
 * cdef double INF = numpy.inf
 * cdef int N_BLOCK_ROWS = 16
 */
  __pyx_v_15pygeoprocessing_7routing_12routing_core_PI = 3.141592653589793238462643383279502884;

  /* "pygeoprocessing\routing\routing_core.pyx":35
 * 
 * cdef double PI = 3.141592653589793238462643383279502884
 * cdef double INF = numpy.inf             # <<<<<<<<<<<<<<
 * cdef int N_BLOCK_ROWS = 16
 * cdef int N_BLOCK_COLS = 16
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_inf); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_15pygeoprocessing_7routing_12routing_core_INF = __pyx_t_5;

  /* "pygeoprocessing\routing\routing_core.pyx":36
 * cdef double PI = 3.141592653589793238462643383279502884
 * cdef double INF = numpy.inf
 * cdef int N_BLOCK_ROWS = 16             # <<<<<<<<<<<<<<
 * cdef int N_BLOCK_COLS = 16
 * 
 */
  __pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_ROWS = 16;

  /* "pygeoprocessing\routing\routing_core.pyx":37
 * cdef double INF = numpy.inf
 * cdef int N_BLOCK_ROWS = 16
 * cdef int N_BLOCK_COLS = 16             # <<<<<<<<<<<<<<
 * 
 * cdef class BlockCache:
 */
  __pyx_v_15pygeoprocessing_7routing_12routing_core_N_BLOCK_COLS = 16;

  /* "pygeoprocessing\routing\routing_core.pyx":49
 *     cdef int n_rows
 *     cdef int n_cols
 *     band_list = []             # <<<<<<<<<<<<<<
 *     block_list = []
 *     update_list = []
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache->tp_dict, __pyx_n_s_band_list, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache);

  /* "pygeoprocessing\routing\routing_core.pyx":50
 *     cdef int n_cols
 *     band_list = []
 *     block_list = []             # <<<<<<<<<<<<<<
 *     update_list = []
 * 
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache->tp_dict, __pyx_n_s_block_list, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache);

  /* "pygeoprocessing\routing\routing_core.pyx":51
 *     band_list = []
 *     block_list = []
 *     update_list = []             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache->tp_dict, __pyx_n_s_update_list, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_15pygeoprocessing_7routing_12routing_core_BlockCache);

  /* "pygeoprocessing\routing\routing_core.pyx":444
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def calculate_flow_weights(             # <<<<<<<<<<<<<<
 *     flow_direction_uri, outflow_weights_uri, outflow_direction_uri):
 *     """This function calculates the flow weights from a d-infinity based
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15pygeoprocessing_7routing_12routing_core_1calculate_flow_weights, NULL, __pyx_kp_s_pygeoprocessing_routing_routing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calculate_flow_weights, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":592
 * 
 * 
 * def fill_pits(dem_uri, dem_out_uri):             # <<<<<<<<<<<<<<
 *     """This function fills regions in a DEM that don't drain to the edge
 *         of the dataset.  The resulting DEM will likely have plateaus where the
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15pygeoprocessing_7routing_12routing_core_3fill_pits, NULL, __pyx_kp_s_pygeoprocessing_routing_routing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_pits, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":669
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def flow_direction_inf(dem_uri, flow_direction_uri):             # <<<<<<<<<<<<<<
 *     """Calculates the D-infinity flow algorithm.  The output is a float
 *         raster whose values range from 0 to 2pi.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15pygeoprocessing_7routing_12routing_core_5flow_direction_inf, NULL, __pyx_kp_s_pygeoprocessing_routing_routing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_flow_direction_inf, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":899
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def distance_to_stream(             # <<<<<<<<<<<<<<
 *         flow_direction_uri, stream_uri, distance_uri, factor_uri=None):
 *     """This function calculates the flow downhill distance to the stream layers
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15pygeoprocessing_7routing_12routing_core_7distance_to_stream, NULL, __pyx_kp_s_pygeoprocessing_routing_routing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_distance_to_stream, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1269
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def percent_to_sink(             # <<<<<<<<<<<<<<
 *     sink_pixels_uri, export_rate_uri, outflow_direction_uri,
 *     outflow_weights_uri, effect_uri):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15pygeoprocessing_7routing_12routing_core_9percent_to_sink, NULL, __pyx_kp_s_pygeoprocessing_routing_routing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_percent_to_sink, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2246
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def flow_direction_inf_masked_flow_dirs(             # <<<<<<<<<<<<<<
 *         flat_mask_uri, labels_uri, flow_direction_uri):
 *     """Calculates the D-infinity flow algorithm for regions defined from flat
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15pygeoprocessing_7routing_12routing_core_11flow_direction_inf_masked_flow_dirs, NULL, __pyx_kp_s_pygeoprocessing_routing_routing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_flow_direction_inf_masked_flow_d, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2594
 * 
 * 
 * def resolve_flats(             # <<<<<<<<<<<<<<
 *     dem_uri, flow_direction_uri, flat_mask_uri, labels_uri,
 *     drain_off_edge=False):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15pygeoprocessing_7routing_12routing_core_13resolve_flats, NULL, __pyx_kp_s_pygeoprocessing_routing_routing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_resolve_flats, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":2642
 * 
 * 
 * def route_flux(             # <<<<<<<<<<<<<<
 *         in_flow_direction, in_dem, in_source_uri, in_absorption_rate_uri,
 *         loss_uri, flux_uri, absorption_mode, aoi_uri=None, stream_uri=None):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15pygeoprocessing_7routing_12routing_core_15route_flux, NULL, __pyx_kp_s_pygeoprocessing_routing_routing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_route_flux, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygeoprocessing\routing\routing_core.pyx":1
 * # cython: profile=False             # <<<<<<<<<<<<<<
 * 
 * import logging
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":203
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), __pyx_k_getbuffer_obj_view_flags); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":276
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_MemviewEnum_type)), __pyx_tuple__95, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":277
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_MemviewEnum_type)), __pyx_tuple__96, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":278
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_MemviewEnum_type)), __pyx_tuple__97, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":281
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_MemviewEnum_type)), __pyx_tuple__98, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":282
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_MemviewEnum_type)), __pyx_tuple__99, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":496
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), __pyx_k_getbuffer_obj_view_flags); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":952
 *             return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), __pyx_k_getbuffer_obj_view_flags); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pygeoprocessing.routing.routing_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pygeoprocessing.routing.routing_core");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (!buf) {
        PyErr_SetString(PyExc_ValueError,
            "buf is NULL.");
        goto fail;
    } else if (memviewslice->memview || memviewslice->data) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
static CYTHON_INLINE void __pyx_fatalerror(const char *fmt, ...) {
    va_list vargs;
    char msg[200];
    va_start(vargs, fmt);
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    Py_FatalError(msg);
    va_end(vargs);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview || (PyObject *) memview == Py_None)
        return;
    if (__pyx_get_slice_count(memview) < 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (first_time) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview ) {
        return;
    } else if ((PyObject *) memview == Py_None) {
        memslice->memview = NULL;
        return;
    }
    if (__pyx_get_slice_count(memview) <= 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (last_time) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (PyErr_ExceptionMatches(PyExc_OverflowError))
                    PyErr_Clear();
                else
                    goto bad;
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object does not support slice %.10s",
        Py_TYPE(obj)->tp_name, value ? "assignment" : "deletion");
bad:
    return -1;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(tmp_type, tmp_value, tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        length = strlen(cstring);
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (buf->strides[dim] != sizeof(void *)) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (buf->strides[dim] != buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (stride < buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (spec & (__Pyx_MEMVIEW_PTR)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (buf->suboffsets) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (buf->suboffsets && buf->suboffsets[dim] >= 0) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (!buf->suboffsets || (buf->suboffsets && buf->suboffsets[dim] < 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1)
            {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (buf->ndim != ndim) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
    }
    if ((unsigned) buf->itemsize != dtype->size) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    for (i = 0; i < ndim; i++) {
        spec = axes_specs[i];
        if (!__pyx_check_strides(buf, i, ndim, spec))
            goto fail;
        if (!__pyx_check_suboffsets(buf, i, ndim, spec))
            goto fail;
    }
    if (buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int8_t(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 2,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int32(npy_int32 value) {
    const npy_int32 neg_one = (npy_int32) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_int32) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_int32) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(npy_int32) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(npy_int32) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_int32) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(npy_int32),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice *mvs,
                             char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs->memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs->suboffsets[index] >= 0 || mvs->strides[index] != itemsize)
            return 0;
        itemsize *= mvs->shape[index];
    }
    return 1;
}

static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (from_mvs->suboffsets[i] >= 0) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(char, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(char) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(char, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(char, long, PyLong_AsLong(x))
            } else if (sizeof(char) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(char, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int32_t(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 2,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
